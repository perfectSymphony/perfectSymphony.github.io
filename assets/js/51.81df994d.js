(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{409:function(t,v,_){"use strict";_.r(v);var e=_(45),n=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"js基本数据类型有哪些-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js基本数据类型有哪些-有什么区别"}},[t._v("#")]),t._v(" js基本数据类型有哪些，有什么区别？")]),t._v(" "),_("p",[t._v("一、JavaScript的数据类型：")]),t._v(" "),_("p",[t._v("1、基本数据类型有这五种: Undefined、Null、String、Number、Boolean")]),t._v(" "),_("p",[t._v("2、引用类型：当复制保存着对象的某个变量时，操作的是对象的引用，但在为对象添加属性时，操作的是实际的对象。引用类型值指那些可能为多个值构成的对象。引用类型值指那些可能为多个值构成的对象。")]),t._v(" "),_("p",[t._v("3、引用类型有这几种：object、Array、RegExp、Date、Function、特殊的基本包装类型(String、Number、Boolean)以及单体内置对象(Global、Math)。")]),t._v(" "),_("p",[t._v("二、基本类型和引用类型的区别")]),t._v(" "),_("p",[t._v("1、基本类型的变量是存放在栈区的（栈区指内存里的栈内存）；")]),t._v(" "),_("p",[t._v("2、引用类型的值是同时保存在栈内存和堆内存中的对象；")]),t._v(" "),_("p",[t._v("3、基本类型的比较是值的比较；")]),t._v(" "),_("p",[t._v("4、引用类型的比较是引用的比较；")]),t._v(" "),_("p",[t._v("三、什么是栈内存，什么是堆内存，两者有什么区别？")]),t._v(" "),_("p",[_("strong",[t._v("栈内存")]),t._v("：由程序自动向操作系统申请分配以及回收，速度快，使用方便，但程序员无法控制。若分配失败，则提示栈溢出错误。注意，const局部变量也储存在栈区内，栈区向地址减小的方向增长。")]),t._v(" "),_("p",[_("strong",[t._v("堆内存")]),t._v("：程序员向操作系统申请一块内存，当系统收到程序的申请时，会遍历一个记录空闲内存地址的链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。分配的速度较慢，地址不连续，容易碎片化。此外，由程序员申请，同时也必须由程序员负责销毁，否则则导致内存泄露。")]),t._v(" "),_("p",[t._v("四、关于堆和栈区别的比喻：")]),t._v(" "),_("p",[t._v("堆和栈的区别可以引用一位前辈的比喻来看出：使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。")])])}),[],!1,null,null,null);v.default=n.exports}}]);