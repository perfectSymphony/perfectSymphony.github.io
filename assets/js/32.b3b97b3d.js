(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{390:function(s,t,a){"use strict";a.r(t);var e=a(45),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"html相关面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html相关面试题"}},[s._v("#")]),s._v(" html相关面试题")]),s._v(" "),a("h3",{attrs:{id:"一、什么是html语义化标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是html语义化标签"}},[s._v("#")]),s._v(" 一、什么是HTML语义化标签")]),s._v(" "),a("p",[s._v("语义化的标签，说明让标签有自己的含义。")]),s._v(" "),a("p",[s._v("一行文字")]),s._v(" "),a("p",[a("span",[s._v("一行文字")])]),s._v(" "),a("p",[s._v("如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签则没有独特的含义。")]),s._v(" "),a("p",[s._v("二、语义化标签的特点")]),s._v(" "),a("p",[s._v("代码结构清晰，方便阅读，有利于团队合作开发。")]),s._v(" "),a("p",[s._v("方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。")]),s._v(" "),a("p",[s._v("有利于搜索引擎优化（SEO）。")]),s._v(" "),a("p",[s._v("便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。")]),s._v(" "),a("p",[s._v("三、常见的语义化标签")]),s._v(" "),a("p",[s._v("因此我们在写页面结构时，应尽量使用有 语义的HTML 标签")]),s._v(" "),a("p",[a("code",[s._v("<title>")]),s._v("：页面主体内容。")]),s._v(" "),a("p",[a("code",[s._v("<hn>")]),s._v("：h1~h6，分级标题，"),a("code",[s._v("<h1>")]),s._v(" 与 "),a("code",[s._v("<title>")]),s._v(" 协调有利于搜索引擎优化。")]),s._v(" "),a("p",[a("code",[s._v("<ul>")]),s._v("：无序列表。")]),s._v(" "),a("p",[a("code",[s._v("<ol>")]),s._v("：有序列表。")]),s._v(" "),a("p",[a("code",[s._v("<header>")]),s._v("：页眉通常包括网站标志、主导航、全站链接以及搜索框。")]),s._v(" "),a("p",[a("code",[s._v("<nav>")]),s._v("：标记导航，仅对文档中重要的链接群使用。")]),s._v(" "),a("p",[a("code",[s._v("<main>")]),s._v("：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。")]),s._v(" "),a("p",[a("code",[s._v("<article>")]),s._v("：定义外部的内容，其中的内容独立于文档的其余部分。")]),s._v(" "),a("p",[a("code",[s._v("<section>")]),s._v("：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。")]),s._v(" "),a("p",[a("code",[s._v("<aside>")]),s._v("：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。")]),s._v(" "),a("p",[a("code",[s._v("<footer>")]),s._v("：页脚，只有当父级是body时，才是整个页面的页脚。")]),s._v(" "),a("p",[a("code",[s._v("<small>")]),s._v("：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。")]),s._v(" "),a("p",[a("code",[s._v("<strong>")]),s._v("：和 em 标签一样，用于强调文本，但它强调的程度更强一些。")]),s._v(" "),a("p",[a("code",[s._v("<em>")]),s._v("：将其中的文本表示为强调的内容，表现为斜体。")]),s._v(" "),a("p",[a("code",[s._v("<mark>")]),s._v("：使用黄色突出显示部分文本。")]),s._v(" "),a("p",[a("code",[s._v("<figure>")]),s._v("：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。")]),s._v(" "),a("p",[a("code",[s._v("<figcaption>")]),s._v("：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。")]),s._v(" "),a("p",[a("code",[s._v("<cite>")]),s._v("：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。")]),s._v(" "),a("p",[a("code",[s._v("<blockquoto>")]),s._v("：定义块引用，块引用拥有它们自己的空间。")]),s._v(" "),a("p",[a("code",[s._v("<q>")]),s._v("：短的引述（跨浏览器问题，尽量避免使用）。")]),s._v(" "),a("p",[a("code",[s._v("<time>")]),s._v("：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。")]),s._v(" "),a("p",[a("code",[s._v("<abbr>")]),s._v("：简称或缩写。")]),s._v(" "),a("p",[a("code",[s._v("<dfn>")]),s._v("：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。")]),s._v(" "),a("p",[a("code",[s._v("<del>")]),s._v("：移除的内容。")]),s._v(" "),a("p",[a("code",[s._v("<ins>")]),s._v("：添加的内容。")]),s._v(" "),a("p",[a("code",[s._v("<code>")]),s._v("：标记代码。")]),s._v(" "),a("p",[a("code",[s._v("<meter>")]),s._v("：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）")]),s._v(" "),a("p",[a("code",[s._v("<progress>")]),s._v("：定义运行中的进度（进程）。")]),s._v(" "),a("h3",{attrs:{id:"二、什么是回流-什么是重绘-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、什么是回流-什么是重绘-有什么区别"}},[s._v("#")]),s._v(" 二、什么是回流，什么是重绘，有什么区别？")]),s._v(" "),a("h4",{attrs:{id:"html-加载时发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-加载时发生了什么"}},[s._v("#")]),s._v(" html 加载时发生了什么")]),s._v(" "),a("p",[s._v("在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。\n浏览器把所有样式(用户定义的CSS和用户代理)解析成样式结构体\nDOM Tree 和样式结构体组合后构建render tree, render tree类似于DOM tree，但区别很大，因为render tree能识别样式，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。我自己简单的理解就是DOM Tree和我们写的CSS结合在一起之后，渲染出了render tree。")]),s._v(" "),a("h4",{attrs:{id:"什么是回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是回流"}},[s._v("#")]),s._v(" 什么是回流")]),s._v(" "),a("p",[s._v("当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。")]),s._v(" "),a("h4",{attrs:{id:"什么是重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是重绘"}},[s._v("#")]),s._v(" 什么是重绘")]),s._v(" "),a("p",[s._v("当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。")]),s._v(" "),a("h4",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("p",[s._v("他们的区别很大：\n回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流\n当页面布局和几何属性改变时就需要回流\n比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变")]),s._v(" "),a("h4",{attrs:{id:"扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[s._v("#")]),s._v(" 扩展：")]),s._v(" "),a("p",[s._v("能得知回流比重绘的代价要更高，回流的花销跟render tree有多少节点需要重新构建有关系\n因为这些机制的存在，所以浏览器会帮助我们优化这些操作，浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。")]),s._v(" "),a("h4",{attrs:{id:"触发重排途径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发重排途径"}},[s._v("#")]),s._v(" 触发重排途径")]),s._v(" "),a("h5",{attrs:{id:"添加、删除或改变元素的可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加、删除或改变元素的可见性"}},[s._v("#")]),s._v(" 添加、删除或改变元素的可见性")]),s._v(" "),a("p",[s._v("使用JavaScript更改DOM会导致回流")]),s._v(" "),a("h5",{attrs:{id:"添加、删除或改变css样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加、删除或改变css样式"}},[s._v("#")]),s._v(" 添加、删除或改变css样式")]),s._v(" "),a("p",[s._v("直接应用CSS样式或者类名都可能会改变布局。比如更改元素的宽度会影响同一DOM树及其周围的所有元素")]),s._v(" "),a("h5",{attrs:{id:"css3-animations-和-transitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css3-animations-和-transitions"}},[s._v("#")]),s._v(" CSS3 animations 和 transitions")]),s._v(" "),a("p",[s._v("动画的每一帧都会引起回流")]),s._v(" "),a("h5",{attrs:{id:"用offsetwidth-和-offsetheight"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用offsetwidth-和-offsetheight"}},[s._v("#")]),s._v(" 用offsetWidth 和 offsetHeight")]),s._v(" "),a("p",[s._v("读取元素的"),a("code",[s._v("offsetWidth")]),s._v("和"),a("code",[s._v("offsetHeight")]),s._v("属性会触发回流来计算属性值。")]),s._v(" "),a("h5",{attrs:{id:"用户行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户行为"}},[s._v("#")]),s._v(" 用户行为")]),s._v(" "),a("p",[s._v("一些用户行为会触发回流，比如：hover、在输入框中输入文本、调整窗口大小、更改字体大小、切换样式表或字体。")]),s._v(" "),a("h4",{attrs:{id:"减少回流和重绘的技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少回流和重绘的技巧"}},[s._v("#")]),s._v(" 减少回流和重绘的技巧")]),s._v(" "),a("p",[s._v("减少回流、重绘其实就是需要减少对render tree的操作，并减少对一些style信息的请求。")]),s._v(" "),a("p",[s._v("具体方法：")]),s._v(" "),a("h5",{attrs:{id:"_1、不要1个1个改变元素的样式属性-最好直接改变classname-但classname是预先定义好的样式-不是动态的-如果你要动态改变一些样式-则使用csstext来改变-见下面代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、不要1个1个改变元素的样式属性-最好直接改变classname-但classname是预先定义好的样式-不是动态的-如果你要动态改变一些样式-则使用csstext来改变-见下面代码"}},[s._v("#")]),s._v(" 1、不要1个1个改变元素的样式属性，最好直接改变className，但className是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用cssText来改变，见下面代码：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("// 不好的写法  \nvar left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \nvar "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \nel.style.left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" left + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \nel.style.top  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("  + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n \n// 比较好的写法   \nel.className "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" className1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n \n// 比较好的写法   \nel.style.cssText "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"; left: "')]),s._v(" + left + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px; top: "')]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h5",{attrs:{id:"_2、让要操作的元素进行-离线处理-处理完后一起更新-这里所谓的-离线处理-即让元素不存在于render-tree中-比如"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、让要操作的元素进行-离线处理-处理完后一起更新-这里所谓的-离线处理-即让元素不存在于render-tree中-比如"}},[s._v("#")]),s._v(' 2、让要操作的元素进行"离线处理"，处理完后一起更新，这里所谓的"离线处理"即让元素不存在于render tree中，比如：')]),s._v(" "),a("p",[s._v("a) 使用documentFragment或div等元素进行缓存操作，这个主要用于添加元素的时候，大家应该都用过，就是先把所有要添加的元素添加到1个div(这个div也是新加的)，最后才把这个div append到body中。")]),s._v(" "),a("p",[s._v("b) 先display:none 隐藏元素，然后对该元素进行所有的操作，最后再显示该元素。因对display:none的元素进行操作不会引起回流、重绘。所以只要操作只会有2次回流。")]),s._v(" "),a("h5",{attrs:{id:"_3、不要经常访问会引起浏览器flush队列的属性-如果你确实要访问-就先读取到变量中进行缓存-以后用的时候直接读取变量就可以了-见下面代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、不要经常访问会引起浏览器flush队列的属性-如果你确实要访问-就先读取到变量中进行缓存-以后用的时候直接读取变量就可以了-见下面代码"}},[s._v("#")]),s._v(" 3、不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了，见下面代码：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("// 别这样写  \nfor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    elel.style.left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" el.offsetLeft + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    elel.style.top  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" el.offsetTop  + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n \n// 这样写好点  \nvar left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" el.offsetLeft,top  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" el.offsetTop,s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" el.style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \nfor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    s.left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" left + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    s.top  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("  + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h5",{attrs:{id:"_4、操作会影响到render-tree中的多少节点以及影响的方式-影响越多-花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果-想想下面2种移动的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、操作会影响到render-tree中的多少节点以及影响的方式-影响越多-花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果-想想下面2种移动的方法"}},[s._v("#")]),s._v(" 4、操作会影响到render tree中的多少节点以及影响的方式，影响越多，花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果，想想下面2种移动的方法：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("\n// block1是position:absolute 定位的元素，它移动会影响到它父元素下的所有子元素。  \n// 因为在它移动过程中，所有子元素需要判断block1的z-index是否在自己的上面，  \n// 如果是在自己的上面,则需要重绘,这里不会引起回流  \n"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v('"#block1"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(".animate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("left:50"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n// block2是相对定位的元素,这个影响的元素与block1一样，但是因为block2非绝对定位  \n// 而且改变的是marginLeft属性，所以这里每次改变不但会影响重绘，  \n// 还会引起父元素及其下元素的回流  \n"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v('"#block2"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(".animate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("marginLeft:50"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"使用最佳布局方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用最佳布局方案"}},[s._v("#")]),s._v(" 使用最佳布局方案")]),s._v(" "),a("p",[s._v("不要使用内联样式和table布局！\n内联样式会在下载HTML时影响布局，并触发额外的reflow。\ntable布局开销很大，因为解析器需要多次传递去计算单元格维度，使用table时应用fixed定位有一定的优化效果，因为列的宽度是基于标题行的内容。\n主页面布局应用flexbox也会有性能影响，因为在HTML下载的时候，flex items的位置和尺寸可能会变化。")]),s._v(" "),a("h5",{attrs:{id:"最小化css规则的数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小化css规则的数量"}},[s._v("#")]),s._v(" 最小化CSS规则的数量")]),s._v(" "),a("p",[s._v("css规则越少，重排越快，要尽量避免复杂的css选择器。\n如果您使用的是Bootstrap这样的框架，那么这一点尤其成问题——很少有站点使用了框架提供的所有样式。像Unused CSS、uCSS、grunt-uncss和gulp-uncss这样的工具可以显著减少样式定义和文件大小。")]),s._v(" "),a("h5",{attrs:{id:"最小化dom层级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小化dom层级"}},[s._v("#")]),s._v(" 最小化DOM层级")]),s._v(" "),a("p",[s._v("稍微复杂一点——减小DOM树大小和每个分支的元素数量。文档越小越浅，回流越快。如果不需要支持古老的浏览器，可以删除不必要的包裹元素")]),s._v(" "),a("h5",{attrs:{id:"从文档流中移除复杂的动效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从文档流中移除复杂的动效"}},[s._v("#")]),s._v(" 从文档流中移除复杂的动效")]),s._v(" "),a("p",[s._v("通过使用"),a("code",[s._v("position: absolute;")]),s._v(" 或者 "),a("code",[s._v("position: fixed;")]),s._v("来使有动效的元素脱离文档流，这可以在不影响文档流中的其它元素的情况下更新尺寸和位置。")]),s._v(" "),a("h5",{attrs:{id:"更新隐藏的元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新隐藏的元素"}},[s._v("#")]),s._v(" 更新隐藏的元素")]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("display: none;")]),s._v("来隐藏的元素在改变时不会触发重绘和重排，可以的话，在元素可见之前进行更改。")]),s._v(" "),a("h4",{attrs:{id:"行内元素和块级元素的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行内元素和块级元素的区别"}},[s._v("#")]),s._v(" 行内元素和块级元素的区别")]),s._v(" "),a("p",[a("strong",[s._v("1）、行内元素")])]),s._v(" "),a("p",[s._v("①：设置宽高无效")]),s._v(" "),a("p",[s._v("②：对margin设置左右方向有效，而上下无效，padding设置都无效")]),s._v(" "),a("p",[s._v("③：不会自动换行")]),s._v(" "),a("p",[a("strong",[s._v("2）、块级元素")])]),s._v(" "),a("p",[s._v("①：可以设置宽高")]),s._v(" "),a("p",[s._v("②：设置margin和padding都有效")]),s._v(" "),a("p",[s._v("③：可以自动换行")]),s._v(" "),a("p",[s._v("④：多个块状，默认排列从上到下")]),s._v(" "),a("h4",{attrs:{id:"js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[s._v("#")]),s._v(" JS")]),s._v(" "),a("p",[s._v("数字递归求和：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" n + sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);