(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{430:function(t,s,n){"use strict";n.r(s);var a=n(45),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"react的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react的生命周期"}},[t._v("#")]),t._v(" React的生命周期")]),t._v(" "),n("ul",[n("li",[t._v("挂载卸载过程\n"),n("ul",[n("li",[t._v("constructor()")]),t._v(" "),n("li",[t._v("componentWillMount()")]),t._v(" "),n("li",[t._v("componentDidMount()")]),t._v(" "),n("li",[t._v("componentWillUnmount ()")])])]),t._v(" "),n("li",[t._v("更新过程\n"),n("ul",[n("li",[t._v("componentWillReceiveProps (nextProps)")]),t._v(" "),n("li",[t._v("shouldComponentUpdate(nextProps,nextState)")]),t._v(" "),n("li",[t._v("componentWillUpdate (nextProps,nextState)")]),t._v(" "),n("li",[t._v("componentDidUpdate(prevProps,prevState)")]),t._v(" "),n("li",[t._v("render()")])])]),t._v(" "),n("li",[t._v("React新增的生命周期(个人补充)\n"),n("ul",[n("li",[t._v("getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),n("li",[t._v("getSnapshotBeforeUpdate(prevProps, prevState)")])])])]),t._v(" "),n("p",[t._v("React的生命周期从广义上分为三个阶段：挂载、渲染、卸载")]),t._v(" "),n("p",[t._v("因此可以把React的生命周期分为两类：挂载卸载过程和更新过程。\nReact的生命周期图:")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://imgtu.com/i/cG5TC8",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://z3.ax1x.com/2021/04/07/cG5TC8.jpg",alt:"cG5TC8.jpg"}}),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"_1-挂载卸载过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-挂载卸载过程"}},[t._v("#")]),t._v(" 1. 挂载卸载过程")]),t._v(" "),n("h4",{attrs:{id:"_1-1-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-constructor"}},[t._v("#")]),t._v(" 1.1.constructor()")]),t._v(" "),n("p",[t._v("constructor()中完成了React数据的初始化，它接受两个参数：props和context，当想在函数内部使用这两个参数时，需使用super()传入这两个参数。\n注意：只要使用了constructor()就必须写super(),否则会导致this指向错误。")]),t._v(" "),n("h4",{attrs:{id:"_1-2-componentwillmount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-componentwillmount"}},[t._v("#")]),t._v(" 1.2.componentWillMount()")]),t._v(" "),n("p",[t._v("componentWillMount()一般用的比较少，它更多的是在服务端渲染时使用。它代表的过程是组件已经经历了constructor()初始化数据后，但是还未渲染DOM时。")]),t._v(" "),n("h4",{attrs:{id:"_1-3-componentdidmount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-componentdidmount"}},[t._v("#")]),t._v(" 1.3.componentDidMount()")]),t._v(" "),n("p",[t._v("组件第一次渲染完成，此时dom节点已经生成，可以在这里调用ajax请求，返回数据setState后组件会重新渲染")]),t._v(" "),n("h4",{attrs:{id:"_1-4-componentwillunmount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-componentwillunmount"}},[t._v("#")]),t._v(" 1.4.componentWillUnmount ()")]),t._v(" "),n("p",[t._v("在此处完成组件的卸载和数据的销毁。")]),t._v(" "),n("p",[t._v("clear你在组建中所有的setTimeout,setInterval\n移除所有组建中的监听 removeEventListener\n有时候我们会碰到这个warning:")]),t._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("Can only update a mounted or mounting component. This usually      means you called setState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" on an unmounted component. This is a   no-op. Please check the code "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the undefined component.\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("原因：因为你在组件中的ajax请求返回setState,而你组件销毁的时候，请求还未完成，因此会报warning")]),t._v(" "),n("p",[t._v("解决方法：")]),t._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("componentDidMount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.isMount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    axios.post"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".then"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.isMount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" this.setState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   // 增加条件ismount为true时\n      aaa:res\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("componentWillUnmount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.isMount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("h3",{attrs:{id:"_2-更新过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-更新过程"}},[t._v("#")]),t._v(" 2. 更新过程")]),t._v(" "),n("h4",{attrs:{id:"_2-1-componentwillreceiveprops-nextprops"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-componentwillreceiveprops-nextprops"}},[t._v("#")]),t._v(" 2.1. componentWillReceiveProps (nextProps)")]),t._v(" "),n("p",[t._v("在接受父组件改变后的props需要重新渲染组件时用到的比较多\n接受一个参数nextProps\n通过对比nextProps和this.props，将nextProps的state为当前组件的state，从而重新渲染组件")]),t._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("  componentWillReceiveProps "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    nextProps.openNotice "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" this.props.openNotice"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("this.setState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        openNotice:nextProps.openNotice\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console.log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this.state.openNotice:nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      //将state更新为nextProps,在setState的第二个参数（回调）可以打         印出新的state\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h4",{attrs:{id:"_2-2-shouldcomponentupdate-nextprops-nextstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-shouldcomponentupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" 2.2.shouldComponentUpdate(nextProps,nextState)")]),t._v(" "),n("p",[t._v("主要用于性能优化(部分更新)\n唯一用于控制组件重新渲染的生命周期，由于在react中，setState以后，state发生变化，组件会进入重新渲染的流程，在这里return false可以阻止组件的更新\n因为react父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断")]),t._v(" "),n("h4",{attrs:{id:"_2-3-componentwillupdate-nextprops-nextstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-componentwillupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" 2.3.componentWillUpdate (nextProps,nextState)")]),t._v(" "),n("p",[t._v("shouldComponentUpdate返回true以后，组件进入重新渲染的流程，进入componentWillUpdate,这里同样可以拿到nextProps和nextState。")]),t._v(" "),n("h4",{attrs:{id:"_2-4-componentdidupdate-prevprops-prevstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-componentdidupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" 2.4.componentDidUpdate(prevProps,prevState)")]),t._v(" "),n("p",[t._v("组件更新完毕后，react只会在第一次初始化成功会进入componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到prevProps和prevState，即更新前的props和state。")]),t._v(" "),n("h4",{attrs:{id:"_2-5-render"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-render"}},[t._v("#")]),t._v(" 2.5.render()")]),t._v(" "),n("p",[t._v("render函数会插入jsx生成的dom结构，react会生成一份虚拟dom树，在每一次组件更新时，在此react会通过其diff算法比较更新前后的新旧DOM树，比较以后，找到最小的有差异的DOM节点，并重新渲染。")]),t._v(" "),n("h4",{attrs:{id:"_3-react新增的生命周期-个人补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-react新增的生命周期-个人补充"}},[t._v("#")]),t._v(" 3. React新增的生命周期(个人补充)")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://imgtu.com/i/cGIMxe",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://z3.ax1x.com/2021/04/07/cGIMxe.png",alt:"cGIMxe.png"}}),n("OutboundLink")],1)]),t._v(" "),n("h4",{attrs:{id:"_3-1-getderivedstatefromprops-nextprops-prevstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-getderivedstatefromprops-nextprops-prevstate"}},[t._v("#")]),t._v(" 3.1. getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),n("p",[t._v("代替componentWillReceiveProps()。\n老版本中的componentWillReceiveProps()方法判断前后两个 props 是否相同，如果不同再将新的 props 更新到相应的 state 上去。这样做一来会破坏 state 数据的单一数据源，导致组件状态变得不可预测，另一方面也会增加组件的重绘次数。\n举个例子:")]),t._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("// before\ncomponentWillReceiveProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps.isLogin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" this.props.isLogin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.setState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n      isLogin: nextProps.isLogin,   \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps.isLogin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.handleClose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n// after\nstatic getDerivedStateFromProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps, prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps.isLogin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevState.isLogin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      isLogin: nextProps.isLogin,\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" null"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ncomponentDidUpdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevProps, prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("prevState.isLogin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" this.props.isLogin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    this.handleClose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br")])]),n("p",[t._v("这两者最大的不同就是:\n在 componentWillReceiveProps 中，我们一般会做以下两件事，一是根据 props 来更新 state，二是触发一些回调，如动画或页面跳转等。")]),t._v(" "),n("p",[t._v("在老版本的 React 中，这两件事我们都需要在 componentWillReceiveProps 中去做。\n而在新版本中，官方将更新 state 与触发回调重新分配到了 getDerivedStateFromProps 与 componentDidUpdate 中，使得组件整体的更新逻辑更为清晰。而且在 getDerivedStateFromProps 中还禁止了组件去访问 this.props，强制让开发者去比较 nextProps 与 prevState 中的值，以确保当开发者用到 getDerivedStateFromProps 这个生命周期函数时，就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。")]),t._v(" "),n("h4",{attrs:{id:"_3-2-getsnapshotbeforeupdate-prevprops-prevstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-getsnapshotbeforeupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" 3.2. getSnapshotBeforeUpdate(prevProps, prevState)")]),t._v(" "),n("p",[t._v("代替componentWillUpdate。\n常见的 componentWillUpdate 的用例是在组件更新前，读取当前某个 DOM 元素的状态，并在 componentDidUpdate 中进行相应的处理。\n这两者的区别在于：")]),t._v(" "),n("p",[t._v("在 React 开启异步渲染模式后，在 render 阶段读取到的 DOM 元素状态并不总是和 commit 阶段相同，这就导致在\ncomponentDidUpdate 中使用 componentWillUpdate 中读取到的 DOM 元素状态是不安全的，因为这时的值很有可能已经失效了。\ngetSnapshotBeforeUpdate 会在最终的 render 之前被调用，也就是说在 getSnapshotBeforeUpdate 中读取到的 DOM 元素状态是可以保证与 componentDidUpdate 中一致的。\n此生命周期返回的任何值都将作为参数传递给componentDidUpdate（）。")])])}),[],!1,null,null,null);s.default=e.exports}}]);