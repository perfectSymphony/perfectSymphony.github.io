<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFF架构设计</title>
    <url>/2021/01/14/BFF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>BFF是（Backends For Frontends）单词的缩写，主要是用于服务前端的后台应用程序，来解决多访问终端业务耦合问题。</p>
<p>最近在公司的微服务架构中遇到了一些多终端访问接口的问题，不同的终端拥有不同的接口服务，有不同的操作数据的能力，针对这种业务场景做出了调研，我们是否可以在不同的访问层进行业务逻辑处理，获取不同的数据内容呢？</p>
<p>早在微服务出现的初期就已经存在类似的业务需求出现，而且衍生出了一套成熟的解决方案，那就是BFF，可以针对不用业务场景来提供对应的服务接口，每一种业务场景之间完全独立。</p>
<h4 id="演进过程"><a href="#演进过程" class="headerlink" title="演进过程"></a>演进过程</h4><p>在传统的应用程序中，我们一般只将接口提供给一种类型的终端使用。</p>
<p><font size="4px" color="#f00">单端调用基础服务</font></p>
<p><a href="https://imgchr.com/i/sY7HS0"><img src="https://s3.ax1x.com/2021/01/12/sY7HS0.png" alt="sY7HS0.png"></a></p>
<p>传统的应用程序内提供的接口是有业务针对性的，这种类型的接口如果独立出来再提供给别的系统再次使用是一件比较麻烦的事情，设计初期的高耦合就决定了这一点。</p>
<p><font size="4px" color="#f00">多端直接调用基础服务</font></p>
<p><a href="https://imgchr.com/i/sYHKpt"><img src="https://s3.ax1x.com/2021/01/12/sYHKpt.png" alt="sYHKpt.png"></a></p>
<p>如果我们的接口同时提供给web、移动端使用，移动端仅用来采集数据以及数据的展示，而web端大多数场景是用来管理数据，因为不同端点的业务有所不同每一个端的接口复用度不会太高。</p>
<p><font size="4px" color="#f00">多端共用一个BFF</font></p>
<p><a href="https://imgchr.com/i/sYHtts"><img src="https://s3.ax1x.com/2021/01/12/sYHtts.png" alt="sYHtts.png"></a></p>
<p>针对多端共用服务接口的场景，我们将基础的数据服务与BFF进行了<font size="7px" color="#f00">分离</font>，数据服务仅提供数据的增删改查，并不过多涉及业务的判断处理，所有业务判断处理都交给BFF来把控，遇到的一些业务逻辑异常也同样由BFF格式化处理后展示给访问端点。</p>
<p>这种设计方式同样存在一定的问题，虽然基础服务与BFF进行了分离，我们只需要在BFF层面进行业务判断处理，但是多个端共用一个BFF，也会导致代码编写复杂度增高、代码可阅读性降低、多端业务耦合。</p>
<p><font size="4px" color="#f00">每个端提供一个BFF</font></p>
<p><a href="https://imgchr.com/i/sYH5nO"><img src="https://s3.ax1x.com/2021/01/12/sYH5nO.png" alt="sYH5nO.png"></a></p>
<p>如果我们为每一个端点都提供一个BFF，每个端点的BFF处理自身的业务逻辑，需要数据时从基础服务内获取，然后在接口返回之前进行组装数据用于实例化返回对象。</p>
<p>这样基础服务如果有新功能添加，BFF几乎不会受到影响，而我们如果后期把App端点进行拆分成Android、IOS时我们只需要将app-bff进行拆分为android-bff、ios-bff，基础服务同样也不会受到影响</p>
<p><a href="https://imgchr.com/i/sYb8v6"><img src="https://s3.ax1x.com/2021/01/12/sYb8v6.png" alt="sYb8v6.png"></a></p>
<p>这样每当新增一个访问端点时，我们需要修改的地方也只有网关的转发以及添加一个BFF即可，基础服务内提供的服务接口我们完全可以复用，因为基础服务提供的接口都是没有业务针对性的！！！</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在微服务架构设计中，BFF起到了一个业务聚合的关键作用，可以 通过openfeign、restTemplate调用基础服务来获取数据，将获取到的数据进行组装返回结果对象，BFF解决了业务场景问题，也同样带来了一些问题，如下所示：</p>
<p>响应时间延迟（服务如果是内网之间访问，延迟时间较低）<br>编写起来较为浪费时间（因为在基础服务上添加的一层转发，所以会多写一部分代码）<br>业务异常处理（统一格式化业务异常的返回内容）<br>分布式事务（微服务的通病）</p>
<p><font size="8px" color="#f00">提问：</font></p>
<p><font size="5px" color="#f00">采用BFF架构与多端公用、单一的API有什么优点了？</font></p>
<p>它能够满足因不同客户端特殊的交互引起的对新接口的要求，所以一开始就会针对相应的设备设计好对应的接口。如果使用单一、通用的API，我们一开始并没有考虑到特殊需求，那么有新的请求需要出现时，可能会出现以下问题：<br>(1)如果添加新的接口，这样容易造成接口的不稳定；<br>(2)如果考虑在原有的接口上进行修改，可能需要会产生一些的耦合，破坏单一职责。</p>
<p>考虑这样一个简单例子，因为移动APP的屏幕限制，在某一个列表页我们只需要展示一些关键的信息，但是由于调用的是服务端提供统一的API，服务端在设计的时候只考虑到了web端，返回所有的字段信息，但这些对于移动端而言都是无用的。在优化性能时处理这样的问题时，服务器端就需要新增接口或者通过引入相关耦合来解决这样的问题。而使用BFF在很大程度能避免这样的问题。<br>使用BFF的另一个优点就是当由于某一客户端需要调用调用多个不同的服务端接口来实现某一功能时，可以直接在对应的BFF层编写相应的API，而不会影响到基层的公共服务，且客户端不用直接向多个后台发起调用，可以优化性能。</p>
<p><font size="5px" color="#f00">贴一张用来总结的大图：</font></p>
<p><a href="https://imgchr.com/i/sYOCUe"><img src="https://s3.ax1x.com/2021/01/12/sYOCUe.png" alt="sYOCUe.png"></a></p>
<p><a href="https://imgchr.com/i/sYqKL8"><img src="https://s3.ax1x.com/2021/01/12/sYqKL8.png" alt="sYqKL8.png"></a></p>
<p>从这个技术体系图中看到，作为应用服务层的API服务就是BFF，他们会从基础业务服务如客户服务、订单服务、产品服务等微服务中获取数据，进行一定的聚合和裁剪返回个某个具体业务线的前端应用，前端应用可能是SPA也可能是H5应用。BFF层的API服务，我们在实践中大部分都使用了ASP.NET Core进行开发，同时也在尝试使用Go进行开发，也让前端有兴趣的同事引入进来用Go进行BFF的开发。但是，在基础服务层面即前面所说的业务中台层，还是由后端同事使用ASP.NET Core开发，确保质量。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中的BFC详解</title>
    <url>/2020/08/02/CSS%E4%B8%AD%E7%9A%84BFC%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="CSS中的BFC详解"><a href="#CSS中的BFC详解" class="headerlink" title="CSS中的BFC详解"></a>CSS中的BFC详解</h2><h3 id="一、何为BFC"><a href="#一、何为BFC" class="headerlink" title="一、何为BFC"></a>一、何为BFC</h3><p>BFC（Block Formatting Context）格式化上下文，是web页面中盒模型布局的CSS渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。</p>
<h3 id="二、形成BFC的条件"><a href="#二、形成BFC的条件" class="headerlink" title="二、形成BFC的条件"></a>二、形成BFC的条件</h3><p>1、浮动元素，float除none以外的值。<br /><br>2、定位元素，position（absolute、fixed）。<br /><br>3、display为以下其中之一的值inline-block、table-cell、table-table-caption。<br /><br>4、overflow除了 visible 以外的值（hidden、auto、scroll）。<br /></p>
<h3 id="三、BFC的特性"><a href="#三、BFC的特性" class="headerlink" title="三、BFC的特性"></a>三、BFC的特性</h3><p>1、内部的Box会在垂直方向上一个接一个的放置。<br /><br>2、垂直方向上的距离由margin决定。<br /><br>3、bfc的区域不会与float的元素区域重叠。<br /><br>4、计算bfc的高度时，浮动元素也参与计算。<br /><br>5、bfc就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。<br /></p>
<p>下面使用案例来帮助认识理解：</p>
<h3 id="四、实践是检验真理的唯一标准"><a href="#四、实践是检验真理的唯一标准" class="headerlink" title="四、实践是检验真理的唯一标准"></a>四、实践是检验真理的唯一标准</h3><h4 id="（1）BFC中的盒子对齐"><a href="#（1）BFC中的盒子对齐" class="headerlink" title="（1）BFC中的盒子对齐"></a>（1）BFC中的盒子对齐</h4><p>特性的第一条是：内部的Box（块级元素）会在垂直方向上一个接一个的放置。（这条特性不必纠结，即便不在BFC里块级盒子也会垂直排列）</p>
<h4 id="（2）外边距折叠"><a href="#（2）外边距折叠" class="headerlink" title="（2）外边距折叠"></a>（2）外边距折叠</h4><p>特性的第二条：垂直方向上的距离由margin决定<br>在常规文档流中，两个兄弟盒子之间的垂直距离是由他们的外边距所决定的，但不是他们的两个外边距之和，而是以较大的为准。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYrzOs.th.png"></p>
<p>html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>css: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1 &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2 &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我门可以看到，第一个子盒子有上边距（不会发生margin穿透的问题）；两个子盒子的垂直距离为20px而不是30px，因为垂直外边距会折叠，间距以较大的为准。</p>
<p> 那么有没有方法让垂直外边距不折叠呢？答案是：有。特性的第5条就说了：bfc就是页面上的一个独立容器，容器里面的子元素不会影响外面元素，同样外面的元素不会影响到BFC内的元素。所以就让box1或box2再处于另一个BFC中就行了。</p>
<p> <img src="https://s1.ax1x.com/2020/08/02/aYrxyj.th.png"></p>
<p> html:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>css:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wrapper &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1 &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2 &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="（3）不被浮动元素覆盖"><a href="#（3）不被浮动元素覆盖" class="headerlink" title="（3）不被浮动元素覆盖"></a>（3）不被浮动元素覆盖</h4><p>以常见的两栏布局为例。</p>
<p>左边固定宽度，右边不设宽，因此右边的宽度自适应，随浏览器窗口大小的变化而变化。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYrvlQ.md.png"></p>
<p>html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;column&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;column&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>css: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.column:nth-of-type(1) &#123;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.column:nth-of-type(2) &#123;</span><br><span class="line">    overflow: hidden;/*创建bfc */</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三栏布局:</p>
<p>左右两边固定宽度，中间不设宽，因此中间的宽度自适应，随浏览器的大小变化而变化。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYspmn.th.png" alt="1.4"></p>
<p>html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;contain&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;column&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;column&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;column&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>css: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.column:nth-of-type(1),</span><br><span class="line">.column:nth-of-type(2) &#123;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.column:nth-of-type(2) &#123;</span><br><span class="line">    <span class="built_in">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.column:nth-of-type(3) &#123;</span><br><span class="line">    overflow: hidden;  /*创建bfc*/</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以用来防止字体环绕：</p>
<p>众所周知，浮动的盒子会遮盖下面的盒子，但是下面盒子里的文字是不会被遮盖的，文字反而还会环绕浮动的盒子。这也是一个比较有趣的特性。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYrjSg.png" alt="aYrjSg.png"></p>
<p>html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好</span><br><span class="line">   你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好</span><br><span class="line">   你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>css:</p>
<p>(1) 环绕</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.left &#123;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    /* overflow: hidden; */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）利用bfc防止环绕</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.left &#123;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）BFC包含浮动的块</p>
<p>利用overflow:hidden清除浮动嘛，因为浮动的盒子无法撑出处于标准文档流的父盒子的height。这个就不过多解释了。</p>
<p>如果你有任何想要补充的欢迎<a class="link"   href="https://github.com/perfectSymphony/FrontEnd-interview/issues" >issues<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS命名规范——BEM思想</title>
    <url>/2020/12/29/CSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E2%80%94%E2%80%94BEM%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p>人们问我最多的问题之一是在CSS类名中“–”和“__”是什么意思？它们的出现是源于<a class="link"   href="https://en.bem.info/" >BEM<i class="fas fa-external-link-alt"></i></a>和Nicolas Gallagher…</p>
<p>BEM的意思就是块（block）、元素（element）、修饰符（modifier）,是由Yandex团队提出的一种前端命名方法论。这种巧妙的命名方法让你的CSS类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目。</p>
<p>重要的是要注意，我使用的基于BEM的命名方式是经过<a class="link"   href="http://nicolasgallagher.com/about-html-semantics-front-end-architecture/" >Nicolas Gallagher修改过的<i class="fas fa-external-link-alt"></i></a>。这篇文章中介绍的这种命名技术并不是原始的BEM，但却是一个我更喜欢的改进版。无论实际使用了什么样的符号，它们其实都是基于同样的BEM原则。</p>
<p>命名约定的模式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.block&#123;&#125;</span><br><span class="line">.block__element&#123;&#125;</span><br><span class="line">.block--modifier&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>block 代表了更高级别的抽象或组件。</li>
<li>block__element 代表.block的后代，用于形成一个完整的.block的整体。</li>
<li>block–modifier代表.block的不同状态或不同版本。</li>
</ul>
<p>之所以使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定，如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.site-search&#123;&#125; /* 块 */</span><br><span class="line">.site-search__field&#123;&#125; /* 元素 */</span><br><span class="line">.site-search--full&#123;&#125; /* 修饰符 */</span><br></pre></td></tr></table></figure>
<p>BEM的关键是光凭名字就可以告诉其他开发者某个标记是用来干什么的。通过浏览HTML代码中的class属性，你就能够明白模块之间是如何关联的：有一些仅仅是组件，有一些则是这些组件的子孙或者是元素,还有一些是组件的其他形态或者是修饰符。我们用一个类比/模型来思考一下下面的这些元素是怎么关联的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.person&#123;&#125;</span><br><span class="line">.person__hand&#123;&#125;</span><br><span class="line">.person--female&#123;&#125;</span><br><span class="line">.person--female__hand&#123;&#125;</span><br><span class="line">.person__hand--left&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>顶级块是‘person’，它拥有一些元素，如‘hand’。一个人也会有其他形态，比如女性，这种形态进而也会拥有它自己的元素。下面我们把他们写成‘常规’CSS:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.person&#123;&#125;</span><br><span class="line">.hand&#123;&#125;</span><br><span class="line">.female&#123;&#125;</span><br><span class="line">.female-hand&#123;&#125;</span><br><span class="line">.left-hand&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这些‘常规’CSS都是有意义的，但是它们之间却有些脱节。就拿.female来说，是指女性人类还是某种雌性的动物？还有.hand，是在说一只钟表的指针（译注：英文中hand有指针的意思）？还是一只正在玩纸牌的手？使用BEM我们可以获得更多的描述和更加清晰的结构，单单通过我们代码中的命名就能知道元素之间的关联。BEM真是强大。</p>
<p>再来看一个之前用‘常规’方式命名的.site-search的例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form class=<span class="string">&quot;site-search  full&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;field&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;Submit&quot;</span> value =<span class="string">&quot;Search&quot;</span> class=<span class="string">&quot;button&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>这些CSS类名真是太不精确了，并不能告诉我们足够的信息。尽管我们可以用它们来完成工作，但它们确实非常含糊不清。用BEM记号法就会是下面这个样子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form class=<span class="string">&quot;site-search  site-search--full&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;site-search__field&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;Submit&quot;</span> value =<span class="string">&quot;Search&quot;</span> class=<span class="string">&quot;site-search__button&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;	</span><br></pre></td></tr></table></figure>
<p>我们能清晰地看到有个叫.site-search的块，他内部是一个叫.site-search__field的元素。并且.site-search还有另外一种形态叫.site-search–full。</p>
<p>我们再来举个例子……</p>
<p>如果你熟悉OOCSS（面向对象CSS），那么你对<a class="link"   href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/" >media对象<i class="fas fa-external-link-alt"></i></a>一定也不陌生。用BEM的方式，media对象就会是下面这个样子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.media&#123;&#125;</span><br><span class="line">.media__img&#123;&#125;</span><br><span class="line">.media__img--rev&#123;&#125;</span><br><span class="line">.media__body&#123;&#125;	</span><br></pre></td></tr></table></figure>
<p>从这种CSS的写法上我们就已经知道.media__img 和.media__body一定是位于.media内部的，而且.media__img–rev是.media__img的另一种形态。仅仅通过CSS选择器的名字我们就能获取到以上全部信息。</p>
<p>BEM的另外一个好处是针对下面这种情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;media&quot;</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;logo.png&quot;</span> alt=<span class="string">&quot;Foo Corp logo&quot;</span> class=<span class="string">&quot;img-rev&quot;</span>&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">    &lt;h3 class=<span class="string">&quot;alpha&quot;</span>&gt;Welcome to Foo Corp&lt;/h3&gt;</span><br><span class="line">    &lt;p class=<span class="string">&quot;lede&quot;</span>&gt;Foo Corp is the best, seriously!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>光从上面的代码来看，我们根本不明白.media和.alpha两个class彼此之间是如何相互关联的？同样我们也无从知晓.body和.lede之间，或者.img-rev 和.media之间各是什么关系？从这段HTML（除非你对那个media对象非常了解）中我们也不知道这个组件是由什么组成的和它还有什么其他的形态。如果我们用BEM方式重写这段代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;media&quot;</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;logo.png&quot;</span> alt=<span class="string">&quot;Foo Corp logo&quot;</span> class=<span class="string">&quot;media__img--rev&quot;</span>&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;media__body&quot;</span>&gt;</span><br><span class="line">    &lt;h3 class=<span class="string">&quot;alpha&quot;</span>&gt;Welcome to Foo Corp&lt;/h3&gt;</span><br><span class="line">    &lt;p class=<span class="string">&quot;lede&quot;</span>&gt;Foo Corp is the best, seriously!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>我们立马就能明白.media是一个块，.media__img–rev是一个加了修饰符的.media__img的变体，它是属于.media的元素。而.media__body是一个尚未被改变过的也是属于.media的元素。所有以上这些信息都通过它们的class名称就能明白，由此看来BEM确实非常实用。</p>
<h3 id="丑极了！"><a href="#丑极了！" class="headerlink" title="丑极了！"></a>丑极了！</h3><p>通常人们会认为BEM这种写法难看。我敢说，如果你仅仅是因为这种代码看上去不怎么好看而羞于使用它，那么你将错失最重要的东西。除非使用BEM让代码增加了不必要的维护困难，或者这么做确实让代码更难读了，那么你在使用它之前就要三思而行了。但是，如果只是“看起来有点怪”而事实上是一种有效的手段，那么我们在开发之前当然应该充分考虑它。</p>
<p>是，BEM看上去确实怪怪的，但是它的好处远远超过它外观上的那点瑕疵。</p>
<p>BEM可能看上去有点滑稽，而且有可能导致我们输入更长的文本（大部分编辑器都有自动补全功能，而且gzip压缩将会让我们消除对文件体积的担忧），但是它依旧强大。</p>
<h3 id="用还是不用BEM"><a href="#用还是不用BEM" class="headerlink" title="用还是不用BEM?"></a>用还是不用BEM?</h3><p>我在我的所有项目中都使用了BEM记号法，因为它的有效性已经被它自己一次又一次地证明。我也极力地建议别人使用BEM，因为它让所有东西之间的联系变得更加紧密，让团队甚至是你个人都能够更加容易地维护代码。</p>
<p>然而，当你真正使用BEM的时候，重要的是，请记住你没必要真的在每个地方都用上它。比如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.caps&#123; text-transform:uppercase; &#125;	</span><br></pre></td></tr></table></figure>
<p>这条CSS不属于任何一个BEM范畴，它仅仅只是一条单独的样式。</p>
<p>另一个没有使用BEM的例子是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.site-logo&#123;&#125;	</span><br></pre></td></tr></table></figure>
<p>这是一个logo，我们可以把它写成BEM格式，像下面这样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.header&#123;&#125;</span><br><span class="line">.header__logo&#123;&#125;	</span><br></pre></td></tr></table></figure>
<p>但我们没必要这么做。使用BEM的诀窍是，你要知道什么时候哪些东西是应该写成BEM格式的。因为某些东西确实是位于一个块的内部，但这并不意味它就是BEM中所说的元素。这个例子中，网站logo完全是恰巧在.header的内部，它也有可能在侧边栏或是页脚里面。一个元素的范围可能开始于任何上下文，因此你要确定只在你需要用到BEM的地方你才使用它。再看一个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">  &lt;h1 class=<span class="string">&quot;content__headline&quot;</span>&gt;Lorem ipsum dolor...&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>在这个例子里，我们也许仅仅只需要另一个class，可以叫它.headline；它的样式取决于它是如何被层叠的，因为它在.content的内部；或者它只是恰巧在.content的内部。如果它是后者（即恰巧在.content的内部，而不总是在）我们就不需要使用BEM。</p>
<p>然而，一切都有可能潜在地用到BEM。我们再来看一下.site-logo的例子，想象一下我们想要给网站增加一点圣诞节的气氛，所以我们想有一个圣诞版的logo。于是我们有了下面的代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.site-logo&#123;&#125;</span><br><span class="line">.site-logo--xmas&#123;&#125;	</span><br></pre></td></tr></table></figure>
<p>我们可以通过使用–修饰符来快速地为我们的代码构建另一个版本。</p>
<p>BEM最难的部分之一是明确作用域是从哪开始和到哪结束的，以及什么时候使用（不使用）它。随着接触的多了，有了经验积累，你慢慢就会知道怎么用，这些问题也不再是问题。</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>所以，BEM（或BEM的变体）是一个非常有用，强大，简单的命名约定，以至于让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确而且更加严密。</p>
<p>尽管BEM看上去多少有点奇怪，但是无论什么项目，它对前端开发者都是一个巨有价值的工具。</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a class="link"   href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" >http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/<i class="fas fa-external-link-alt"></i></a></p>
<p>中文译文：<a class="link"   href="http://www.w3cplus.com/css/mindbemding-getting-your-head-round-bem-syntax.html" >http://www.w3cplus.com/css/mindbemding-getting-your-head-round-bem-syntax.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS相关面试题</title>
    <url>/2020/09/15/CSS%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、使一个盒子水平居中"><a href="#一、使一个盒子水平居中" class="headerlink" title="一、使一个盒子水平居中"></a>一、使一个盒子水平居中</h3><p>目前有4种方式:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 宽度/高度已知 */</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background: <span class="comment">#f00;</span></span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: <span class="comment">#ff0;</span></span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">    margin-top: -50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 第二种方式 */</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background: <span class="comment">#f00;</span></span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inner-box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: <span class="comment">#ff0;</span></span><br><span class="line">    position:absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* flex布局 */</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: <span class="comment">#f00;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    /* 实现水平居中 */</span><br><span class="line">    justify-content: center; </span><br><span class="line">    /* 实现垂直居中 */</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inner-box &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: <span class="comment">#ff0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 平移 定位+transform (宽度、高度未知时，上下左右居中) */</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: <span class="comment">#f00;</span></span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">    /* width: 200px;</span><br><span class="line">    height: 100px; */</span><br><span class="line">    background:<span class="comment">#f90;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;dov class=<span class="string">&quot;inner-box&quot;</span>&gt;</span><br><span class="line">          content</span><br><span class="line">        &lt;/dov&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>二、盒模型<br>1、盒模型分为标准盒模型和怪异盒模型(IE盒模型)</p>
<p>标准盒模型：盒模型的宽高只是内容的宽高；<br>怪异盒模型：盒模型的宽高是内容(content) + 填充(padding) +边框(border)的总宽度。</p>
<p>现代浏览器和IE9+默认值是content-box。</p>
<p>2、CSS如何设置两种模型</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准盒模型</span></span><br><span class="line">box-sizing: content-box;</span><br><span class="line"></span><br><span class="line"><span class="comment"># IE 模型</span></span><br><span class="line">border-sizing: border-box;</span><br></pre></td></tr></table></figure>
<p>最终盒子实际所占位置大小计算公式是这样的：</p>
<p>盒子所占位置的实际宽度=宽度+左填充+右填充+左边框+右边框+左边界+右边界</p>
<p>盒子所占位置的实际高度=高度+顶部填充+底部填充+上边框+下边框+上边界+下边界</p>
<p>要注意区分的是盒子所占位置的实际宽度高度值和盒子实际大小的宽度和高度值，盒子实际大小的宽度和高度是所占位置实际宽度高度的值减去边界（margin）所占的大小，即</p>
<p>盒子的实际宽度=宽度+左填充+右填充+左边框+右边框</p>
<p>盒子的实际高度=高度+顶部填充+底部填充+上边框+下边框</p>
<p>盒子模型的3D示意图，如下图所示，padding与margin是看不见的透明元素</p>
<p>从第一层到第五层依次为：border、content+padding、background-image、background-color、margin。</p>
<p><a href="https://imgchr.com/i/D14WjK"><img src="https://s3.ax1x.com/2020/11/21/D14WjK.png" alt="D14WjK.png"></a></p>
<h4 id="例如一个盒子的-margin-为-20px，border-为-1px，padding-为-10px-content-的宽为-200px、高为50px"><a href="#例如一个盒子的-margin-为-20px，border-为-1px，padding-为-10px-content-的宽为-200px、高为50px" class="headerlink" title="例如一个盒子的 margin 为 20px，border 为 1px，padding 为 10px,content 的宽为 200px、高为50px"></a>例如一个盒子的 margin 为 20px，border 为 1px，padding 为 10px,content 的宽为 200px、高为50px</h4><p>假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">宽 20*2+1*2+10*2+200=262px、高20*2+1*2*10*2+50=112px</span><br><span class="line"></span><br><span class="line">盒子的实际大小为：宽1*2+10*2+200=222px、高1*2+10*2+50=72px</span><br></pre></td></tr></table></figure>
<p>假如用ie 盒子模型，那么这个盒子需要占据的位置为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">宽 20*2+200=240px、高20*2+50=70px</span><br><span class="line"></span><br><span class="line">盒子的实际大小为：宽 200px、高 50px</span><br></pre></td></tr></table></figure>

<h4 id="浏览器兼容问题"><a href="#浏览器兼容问题" class="headerlink" title="浏览器兼容问题"></a>浏览器兼容问题</h4><p>由于IE浏览器使用自己的非标准模型。IE浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。解决IE8及更早版本不兼容问题可以在HTML页面声明 即可。就是要在网页的顶部加上DOCTYPE声明。</p>
<p>二、实现三栏布局(两侧定宽，中间自适应)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    /* flex方式实现 */</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        <span class="comment"># justify-content: center;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: <span class="comment">#f00;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        background: <span class="comment">#f90;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: <span class="comment">#ff0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;right&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    /* 浮动方式，此方式 content 必须放在最下边 */</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: <span class="comment">#f00;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        <span class="built_in">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        background: <span class="comment">#f90;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        <span class="built_in">float</span>: right;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background: <span class="comment">#ff0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;right&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    /* 绝对定位的方式实现 */</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: <span class="comment">#f00;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        background: <span class="comment">#f90;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 200px;</span><br><span class="line">        right: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0;</span><br><span class="line">        background: <span class="comment">#ff0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    /*  */</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;right&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    /* grid网格布局 */</span><br><span class="line">    .box &#123;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-columns: 200px auto 200px;</span><br><span class="line">        grid-template-rows: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">        background: <span class="comment">#f00;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        background: <span class="comment">#f90;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line">        background: <span class="comment">#ff0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;right&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="只要一行代码实现CSS五种经典布局"><a href="#只要一行代码实现CSS五种经典布局" class="headerlink" title="只要一行代码实现CSS五种经典布局"></a>只要一行代码实现CSS五种经典布局</h3><blockquote>
<p>这几个布局都是自适应的，自动适配桌面设备和移动设备。代码实现很简单，核心代码只有一行，有很大的学习价值，内容也很实用。<br>我会用到 CSS 的 <a class="link"   href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" >Flex 语法<i class="fas fa-external-link-alt"></i></a>和 <a class="link"   href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" >Grid 语法<i class="fas fa-external-link-alt"></i></a>，每一个布局都带有 CodePen 示例。</p>
</blockquote>
<h4 id="一、空间居中布局"><a href="#一、空间居中布局" class="headerlink" title="一、空间居中布局"></a>一、空间居中布局</h4><p>空间居中布局指的是，不管容器的大小，项目总是占据中心点。</p>
<p>CSS代码如下(<a class="link"   href="https://codepen.io/una/pen/YzyYbBx" >CodePen 示例<i class="fas fa-external-link-alt"></i></a>)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123; display: grid; place-items: center; &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码需要写在容器上，指定为 Grid 布局。核心代码是place-items属性那一行，它是一个简写形式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br></pre></td></tr></table></figure>
<p><code>align-items</code>属性控制垂直位置，<code>justify-items</code>属性控制水平位置。这两个属性的值一致时，就可以合并写成一个值。所以，<code>place-items: center;</code>等同于<code>place-items: center center;</code>。</p>
<p>同理，左上角布局可以写成下面这样。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">place-items: start;</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWuIU.jpg"></p>
<p>右下角布局:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">place-items: end;</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWmZV.jpg"></p>
<h4 id="二、并列式布局"><a href="#二、并列式布局" class="headerlink" title="二、并列式布局"></a>二、并列式布局</h4><p>并列式布局就是多个项目并列</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWMiF.jpg"></p>
<p>如果宽度不够，放不下的项目就自动折行。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWnaT.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWkxs.jpg"></p>
<p>它的实现也很简单。首先，容器设置成 Flex 布局，内容居中（justify-content）可换行（flex-wrap）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123; display: flex; flex-wrap: wrap; justify-content: center; &#125;</span><br></pre></td></tr></table></figure>
<p>然后，项目上面只用一行flex属性就够了（<a class="link"   href="https://codepen.io/una/pen/WNQdBza" >CodePen 示例<i class="fas fa-external-link-alt"></i></a>）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.item&#123; flex: 0 1 150px; margin: 5px; &#125;</span><br></pre></td></tr></table></figure>
<p><code>flex</code>属性是<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>这三个属性的简写形式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flex: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;</span><br></pre></td></tr></table></figure>
<p><code>flex: 0 1 150px;</code>的意思就是，项目的初始宽度是150px，且不可以扩大，但是当容器宽度不足150px时，项目可以缩小。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWMiF.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWtZ6.jpg"></p>
<h4 id="三、两栏式布局"><a href="#三、两栏式布局" class="headerlink" title="三、两栏式布局"></a>三、两栏式布局</h4><p>两栏式布局就是一个边栏，一个主栏。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWNdK.jpg"></p>
<p>下面的实现是，边栏始终存在，主栏根据设备宽度，变宽或者变窄。如果希望主栏自动换到下一行，可以参考上面的”并列式布局”。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWQG4.jpg"></p>
<p>使用 Grid，实现很容易（<a class="link"   href="https://codepen.io/una/pen/gOaNeWL" >CodePen 示例<i class="fas fa-external-link-alt"></i></a>）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123; display: grid; grid-template-columns: minmax(150px, 25%) 1fr; &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>grid-template-columns</code>指定页面分成两列。第一列的宽度是<code>minmax(150px, 25%)</code>，即最小宽度为<code>150px</code>，最大宽度为总宽度的25%；第二列为<code>1fr</code>，即所有剩余宽度。</p>
<p>四、三明治布局</p>
<p>三明治布局指的是，页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWGs1.jpg"></p>
<p>这个布局会根据设备宽度，自动适应，并且不管内容区有多少内容，页脚始终在容器底部（粘性页脚）。也就是说，这个布局总是会占满整个页面高度。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWJqx.jpg"></p>
<p>CSS 代码如下（<a class="link"   href="https://codepen.io/una/pen/bGVXPWB" >CodePen 示例<i class="fas fa-external-link-alt"></i></a>）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123; display: grid; grid-template-rows: auto 1fr auto; &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码写在容器上面，指定采用 Grid 布局。核心代码是grid-template-rows那一行，指定垂直高度怎么划分，这里是从上到下分成三部分。第一部分（页眉）和第三部分（页脚）的高度都为auto，即本来的内容高度；第二部分（内容区）的高度为1fr，即剩余的所有高度，这可以保证页脚始终在容器的底部。</p>
<h4 id="五、圣杯布局"><a href="#五、圣杯布局" class="headerlink" title="五、圣杯布局"></a>五、圣杯布局</h4><p>圣杯布局是最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>
<p>这里的实现是，不管页面宽度，内容区始终分成三栏。如果宽度太窄，主栏和右边栏会看不到。如果想将这三栏改成小屏幕自动堆叠，可以参考并列式布局。</p>
<p><img src="https://s1.ax1x.com/2020/09/16/wgWlRJ.jpg"></p>
<p>CSS 代码如下（<a class="link"   href="https://codepen.io/una/pen/mdVbdBy" >CodePen 示例<i class="fas fa-external-link-alt"></i></a>）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.container &#123; display: grid; grid-template: auto 1fr auto / auto 1fr auto; &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码要写在容器上面，指定采用 Grid 布局。核心代码是<code>grid-template</code>属性那一行，它是两个属性<code>grid-template-rows</code>（垂直方向）和<code>grid-template-columns</code>（水平方向）的简写形式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grid-template: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</span><br></pre></td></tr></table></figure>

<p><code>grid-template-rows</code>和<code>grid-template-columns</code>都是<code>auto 1fr auto</code>，就表示页面在垂直方向和水平方向上，都分成三个部分。第一部分（页眉和左边栏）和第三部分（页脚和右边栏）都是本来的内容高度（或宽度），第二部分（内容区和主栏）占满剩余的高度（或宽度）。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6中的Set和Map</title>
    <url>/2020/09/03/ES6%E4%B8%AD%E7%9A%84Set%E5%92%8CMap/</url>
    <content><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>map</code>对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。</p>
<h3 id="Set和Map区别："><a href="#Set和Map区别：" class="headerlink" title="Set和Map区别："></a>Set和Map区别：</h3><p>set是一种关联式容器，其特性如下：</p>
<ul>
<li>set以RBTree作为底层容器</li>
<li>所得元素的只有key没有value，value就是key</li>
<li>不允许出现键值重复</li>
<li>所有的元素都会被自动排序</li>
<li>不能通过迭代器来改变set的值，因为set的值就是键</li>
</ul>
<p>map和set一样是关联式容器，它们的底层容器都是红黑树，区别就在于map的值不作为键，键和值是分开的。它的特性如下：</p>
<ul>
<li>map以RBTree作为底层容器</li>
<li>所有元素都是键+值存在</li>
<li>不允许键重复</li>
<li>所有元素是通过键进行自动排序的</li>
<li>map的键是不能修改的，但是其键对应的值是可以修改的</li>
</ul>
<h4 id="Map和Object的区别"><a href="#Map和Object的区别" class="headerlink" title="Map和Object的区别"></a>Map和Object的区别</h4><ul>
<li>一个<code>Object</code>的键只能是字符串或者<code>Symbols</code>，但一个<code>Map</code>的键可以是任意值。</li>
<li><code>Map</code>中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</li>
<li><code>Map</code>的键值对个数可以从<code>size</code>属性获取，而 <code>Object</code>的键值对个数只能手动计算。</li>
<li><code>Object</code> 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li>
</ul>
<h4 id="Map对象的属性"><a href="#Map对象的属性" class="headerlink" title="Map对象的属性"></a>Map对象的属性</h4><ul>
<li>size：返回Map对象中所包含的键值对个数</li>
</ul>
<h4 id="Map对象的方法"><a href="#Map对象的方法" class="headerlink" title="Map对象的方法"></a>Map对象的方法</h4><ul>
<li>set(key, val): 向Map中添加新元素</li>
<li>get(key): 通过键值查找特定的数值并返回</li>
<li>has(key): 判断Map对象中是否有Key所对应的值，有返回true,否则返回false</li>
<li>delete(key): 通过键值从Map中移除对应的数据</li>
<li>clear(): 将这个Map中的所有元素删除</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="number">111</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="number">222</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(m1) <span class="comment">// &#123;&quot;a&quot; =&gt; 111, &quot;b&quot; =&gt; 222&#125;</span></span><br><span class="line">m1.get(<span class="string">&#x27;a&#x27;</span>)  <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>(m2)</span><br><span class="line">m3.get(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line">m3.has(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">m3.set(<span class="string">&#x27;d&#x27;</span>, <span class="number">555</span>)</span><br><span class="line">m3.get(<span class="string">&#x27;d&#x27;</span>) <span class="comment">// 555</span></span><br></pre></td></tr></table></figure>
<h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回键值对的遍历器</li>
<li>forEach()：使用回调函数遍历每个成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;b&#x27;</span>,  <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="comment">// &quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;a&quot;, 1]</span></span><br><span class="line"><span class="comment">// [&quot;b&quot;, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot; 1</span></span><br><span class="line"><span class="comment">// &quot;b&quot; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of...遍历map等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot; 1</span></span><br><span class="line"><span class="comment">// &quot;b&quot; 2</span></span><br></pre></td></tr></table></figure>
<h4 id="map与其他数据结构的互相转换"><a href="#map与其他数据结构的互相转换" class="headerlink" title="map与其他数据结构的互相转换"></a>map与其他数据结构的互相转换</h4><ul>
<li>map转换为数组（使用扩展运算符）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [[&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;, <span class="number">111</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="number">222</span>]]</span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br><span class="line">[...myMap] <span class="comment">// map转数组。</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>Map</code>与对象的互换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([<span class="string">&#x27;a&#x27;</span>, <span class="number">111</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="number">222</span>])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  obj[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;a:111, b: 222&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>JSON</code>字符串要转换成<code>Map</code>可以先利用<code>JSON.parse()</code>转换成数组或者对象，然后再转换即可</li>
</ul>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><code>Set</code>对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p><code>Set</code>本身是一个构造函数，用来生成<code>Set</code>数据结构。<code>Set</code>函数可以接受一个数组（或者具有<code>iterable</code>接口的其他数据结构）作为参数，用来初始化。</p>
<h3 id="Set中的特殊值"><a href="#Set中的特殊值" class="headerlink" title="Set中的特殊值"></a>Set中的特殊值</h3><p><code>Set</code>对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>
<ul>
<li>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复</li>
<li>undefined 与 undefined 是恒等的，所以不重复</li>
<li>NaN 与 NaN 是不恒等的，但是在 Set 中认为NaN与NaN相等，所有只能存在一个，不重复</li>
</ul>
<h3 id="Set实例对象的属性"><a href="#Set实例对象的属性" class="headerlink" title="Set实例对象的属性"></a>Set实例对象的属性</h3><ul>
<li>size：返回Set实例的成员总数。</li>
</ul>
<h3 id="Set实例对象的方法"><a href="#Set实例对象的方法" class="headerlink" title="Set实例对象的方法"></a>Set实例对象的方法</h3><ul>
<li><code>add(value)</code>：添加某个值，返回 Set 结构本身(可以链式调用)。</li>
<li><code>delete(value)</code>：删除某个值，删除成功返回<code>true</code>，否则返回<code>false</code>。</li>
<li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li>
<li><code>clear()</code>：清除所有成员，没有返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">console</span>.log(mySet)  <span class="comment">// &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2&#125;</span></span><br><span class="line">myset.add(<span class="string">&#x27;c&#x27;</span>).add(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mySet) <span class="comment">// &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2, &#x27;c&#x27;, &#123;a: 1&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(mySet.size) <span class="comment">// 6</span></span><br><span class="line">mySet.has(<span class="number">2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h3><ul>
<li><code>keys()</code>：返回键名的遍历器。</li>
<li><code>values()</code>：返回键值的遍历器。</li>
<li><code>entries()</code>：返回键值对的遍历器。</li>
<li><code>forEach()</code>：使用回调函数遍历每个成员。</li>
</ul>
<p>由于<code>Set</code>结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;b&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;c&quot;, &quot;c&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接遍历set实例，等同于遍历set实例的values方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"></span><br><span class="line"><span class="comment">// a: a</span></span><br><span class="line"><span class="comment">// b: b</span></span><br><span class="line"><span class="comment">// c: c</span></span><br></pre></td></tr></table></figure>
<h3 id="Set-对象作用"><a href="#Set-对象作用" class="headerlink" title="Set 对象作用"></a>Set 对象作用</h3><ul>
<li>数组去重(利用扩展运算符)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line">[...mySet] <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>合并两个set对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]) <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>交集</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)))  <span class="comment">// &#123;2, 3&#125; 利用数组的filter方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>差集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; new Set([1, 2, 3])</span><br><span class="line">let b &#x3D; new Set([4, 3, 2])</span><br><span class="line">let difference &#x3D; new Set([...a].filter(x &#x3D;&gt; !b.has(x))) &#x2F;&#x2F;  &#123;1&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码汇总</title>
    <url>/2020/08/02/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>HTTP状态码总的分为五类：</p>
<p>1开头：信息状态码</p>
<p>2开头：成功状态码</p>
<p>3开头：重定向状态码</p>
<p>4开头：客户端错误状态码</p>
<p>5开头：服务端错误状态码</p>
<h3 id="1XX：信息状态码"><a href="#1XX：信息状态码" class="headerlink" title="1XX：信息状态码"></a>1XX：信息状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>继续</td>
<td>初始的请求已经接受，请客户端继续发送剩余部分</td>
</tr>
<tr>
<td>101</td>
<td>切换协议</td>
<td>请求这要求服务器切换协议，服务器已确定切换</td>
</tr>
</tbody></table>
<h3 id="2XX：成功状态码"><a href="#2XX：成功状态码" class="headerlink" title="2XX：成功状态码"></a>2XX：成功状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>成功</td>
<td>服务器已成功处理了请求</td>
</tr>
<tr>
<td>201</td>
<td>已创建</td>
<td>请求成功并且服务器创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>已接受</td>
<td>服务器已接受请求，但尚未处理</td>
</tr>
<tr>
<td>203</td>
<td>非授权信息</td>
<td>服务器已成功处理请求，但返回的信息可能来自另一个来源</td>
</tr>
<tr>
<td>204</td>
<td>无内容</td>
<td>服务器成功处理了请求，但没有返回任何内容</td>
</tr>
<tr>
<td>205</td>
<td>重置内容</td>
<td>服务器处理成功，用户终端应重置文档视图</td>
</tr>
<tr>
<td>206</td>
<td>部分内容</td>
<td>服务器成功处理了部分GET请求</td>
</tr>
</tbody></table>
<h3 id="3XX：重定向状态码"><a href="#3XX：重定向状态码" class="headerlink" title="3XX：重定向状态码"></a>3XX：重定向状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>300</td>
<td>多种选择</td>
<td>针对请求，服务器可执行多种操作</td>
</tr>
<tr>
<td>301</td>
<td>永久移动</td>
<td>请求的页面已永久跳转到新的url</td>
</tr>
<tr>
<td>302</td>
<td>临时移动</td>
<td>服务器目前从不同位置的网页响应请求，但请求仍继续使用原有位置来进行以后的请求</td>
</tr>
<tr>
<td>303</td>
<td>查看其他位置</td>
<td>请求者应当对不同的位置使用单独的GET请求来检索响应时，服务器返回此代码</td>
</tr>
<tr>
<td>304</td>
<td>未修改</td>
<td>自从上次请求后，请求的网页未修改过</td>
</tr>
<tr>
<td>305</td>
<td>使用代理</td>
<td>请求者只能使用代理访问请求的网页</td>
</tr>
<tr>
<td>307</td>
<td>临时重定向</td>
<td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td>
</tr>
</tbody></table>
<h3 id="4XX：客户端错误状态码"><a href="#4XX：客户端错误状态码" class="headerlink" title="4XX：客户端错误状态码"></a>4XX：客户端错误状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>错误请求</td>
<td>服务器不理解请求的语法</td>
</tr>
<tr>
<td>401</td>
<td>未授权</td>
<td>请求要求用户的身份验证</td>
</tr>
<tr>
<td>403</td>
<td>禁止</td>
<td>服务器拒绝请求</td>
</tr>
<tr>
<td>404</td>
<td>未找到</td>
<td>服务器找不到请求的页面</td>
</tr>
<tr>
<td>405</td>
<td>方法禁用</td>
<td>禁用请求中指定的方法</td>
</tr>
<tr>
<td>406</td>
<td>不接受</td>
<td>无法使用请求的内容特性响应请求的页面</td>
</tr>
<tr>
<td>407</td>
<td>需要代理授权</td>
<td>请求需要代理的身份认证</td>
</tr>
<tr>
<td>408</td>
<td>请求超时</td>
<td>服务器等候请求时发生超时</td>
</tr>
<tr>
<td>409</td>
<td>冲突</td>
<td>服务器在完成请求时发生冲突</td>
</tr>
<tr>
<td>410</td>
<td>已删除</td>
<td>客户端请求的资源已经不存在</td>
</tr>
<tr>
<td>411</td>
<td>需要有效长度</td>
<td>服务器不接受不含有效长度表头字段的请求</td>
</tr>
<tr>
<td>412</td>
<td>未满足前提条件</td>
<td>服务器未满足请求者在请求中设置的其中一个前提条件</td>
</tr>
<tr>
<td>413</td>
<td>请求实体过大</td>
<td>由于请求实体过大，服务器无法处理，因此拒绝请求</td>
</tr>
<tr>
<td>414</td>
<td>请求url过长</td>
<td>请求的url过长，服务器无法处理</td>
</tr>
<tr>
<td>415</td>
<td>不支持格式</td>
<td>服务器无法处理请求中附带媒体格式</td>
</tr>
<tr>
<td>416</td>
<td>范围无效</td>
<td>客户端请求的范围无效</td>
</tr>
<tr>
<td>417</td>
<td>未满足期望</td>
<td>服务器无法满足请求表头字段要求</td>
</tr>
</tbody></table>
<h3 id="5XX：服务端错误状态码"><a href="#5XX：服务端错误状态码" class="headerlink" title="5XX：服务端错误状态码"></a>5XX：服务端错误状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>500</td>
<td>服务器错误</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td>501</td>
<td>尚未实施</td>
<td>服务器不具备完成请求的功能</td>
</tr>
<tr>
<td>502</td>
<td>错误网关</td>
<td>服务器作为网关或代理出现错误</td>
</tr>
<tr>
<td>503</td>
<td>服务不可用</td>
<td>服务器目前无法使用</td>
</tr>
<tr>
<td>504</td>
<td>网关超时</td>
<td>网关或代理服务器，未及时获取请求</td>
</tr>
<tr>
<td>505</td>
<td>不支持版本</td>
<td>不支持版本</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>JS事件循环机制(event loop)之宏任务、微任务</title>
    <url>/2020/08/02/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6-event-loop-%E4%B9%8B%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p><a class="link"   href="https://segmentfault.com/a/1190000014940904" >JS事件循环机制(event loop)之宏任务、微任务<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6遍历数组和对象的方法总结</title>
    <url>/2020/08/02/ES6%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>1、every 数组的每一项都返回true，遍历完整个数组，最终返回值才为true</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.every((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val&lt;10;</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>2、some 数组任意一项返回true，则停止遍历，返回值为true</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.some((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val&lt;10;</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>3、filter 遍历整个数组，找到符合的元素，返回这个新组成的数组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">　arr.filter((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val&lt;10;</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>4、map 遍历整个数组，返回每个元素调用后的结果组成新的数组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.map((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val**2;</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>5、forEach 遍历数组每一项</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.foreach((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val**2;</span><br><span class="line">　　　&#125;)</span><br></pre></td></tr></table></figure>
<p>6、数组累加器reduce、reduceRight</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.reduce((preValue, currentValue)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> preValue + currentValue</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>7、for of方法不仅可以遍历数组和对象，还可以遍历自定义的数据结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> arr = [1,2,3,4,5]</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> item of arr)&#123;</span><br><span class="line">  console.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、for…in既可以遍历对象也可以遍历数组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(var i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;index:&#x27;</span>, i, <span class="string">&#x27;value:&#x27;</span>, arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ES5-ES8-数组拥有的方法"><a href="#ES5-ES8-数组拥有的方法" class="headerlink" title="ES5~ES8 数组拥有的方法"></a>ES5~ES8 数组拥有的方法</h3><p>1、判断是否是数组 Array.isArray( arg ) 有兼容性;<br/><br>2、toString 数组转字符串 arr.toString();<br/><br>3、join 数组每一项间的拼接 arr.join(); String.split();<br/><br>4、pop 删除原数组最后一项，返回删除项 arr.pop() 原数组被修改;<br/><br>5、push 在原数组末尾添加一项，返回数组新长度，改变原数组<br/><br>　　arr.push( …arg )<br/><br>6、shift 删除数组第一项，改变原数组，返回删除项<br/><br>　　arr.shift( );<br/><br>7、unshift 在原数组首位添加项，返回数组新长度<br/><br>　　arr.unshift( …arg );<br/><br>8、reverse 反转数组项的顺序，返回修改后的数组<br/><br>　　arr.reverse();<br/><br>9、sort 数组每项按照unicode编码排序，默认升序<br/><br>　　arr.sort(); <br/><br>10、concat 数组合并，返回合并后的数组   arr1.concat( arr2 );<br/><br>11、slice 截取数组 参数一：开始位置 参数二：结束位置后一位 <br/><br>　　    参数为负数，用数组总长度加上该负数来确定位置;<br/><br>　　　结束位置小于起始位置，返回空数组<br/><br>　　arr.slice(arg1,arg2)<br/><br>12、splice 删除、插入、替换数组元素<br/><br>　　参数一：起始位置<br/><br>   参数二：删除元素个数<br/><br>   参数三：插入的元素<br/><br>　　arr.splice(arg1,arg2,arg3)<br/><br>　　返回被删除的项，会改变原数组。<br/><br>13、indexOf/lastIndexOf 数组中查找元素的位置<br/><br>　　参数一：要查找的元素 <br/><br>   参数二：开始查找位置 返回值-1 不存在，返回值大于等于0表示元素位置<br/><br>　　arr.indexOf(arg1,arg2) 从左往右查找<br/><br>　　arr.lastIndexOf(arg1,arg2) 从右往左查找<br/></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1、forEach、map、filter都可以遍历数组<br/><br>2、forEach操作的原数组，map、filter会返回一个新的数组<br/><br>3、纯粹的遍历操作使用forEach，如果想得到原数组的克隆使用map，如果想根据条件筛选使用filter<br/></p>
<h3 id="ES6新增数组方法"><a href="#ES6新增数组方法" class="headerlink" title="ES6新增数组方法"></a>ES6新增数组方法</h3><p>1、from 将类似数组的对象和可遍历的对象转为真正的数组。<br/><br>　　<code>Array.from([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])</code><br/><br>　　<code>Array.from(&quot;fool&quot;)</code><br/><br>2、of 将一组值转为数组 弥补Array()的不足<br/><br>　　<code>Array.of(7) //[,,,,,,]</code><br/><br>　　<code>Array.of(7) // [7]</code><br/><br>　　<code>Array.of(1, 2, 3); // [1, 2, 3]</code><br/><br>3、copyWithin 将数组中指定位置的元素复制到其他位置（会覆盖掉原有元素）<br/><br>　　参数一：从该位置开始替换元素 <br/><br>   参数二：从该位置开始读取数据，默认为0 <br/><br>   参数三：到该位置停止读 取数据，默认为数组长度<br/><br>　　<code>arr.copyWithin(arg1,arg2,arg3)</code><br/><br>4、fill 使用给定值，填充数组 参数一：给定的值 参数二：起始位置 参数三：结束位置<br/><br>　　<code>arr.fill(arg1,arg2,arg3)</code><br/><br>5、find/findIndex 找到数组中符合条件的值/位置，若没找到返回undefined<br/></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">　　arr.find((val,index,arr)=&gt;&#123;</span><br><span class="line">　　　　<span class="built_in">return</span> val&gt;9;</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure>
<p>6、keys() 遍历数组获取键名<br/><br>   values() 遍历数组获取键值<br/><br>   entries() 遍历数组获取键值对<br/><br>  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">　　<span class="keyword">for</span>(<span class="built_in">let</span> [index,val] of arr.keys()) &#123;</span><br><span class="line">　　　　console.log(val)</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ES7-0新增的数组方法"><a href="#ES7-0新增的数组方法" class="headerlink" title="ES7.0新增的数组方法"></a>ES7.0新增的数组方法</h3><p>1、includes 判断数组中是否存在该元素 弥补indexOf不能判断NaN<br/><br>　　<code>arr.includes()</code></p>
<h3 id="ES8没有新增数组方法"><a href="#ES8没有新增数组方法" class="headerlink" title="ES8没有新增数组方法"></a>ES8没有新增数组方法</h3><h3 id="ES6遍历对象的方法总结"><a href="#ES6遍历对象的方法总结" class="headerlink" title="ES6遍历对象的方法总结"></a>ES6遍历对象的方法总结</h3><p>1、for … in 循环遍历对象自身的和继承的可枚举属性(循环遍历对象自身的和继承的可枚举属性(不含Symbol属性))。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLePO.png" alt="aYLePO.png"></p>
<p>2、使用Object.keys()遍历 (返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)).</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLmGD.png" alt="aYLmGD.png"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLuxH.png" alt="aYLuxH.png"></p>
<p>3、Object.getOwnPropertyNames(obj),返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertyNames(obj).forEach(<span class="keyword">function</span>(key)&#123;</span><br><span class="line">    console.log(key,obj[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>4、Reflect.ownKeys(obj),返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Reflect.ownKeys(obj).forEach(<span class="keyword">function</span>(key)&#123;</span><br><span class="line">console.log(key,obj[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLMMd.png" alt="aYLMMd.png"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的深拷贝与浅拷贝</title>
    <url>/2020/12/07/JavaScript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h3 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h3><h4 id="1-1、JS数据类型"><a href="#1-1、JS数据类型" class="headerlink" title="1.1、JS数据类型"></a>1.1、JS数据类型</h4><p>基本数据类型：Boolean、String、Number、null、undefined<br>引用数据类型：Object、Array、Function、RegExp、Date等</p>
<h4 id="1-2、数据类型的复制"><a href="#1-2、数据类型的复制" class="headerlink" title="1.2、数据类型的复制"></a>1.2、数据类型的复制</h4><p>基本数据类型的复制，是按值传递的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = a;</span><br><span class="line">b = 2;</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.lob(b); // 2</span><br></pre></td></tr></table></figure>
<p>引用数据类型的复制，是按引用传值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line"> a: 1;</span><br><span class="line"> b: 2;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = obj1;</span><br><span class="line">obj2.a=3;</span><br><span class="line">console.log(obj1.a); //3</span><br><span class="line">console.log(obj2.a); // 3</span><br></pre></td></tr></table></figure>
<h4 id="1-3、深拷贝与浅拷贝"><a href="#1-3、深拷贝与浅拷贝" class="headerlink" title="1.3、深拷贝与浅拷贝"></a>1.3、深拷贝与浅拷贝</h4><p>深拷贝和浅拷贝都只针对引用数据类型，浅拷贝会对对象逐个成员依次拷贝，但只复制内存地址，而不复制对象本身，新旧对象成员还是共享同一内存；深拷贝会另外创建一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p>
<p>区别：浅拷贝只复制对象的第一层属性，而深拷贝会对对象的属性进行递归复制。</p>
<h3 id="二、JS浅拷贝"><a href="#二、JS浅拷贝" class="headerlink" title="二、JS浅拷贝"></a>二、JS浅拷贝</h3><h4 id="2-1、赋值与浅拷贝"><a href="#2-1、赋值与浅拷贝" class="headerlink" title="2.1、赋值与浅拷贝"></a>2.1、赋值与浅拷贝</h4><p>当把一个对象赋值给一个新的变量时，赋的对象是该对象在栈中的地址，而不是堆中的数据。也就是新旧两个对象指的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，两个对象联动的会一起改变。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;language&#x27;</span> : [1,[2,3],[4,5]],</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">obj2.language[1] = [<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>];</span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>,obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>,obj2)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DvCoJx"><img src="https://s3.ax1x.com/2020/12/07/DvCoJx.png" alt="DvCoJx.png"></a></p>
<p>浅拷贝是按位拷贝对象，它会创建一个新对象，对原有对象的成员进行依次拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。因此如果新对象中的某个对象成员改变了地址，就会影响到原有的对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//手写浅拷贝</span><br><span class="line"><span class="keyword">function</span> shallowCopy(obj1) &#123;</span><br><span class="line"> <span class="built_in">let</span> obj2 = Array.isArray(obj1) ? [] : &#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">let</span> i <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  obj2[i] = obj1[i]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">return</span> obj2</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;language&#x27;</span> : [1,[2,3],[4,5]],</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = shallowCopy(obj1);</span><br><span class="line">obj2.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">obj2.language[1] = [<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>];</span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>,obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>,obj2)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DvCTW6"><img src="https://s3.ax1x.com/2020/12/07/DvCTW6.png" alt="DvCTW6.png"></a></p>
<h4 id="2-2、浅拷贝的实现"><a href="#2-2、浅拷贝的实现" class="headerlink" title="2.2、浅拷贝的实现"></a>2.2、浅拷贝的实现</h4><p>（1）Object.assign()</p>
<p>Object.assign()方法可以把源对象自身的任意多个的可枚举属性拷贝给目标对象，然后返回目标对象，但是Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。此方法对于Array和Object均可适用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;language&#x27;</span> : [1,[2,3],[4,5]],</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = Object.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">obj2.language[1] = [<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>];</span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>,obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>,obj2)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DvCjwd"><img src="https://s3.ax1x.com/2020/12/07/DvCjwd.png" alt="DvCjwd.png"></a></p>
<p>（2）Array.prototype.concat()和Array.prototype.slice()</p>
<p>Array.prototype.concat()和Array.prototype.slice()均为Array原型上的方法，只适用于Array。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr1 = [1,3,&#123;</span><br><span class="line"> user: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">var arr2 = arr1.concat();</span><br><span class="line">arr2[0] = <span class="string">&#x27;一&#x27;</span>;</span><br><span class="line">arr2[2].user = <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line">console.log(<span class="string">&#x27;arr1&#x27;</span>,arr1)</span><br><span class="line">console.log(<span class="string">&#x27;arr2&#x27;</span>,arr2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">var arr1 = [1,3,&#123;</span><br><span class="line"> user: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">var arr2 = arr1.slice();</span><br><span class="line">arr2[0] = <span class="string">&#x27;一&#x27;</span>;</span><br><span class="line">arr2[2].user = <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line">console.log(<span class="string">&#x27;arr1&#x27;</span>,arr1)</span><br><span class="line">console.log(<span class="string">&#x27;arr2&#x27;</span>,arr2)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DvCzFI"><img src="https://s3.ax1x.com/2020/12/07/DvCzFI.png" alt="DvCzFI.png"></a><br>补充说明：Array的slice和contact方法都不会修改原数组，而是会返回一个对原数组进行浅拷贝的新数组。这两种方法同Object.assign()一样，都是对第一层属性依次拷贝，如果第一层的属性是基本数据类型，就拷贝值；如果是引用数据类型，就拷贝内存地址。</p>
<h3 id="三、JS深拷贝"><a href="#三、JS深拷贝" class="headerlink" title="三、JS深拷贝"></a>三、JS深拷贝</h3><p>对对象的属性中所有引用类型的值，遍历到是基本类型的值为止。</p>
<h4 id="3-1、深拷贝实现方式"><a href="#3-1、深拷贝实现方式" class="headerlink" title="3.1、深拷贝实现方式"></a>3.1、深拷贝实现方式</h4><p>(1)JSON.parse(JSON.stringify())<br>原理：用JSON.stringify()将对象转成字符串，再用JSON.parse()把字符串解析成对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;language&#x27;</span> : [1,[2,3],[4,5]],</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">obj2.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">obj2.language[1] = [<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>];</span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>,obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>,obj2)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DvPlXF"><img src="https://s3.ax1x.com/2020/12/07/DvPlXF.png" alt="DvPlXF.png"></a></p>
<p>缺点：这种方法可以实现数组和对象和基本数据类型的深拷贝，但不能处理函数。因为JSON.stringify()方法是将一个javascript值转换我一个JSON字符串，不能接受函数。其他影响如下：</p>
<ul>
<li>如果对象中有时间对象，那么用该方法拷贝之后的对象中，时间是字符串形式而不是时间对象</li>
<li>如果对象中有RegExp、Error对象，那么序列化的结果是空</li>
<li>如果对象中有函数或者undefined，那么序列化的结果会把函数或undefined丢失</li>
<li>如果对象中有NAN、infinity、-infinity，那么序列化的结果会变成null</li>
<li>JSON.stringfy（）只能序列化对象的可枚举自有属性，如果对象中有是构造函数生成的，那么拷贝后会丢弃对象的constructor</li>
<li>如果对象中存在循环引用也无法正确实现深拷贝</li>
</ul>
<p>（2）手写深拷贝函数</p>
<p>通过递归实现深拷贝</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> deepCopy(obj)&#123;</span><br><span class="line"> var result= Array.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line"> <span class="keyword">if</span> (obj &amp;&amp; typeof(obj) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   <span class="keyword">if</span> (obj.hasOwnProperty(i))&#123; // 思考：这句是否有必要？</span><br><span class="line">    <span class="keyword">if</span> (obj[i] &amp;&amp; typeof(obj[i]) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     result[i] = deepCopy(obj[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     result[i] = obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;</span><br><span class="line"> a: 1,</span><br><span class="line"> b: &#123;</span><br><span class="line">  c: 2</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = deepCopy(obj1);</span><br><span class="line">obj2.a = <span class="string">&#x27;一&#x27;</span>;</span><br><span class="line">obj2.b.c = <span class="string">&#x27;二&#x27;</span></span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>, obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>, obj2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>obj.hasOwnProperty(prop)用来判断obj这个对象中是否含有prop这个属性，返回布尔值，有则true，没有则false</p>
</blockquote>
<p>以上有个缺陷：当遇到两个互相引用的对象时，会出现死循环的情况，从而导致爆栈。为了避免相互引用的对象导致死循环的情况，则应该在遍历的时候判断是否互相引用。</p>
<p>深拷贝函数改进（防止循环递归爆栈）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> deepCopy(obj, parent = null) &#123;</span><br><span class="line"> <span class="built_in">let</span> result = Array.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line"> <span class="built_in">let</span> _parent = parent</span><br><span class="line"> // 该字段有父级则需要追溯该字段的父级</span><br><span class="line"> <span class="keyword">while</span>(_parent) &#123;</span><br><span class="line">  // 如果该字段引用了它的父级，则为循环引用</span><br><span class="line">  <span class="keyword">if</span> (_parent.originalParent === obj) &#123;</span><br><span class="line">   // 循环引用返回同级的新对象</span><br><span class="line">   <span class="built_in">return</span> _parent.currentParent </span><br><span class="line">  &#125;</span><br><span class="line">  _parent = _parent.parent</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (obj &amp;&amp; typeof(obj) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   // 如果字段的值也是一个对象</span><br><span class="line">   <span class="keyword">if</span> (obj[i] &amp;&amp; typeof(obj[i]) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    // 递归执行深拷，将同级的待拷贝对象传递给parent，方便追溯循环引用</span><br><span class="line">    result[i] = deepCopy(obj[i], &#123;</span><br><span class="line">     originalParent: obj,</span><br><span class="line">     currentParent: result,</span><br><span class="line">     parent: parent</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result[i] = obj[i]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;</span><br><span class="line"> x: 1,</span><br><span class="line"> y: 2</span><br><span class="line">&#125;;</span><br><span class="line">obj1.z = obj1</span><br><span class="line">var obj2 = deepCopy(obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>, obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>, obj2)</span><br></pre></td></tr></table></figure>
<p>以上代码可以复制到浏览器去试试吧</p>
<p>深拷贝函数最终版（支持基本数据类型、Array、Object、原型链、RegExp、Date类型）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> deepCopy(obj, parent = null) &#123;</span><br><span class="line"> <span class="built_in">let</span> result</span><br><span class="line"> <span class="built_in">let</span> _parent = parent</span><br><span class="line"> <span class="keyword">while</span>(_parent) &#123;</span><br><span class="line">  <span class="keyword">if</span> (_parent.originalParent === obj) &#123;</span><br><span class="line">   <span class="built_in">return</span> _parent.currentParent</span><br><span class="line">  &#125;</span><br><span class="line">  _parent = _parent.parent</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (obj &amp;&amp; typeof(obj) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj instanceof RegExp) &#123;</span><br><span class="line">   result = new RegExp(obj.source, obj.flags)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj instanceof Date) &#123;</span><br><span class="line">   result = new Date(obj.getTime())</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (obj instanceof Array) &#123;</span><br><span class="line">    result = []</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">let</span> proto = Object.getPrototypeOf(obj)</span><br><span class="line">    result = Object.create(proto)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[i] &amp;&amp; typeof(obj[i]) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     result[i] = deepCopy(obj[i], &#123;</span><br><span class="line">      originalParent: obj,</span><br><span class="line">      currentParent: result,</span><br><span class="line">      parent: parent</span><br><span class="line">     &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     result[i] = obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">return</span> obj</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;</span><br><span class="line"> x: 1 </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//试调用</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">construct</span></span>()&#123;</span><br><span class="line">  this.a = 1,</span><br><span class="line">  this.b = &#123;</span><br><span class="line">    x:2,</span><br><span class="line">    y:3,</span><br><span class="line">    z:[4,5,[6]]</span><br><span class="line">  &#125;,</span><br><span class="line">  this.c = [7,8,[9,10]],</span><br><span class="line">  this.d = new Date(),</span><br><span class="line">  this.e = /abc/ig,</span><br><span class="line">  this.f = <span class="keyword">function</span>(a,b)&#123;</span><br><span class="line">    <span class="built_in">return</span> a+b</span><br><span class="line">  &#125;,</span><br><span class="line">  this.g = null,</span><br><span class="line">  this.h = undefined,</span><br><span class="line">  this.i = <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  this.j = Symbol(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">construct.prototype.str = <span class="string">&quot;I&#x27;m prototype&quot;</span></span><br><span class="line">var obj1 = new construct()</span><br><span class="line">obj1.k = obj1</span><br><span class="line">obj2 = deepCopy(obj1)</span><br><span class="line"> </span><br><span class="line">obj2.b.x = 999</span><br><span class="line">obj2.c[0] = 666</span><br><span class="line"> </span><br><span class="line">console.log(<span class="string">&#x27;obj1&#x27;</span>, obj1)</span><br><span class="line">console.log(<span class="string">&#x27;obj2&#x27;</span>, obj2)</span><br></pre></td></tr></table></figure>
<p>（3）函数库<br>也可以使用一些函数库，比如函数库lodash，也有提供_.cloneDeep用来做深拷贝；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var _ = require(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: &#123; f: &#123; g: 1 &#125; &#125;,</span><br><span class="line">  c: [1, 2, 3]</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = _.cloneDeep(obj1);</span><br><span class="line">console.log(obj1.b.f === obj2.b.f);</span><br><span class="line">// <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx正向代理与反向代理</title>
    <url>/2020/11/02/Nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>实践中客户端无法直接跟服务端发起请求的时候，我们就需要代理服务。代理可以实现客户端与服务端之间的通信,我们的Nginx也可以实现相应的代理服务。</p>
<h3 id="二、正向代理和反向代理的区别"><a href="#二、正向代理和反向代理的区别" class="headerlink" title="二、正向代理和反向代理的区别"></a>二、正向代理和反向代理的区别</h3><p><a href="https://imgchr.com/i/BBNpxs"><img src="https://s1.ax1x.com/2020/11/02/BBNpxs.png" alt="BBNpxs.png"></a></p>
<h4 id="正向代理-客户端-lt-一-gt-代理-一-gt-服务端"><a href="#正向代理-客户端-lt-一-gt-代理-一-gt-服务端" class="headerlink" title="正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端"></a>正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</h4><p>正向代理简单地打个租房的比方:</p>
<p>A(客户端)想租C(服务端)的房子,但是A(客户端)并不认识C(服务端)租不到。<br>B(代理)认识C(服务端)能租这个房子所以你找了B(代理)帮忙租到了这个房子。</p>
<p>这个过程中C(服务端)不认识A(客户端)只认识B(代理)<br>C(服务端)并不知道A(客户端)租了房子，只知道房子租给了B(代理)。</p>
<h4 id="反向代理-客户端-一-gt-代理-lt-一-gt-服务端"><a href="#反向代理-客户端-一-gt-代理-lt-一-gt-服务端" class="headerlink" title="反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端"></a>反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</h4><p>反向代理也用一个租房的例子:</p>
<p>A(客户端)想租一个房子,B(代理)就把这个房子租给了他。<br>这时候实际上C(服务端)才是房东。<br>B(代理)是中介把这个房子租给了A(客户端)。</p>
<p>这个过程中A(客户端)并不知道这个房子到底谁才是房东<br>他都有可能认为这个房子就是B(代理)的</p>
<p>由上的例子和图我们可以知道正向代理和反向代理的区别在于代理的对象不一样,正向代理的代理对象是客户端,反向代理的代理对象是服务端。</p>
<h3 id="三、Nginx代理的配置演示"><a href="#三、Nginx代理的配置演示" class="headerlink" title="三、Nginx代理的配置演示"></a>三、Nginx代理的配置演示</h3><h4 id="1、正向代理配置场景演示"><a href="#1、正向代理配置场景演示" class="headerlink" title="1、正向代理配置场景演示"></a>1、正向代理配置场景演示</h4><p>正向代理很常见,我们的科学上网就是一种正向代理。<br>我们接下来演示正向代理的这么一个场景。<br>首先我在我的A服务器的nginx设置访问控制<br>访问控制之前我访问A下的test.html是这样的:<br><a href="https://imgchr.com/i/BBB3dI"><img src="https://s1.ax1x.com/2020/11/02/BBB3dI.png" alt="BBB3dI.png"></a></p>
<p>我们打开<code>/etc/nginx/conf.d/default.conf</code><br>我们加入这么一个判断语句<br>如果访问A的IP不是118.126.106.11(我的B服务器)则返回403.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">        if ( $remote_addr !~* &quot;^118\.126\.106\.11&quot;) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        root   &#x2F;opt&#x2F;app&#x2F;demo&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>添加后reload一下nginx再访问test.html:</p>
<p><a href="https://imgchr.com/i/BBDTBj"><img src="https://s1.ax1x.com/2020/11/02/BBDTBj.png" alt="BBDTBj.png"></a></p>
<p>此时本地我的浏览器就是被限制了,访问不了该资源。<br>现在我登录上我的B服务器,打开<code>/etc/nginx/conf.d/default.conf</code><br>添加<code>resolver</code>和<code>proxy_pass</code>,设置如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost nginx.tangll.cn;</span><br><span class="line"></span><br><span class="line">    resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//$http_host$request_uri;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>resolver</code>为DNS解析,这里填写的IP为Google提供的免费DNS服务器的IP地址<br><code>proxy_pass</code>配置代理转发<br>至此便是配置了B服务器所有访问根一级的请求全部都代理转发对应到$http_host$request_uri去了,<code>$http_host</code>就是我们要访问的主机名,<code>$request_uri</code>就是我们后面所加的参数。<br>简单的说至此就是相当于配置好了我们请求了B服务器,B服务器再去请求我们所请求的地址。</p>
<p>那么接下来我们来看一下结果,我们在本地配置好代理,我这里是mac系统,可以从网络设置中选择高级,然后选择代理</p>
<p><a href="https://imgchr.com/i/BBrVgO"><img src="https://s1.ax1x.com/2020/11/02/BBrVgO.png" alt="BBrVgO.png"></a></p>
<p>填入我们B服务器的IP,然后我们来看一下代理是否成功。<br>我们登录<a class="link"   href="http://www.ip138.com/" >http://www.ip138.com/<i class="fas fa-external-link-alt"></i></a> 可以看到此时我们的IP地址已经为B服务器的IP,说明代理成功。<br><a href="https://imgchr.com/i/BBrs2T"><img src="https://s1.ax1x.com/2020/11/02/BBrs2T.png" alt="BBrs2T.png"></a></p>
<p>然后我们再来访问一下test.html:</p>
<p><a href="https://imgchr.com/i/BBrIG6"><img src="https://s1.ax1x.com/2020/11/02/BBrIG6.png" alt="BBrIG6.png"></a></p>
<p>结果证明,此时的客户端已经可以成功访问A服务器的资源。<br>以上就是正向代理的一个场景演示,这个过程中可以知道,我们客户端是想要A的资源,但是A的资源只有B能拿到,便让B代理去帮助我们访问A的资源。整个过程A只知道B拿了他的资源,并不知道客户端拿到。</p>
<h4 id="2、反向代理配置场景演示"><a href="#2、反向代理配置场景演示" class="headerlink" title="2、反向代理配置场景演示"></a>2、反向代理配置场景演示</h4><p>反向代理的演示更为简单一些。<br>首先在/etc/nginx/conf.d/下新建一个test.conf:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">8080</span>;</span><br><span class="line">    server_name  localhost nginx.tangll.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/app/demo/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="number">404</span>  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我server里listen的是8080端口,但是我的服务器本身不对外开放8080端口,只开放了80端口。<br>所以我们此时访问test.html结果是访问不到的:</p>
<p><a href="https://imgchr.com/i/BBs8oR"><img src="https://s1.ax1x.com/2020/11/02/BBs8oR.png" alt="BBs8oR.png"></a></p>
<p>然后我们打开我们的/etc/nginx/conf.d/default.conf<br>添加proxy_pass设置如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost nginx.tangll.cn;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">#设置代理</span></span><br><span class="line">    <span class="comment">#location ~ /test.html$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass http://127.0.0.1:8080;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504 404  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们设置当匹配test.html结尾的URL时就去代理访问本机的8080端口<br>为了对比我们先注释掉,然后直接80端口访问一下test.html:</p>
<p><a href="https://imgchr.com/i/BBsaQO"><img src="https://s1.ax1x.com/2020/11/02/BBsaQO.png" alt="BBsaQO.png"></a></p>
<p>可以看到此时返回的404。<br>这时候取消注释我们reload一下nginx然后用80端口访问test.html</p>
<p><a href="https://imgchr.com/i/BBsdyD"><img src="https://s1.ax1x.com/2020/11/02/BBsdyD.png" alt="BBsdyD.png"></a></p>
<p>此时便可访问8080端口配置的资源。<br>以上便是完成了一个反向代理的演示,这个过程中我们可以知道,客户端想要访问的是test.html,但是test.html实际上是8080端口下配置的,中间经过了代理才能拿到。也就是说客户端并不知道中间经历了什么代理过程,只有服务端知道。客户端只知道他拿到了test.html也就是8080端口下配置的资源内容。</p>
<h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><blockquote>
<p>由上的打比方和演示例子可以体会到正向代理与反向代理的区别和Nginx正向代理和反向代理的简单配置。正向代理和反向代理的区别上边也说过在于代理的对象不一样,正向代理的代理对象是客户端,反向代理的代理对象是服务端。<br>最后一句话总结此文就是<br>代理服务器站在客户端那边就是正向代理，<br>代理服务器站在原始服务器那边就是反向代理,<br>Nginx通过<code>proxy_pass</code>可以设置代理服务。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS优缺点及适用场景讨论</title>
    <url>/2020/08/02/NodeJS%E4%BC%98%E7%BC%BA%E7%82%B9%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E8%AE%A8%E8%AE%BA/</url>
    <content><![CDATA[<h4 id="NodeJS宣称其目标是“旨在提供一种简单的构建可伸缩网络程序的方法”，那么它的出现是为了解决什么问题呢，它有什么优缺点以及它适用于什么场景呢？"><a href="#NodeJS宣称其目标是“旨在提供一种简单的构建可伸缩网络程序的方法”，那么它的出现是为了解决什么问题呢，它有什么优缺点以及它适用于什么场景呢？" class="headerlink" title="NodeJS宣称其目标是“旨在提供一种简单的构建可伸缩网络程序的方法”，那么它的出现是为了解决什么问题呢，它有什么优缺点以及它适用于什么场景呢？"></a>NodeJS宣称其目标是“旨在提供一种简单的构建可伸缩网络程序的方法”，那么它的出现是为了解决什么问题呢，它有什么优缺点以及它适用于什么场景呢？</h4><h4 id="一-NodeJS的特点"><a href="#一-NodeJS的特点" class="headerlink" title="一. NodeJS的特点"></a>一. NodeJS的特点</h4><ol>
<li><p>它是一个Javascript运行环境</p>
</li>
<li><p>依赖于Chrome V8引擎进行代码解释</p>
</li>
<li><p>事件驱动</p>
</li>
<li><p>非阻塞I/O</p>
</li>
<li><p>轻量、可伸缩，适于实时数据交互应用</p>
</li>
<li><p>单进程，单线程</p>
</li>
</ol>
<p>二. NodeJS带来的对系统瓶颈的解决方案</p>
<p>它的出现确实能为我们解决现实当中系统瓶颈提供了新的思路和方案，下面我们看看它能解决什么问题。</p>
<p><strong>1. 并发连接</strong></p>
<p>举个例子，想象一个场景，我们在银行排队办理业务，我们看看下面两个模型。</p>
<p><strong>（1）系统线程模型：</strong></p>
<p>这种模型的问题显而易见，服务端只有一个线程，并发请求（用户）到达只能处理一个，其余的要先等待，这就是阻塞，正在享受服务的请求阻塞后面的请求了。</p>
<p><strong>（2）多线程、线程池模型：</strong></p>
<p>这个模型已经比上一个有所进步，它调节服务端线程的数量来提高对并发请求的接收和响应，但并发量高的时候，请求仍然需要等待，它有个更严重的问题。到代码层面上来讲，我们看看客户端请求与服务端通讯的过程：</p>
<p>服务端与客户端每建立一个连接，都要为这个连接分配一套配套的资源，主要体现为系统内存资源，以PHP为例，维护一个连接可能需要20M的内存。这就是为什么一般并发量一大，就需要多开服务器。</p>
<p>那么NodeJS是怎么解决这个问题的呢？我们来看另外一个模型，想象一下我们在快餐店点餐吃饭的场景。</p>
<p><strong>（3）异步、事件驱动模型</strong></p>
<p>我们同样是要发起请求，等待服务器端响应；但是与银行例子不同的是，这次我们点完餐后拿到了一个号码，拿到号码，我们往往会在位置上等待，而在我们后面的请求会继续得到处理，同样是拿了一个号码然后到一旁等待，接待员能一直进行处理。</p>
<p>等到饭菜做号了，会喊号码，我们拿到了自己的饭菜，进行后续的处理（吃饭）。这个喊号码的动作在NodeJS中叫做回调（Callback），能在事件（烧菜，I/O）处理完成后继续执行后面的逻辑（吃饭），这体现了NodeJS的显著特点，异步机制、事件驱动整个过程没有阻塞新用户的连接（点餐），也不需要维护已经点餐的用户与厨师的连接。</p>
<p>基于这样的机制，理论上陆续有用户请求连接，NodeJS都可以进行响应，因此NodeJS能支持比Java、PHP程序更高的并发量虽然维护事件队列也需要成本，再由于NodeJS是单线程，事件队列越长，得到响应的时间就越长，并发量上去还是会力不从心。</p>
<p><strong>总结一下NodeJS是怎么解决并发连接这个问题的：更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存）。</strong></p>
<p><strong>2. I/O阻塞</strong></p>
<p>NodeJS解决的另外一个问题是I/O阻塞，看看这样的业务场景：需要从多个数据源拉取数据，然后进行处理。</p>
<p>（1）串行获取数据，这是我们一般的解决方案，以PHP为例</p>
<p>假如获取profile和timeline操作各需要1S，那么串行获取就需要2S。</p>
<p>（2）NodeJS非阻塞I/O，发射/监听事件来控制执行过程</p>
<p>NodeJS遇到I/O事件会创建一个线程去执行，然后主线程会继续往下执行的，因此，拿profile的动作触发一个I/O事件，马上就会执行拿timeline的动作，两个动作并行执行，假如各需要1S，那么总的时间也就是1S。它们的I/O操作执行完成后，发射一个事件，profile和timeline，事件代理接收后继续往下执行后面的逻辑，这就是NodeJS非阻塞I/O的特点。</p>
<p><strong>总结一下：Java、PHP也有办法实现并行请求（子线程），但NodeJS通过回调函数（Callback）和异步机制会做得很自然。</strong></p>
<p><strong>三. NodeJS的优缺点</strong></p>
<p><strong>优点：</strong></p>
<ol>
<li><p>高并发（最重要的优点）</p>
</li>
<li><p>适合I/O密集型应用</p>
</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；</li>
</ol>
<p>解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；</p>
<ol start="2">
<li><p>只支持单核CPU，不能充分利用CPU</p>
</li>
<li><p>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</p>
</li>
</ol>
<p>原因：单进程，单线程</p>
<p>解决方案：<br>（1）Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；</p>
<p>（2）开多个进程监听同一个端口，使用cluster模块；</p>
<ol start="4">
<li><p>开源组件库质量参差不齐，更新快，向下不兼容</p>
</li>
<li><p>Debug不方便，错误没有stack trace</p>
</li>
</ol>
<p><strong>四. 适合NodeJS的场景</strong></p>
<ol>
<li>RESTful API</li>
</ol>
<p>这是NodeJS最理想的应用场景，可以处理数万条连接，本身没有太多的逻辑，只需要请求API，组织数据进行返回即可。它本质上只是从某个数据库中查找一些值并将它们组成一个响应。由于响应是少量文本，入站请求也是少量的文本，因此流量不高，一台机器甚至也可以处理最繁忙的公司的API需求。</p>
<ol start="2">
<li>统一Web应用的UI层</li>
</ol>
<p>目前MVC的架构，在某种意义上来说，Web开发有两个UI层，一个是在浏览器里面我们最终看到的，另一个在server端，负责生成和拼接页面。</p>
<p>不讨论这种架构是好是坏，但是有另外一种实践，面向服务的架构，更好的做前后端的依赖分离。如果所有的关键业务逻辑都封装成REST调用，就意味着在上层只需要考虑如何用这些REST接口构建具体的应用。那些后端程序员们根本不操心具体数据是如何从一个页面传递到另一个页面的，他们也不用管用户数据更新是通过Ajax异步获取的还是通过刷新页面。</p>
<ol start="3">
<li>大量Ajax请求的应用</li>
</ol>
<p>例如个性化应用，每个用户看到的页面都不一样，缓存失效，需要在页面加载的时候发起Ajax请求，NodeJS能响应大量的并发请求。　　总而言之，NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。</p>
<p><strong>五. 结尾</strong></p>
<p>其实NodeJS能实现几乎一切的应用，我们考虑的点只是适不适合用它来做。</p>
]]></content>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Uncaught TypeError: Cannot assign to read only property exports of object</title>
    <url>/2021/01/12/Uncaught-TypeError-Cannot-assign-to-read-only-property-exports-of-object/</url>
    <content><![CDATA[<blockquote>
<p>vue项目打包后生成的dist文件部署到GitHub page上之后，访问时，报<code>Uncaught TypeError: Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</code></p>
</blockquote>
<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>webpack 2中不允许混用import和module.exports </p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>一、每个页面模块目录通过一个 index.js 主入口来导出（<code>module.exports</code>）对应的vue文件，然后 <code>router.js</code> 中通过 <code>require</code> 方法去引入资源。</p>
<p>这一做法是没毛病的，因为这是组织（webpack 2）允许的。</p>
<p>二、如果好好的<code>require</code>不用，非要用 <code>import</code> 那么请不要和 <code>module.exports</code> 混合服用，因为这是组织不允许的，此时便会报标题的错。（Uncaught TypeError: Cannot assign to read only property ‘exports’ of object ‘#<Object>‘）</p>
<p>三、如果你还是要用 import 方法来引入资源的话，你可以放弃 module.exports ，直接引入vue文件路径，因为 import 和 export default 是组织运行的。</p>
<p>四、使用<code>babel</code> 的 <a class="link"   href="https://github.com/airbnb/babel-plugin-dynamic-import-node" >plugins babel-plugin-dynamic-import-node<i class="fas fa-external-link-alt"></i></a>。它只做一件事就是将所有的<code>import()</code>转化为<code>require()</code>，这样就可以用这个插件将所有异步组件都用同步的方式引入，并结合 <a class="link"   href="https://babeljs.io/docs/en/config-files/#env-option" >BABEL_ENV<i class="fas fa-external-link-alt"></i></a> 这个<code>babel</code>环境变量，让它只作用于开发环境下，在开发环境中将所有<code>import()</code>转化为<code>require()</code>，这种方案解决了之前重复打包的问题，同时对代码的侵入性也很小，你平时写路由的时候只需要按照官方<a class="link"   href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" >文档<i class="fas fa-external-link-alt"></i></a>路由懒加载的方式就可以了，其它的都交给<code>babel</code>来处理，当你不想用这个方案的时候，也只要将它从<code>babel</code>的 <code>plugins</code>中移除就可以了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;env&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;development&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;plugins&#x27;</span>: [<span class="string">&#x27;dynamic-import-node&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>1、<code>exports</code> 导出的东西需要 <code>require</code> 引入！</p>
<p>2、<code>export</code> 导出的东西需要 <code>import</code> 引入！</p>
<p>3、在webpack 2中<code>不允许混用 import</code> 和 <code>module.exports</code></p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>其实正确地去理解这个报错的话，就一定要去整明白 require 和 import 的区别！</p>
<blockquote>
<p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。<br>1、遵循规范<br><code>require</code> / <code>exports</code> 是<code>CommonJS</code>的一部分<br><code>import</code> / <code>export</code> 是ES6的新规范，如果要兼容浏览器的话必须转化成es5的语法<br>2、调用时间<br><code>require</code> 是运行时调用，所以<code>require</code>理论上可以运用在代码的任何地方<br>import 是编译时调用，所以必须放在文件开头<br>3、本质<br><code>require</code> 是赋值过程，其实<code>require</code>的结果就是对象、数字、字符串、函数等，再把<code>require</code>的结果赋值给某个变量<br><code>import</code> 是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，<code>import</code>语法会被转码为<code>require</code></p>
</blockquote>
]]></content>
      <tags>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Router的params和query传参的使用和区别</title>
    <url>/2020/08/02/Vue-Router%E7%9A%84params%E5%92%8Cquery%E4%BC%A0%E5%8F%82%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="Vue-Router-的params和query传参的使用和区别"><a href="#Vue-Router-的params和query传参的使用和区别" class="headerlink" title="Vue Router 的params和query传参的使用和区别"></a>Vue Router 的params和query传参的使用和区别</h3><p>首先简单说明以下 <code>$router</code> 和 <code>$route</code> 的区别</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// <span class="variable">$router</span>: 是路由操作对象，只写对象</span><br><span class="line">// <span class="variable">$route</span>: 路由信息对象，只读对象</span><br><span class="line"></span><br><span class="line">//操作 路由跳转</span><br><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">    name: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        name: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">        age: <span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//读取 路由参数接收</span><br><span class="line">this.name = this.<span class="variable">$route</span>.params.name;</span><br><span class="line">this.age = this.<span class="variable">$route</span>.params.age;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1、query传递参数"><a href="#1、query传递参数" class="headerlink" title="1、query传递参数"></a>1、query传递参数</h3><p>query 使用name引入可以传递参数，使用path也可以，如果有人知道其中的原因请告诉我一下，非常感谢。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//query传参，使用name跳转</span><br><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">    name: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">        id: <span class="string">&#x27;20200220&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;query&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//query传参，使用path跳转</span><br><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">    path: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">        id: <span class="string">&#x27;20200303&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;query&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//query传参接收</span><br><span class="line">this.id = this.<span class="variable">$route</span>.query.id;</span><br><span class="line">this.name = this.<span class="variable">$route</span>.query.name;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最终不管是path引入还是name引入效果都一样</p>
<h3 id="2、params传递参数"><a href="#2、params传递参数" class="headerlink" title="2、params传递参数"></a>2、params传递参数</h3><p>注：使用params传参只能使用name进行引入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//params传参 使用name</span><br><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">  name:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    id:<span class="string">&#x27;202002020&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;query&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//params接收参数</span><br><span class="line">this.id = this.<span class="variable">$route</span>.params.id ;</span><br><span class="line">this.name = this.<span class="variable">$route</span>.params.name ;</span><br><span class="line"></span><br><span class="line">//路由</span><br><span class="line">&#123;</span><br><span class="line">path: <span class="string">&#x27;/test/:id/:name&#x27;</span>,</span><br><span class="line">name: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">component: () =&gt; import(<span class="string">&#x27;@/view/test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<p>params是路由的一部分,必须要在路由后面添加参数名。query是拼接在url后面的参数，没有也没关系。<br>params一旦设置在路由，params就是路由的一部分，如果这个路由有params传参，但是在跳转的时候没有传这个参数，会导致跳转失败或者页面会没有内容。</p>
<h3 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h3><p>1、传参可以使用params和query两种方式。<br>2、使用params传参只能用name来引入路由，即push里面只能是name:’xxxx’,不能是path:’/xxx’,因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined！！！。<br>3、使用query传参使用path来引入路由。<br>4、params是路由的一部分,必须要在路由后面添加参数名。query是拼接在url后面的参数，没有也没关系。<br>5、二者还有点区别，直白的来说query相当于get请求，页面跳转的时候，可以在地址栏看到请求参数，而params相当于post请求，参数不会再地址栏中显示。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise精选</title>
    <url>/2020/08/02/Promise%E7%B2%BE%E9%80%89/</url>
    <content><![CDATA[<h2 id="一、常见-Promise-面试题"><a href="#一、常见-Promise-面试题" class="headerlink" title="一、常见 Promise 面试题"></a>一、常见 Promise 面试题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、了解 Promise 吗？</span><br><span class="line">2、Promise 解决的痛点是什么？</span><br><span class="line">3、Promise 解决的痛点还有其他方法可以解决吗？如果有，请列举。</span><br><span class="line">4、Promise 如何使用？</span><br><span class="line">5、Promise 常用的方法有哪些？它们的作用是什么？</span><br><span class="line">6、Promise 在事件循环中的执行过程是怎样的？</span><br><span class="line">7、Promise 的业界实现都有哪些？</span><br><span class="line">8、能不能手写一个 Promise 的 polyfill。</span><br></pre></td></tr></table></figure>
<h3 id="Promise-出现的原因"><a href="#Promise-出现的原因" class="headerlink" title="Promise 出现的原因"></a>Promise 出现的原因</h3><p>在 Promise 出现以前，我们处理一个异步网络请求，大概是这样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 请求 代表 一个异步网络调用。</span><br><span class="line">// 请求结果 代表网络请求的响应。</span><br><span class="line">请求1(<span class="keyword">function</span>(请求结果1)&#123;</span><br><span class="line">    处理请求结果1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看起来还不错。<br>但是，需求变化了，我们需要根据第一个网络请求的结果，再去执行第二个网络请求，代码大概如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">请求1(<span class="keyword">function</span>(请求结果1)&#123;</span><br><span class="line">    请求2(<span class="keyword">function</span>(请求结果2)&#123;</span><br><span class="line">        处理请求结果2</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看起来也不复杂。<br>但是需求是永无止境的，于是乎出现了如下的代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">请求1(<span class="keyword">function</span>(请求结果1)&#123;</span><br><span class="line">    请求2(<span class="keyword">function</span>(请求结果2)&#123;</span><br><span class="line">        请求3(<span class="keyword">function</span>(请求结果3)&#123;</span><br><span class="line">            请求4(<span class="keyword">function</span>(请求结果4)&#123;</span><br><span class="line">                请求5(<span class="keyword">function</span>(请求结果5)&#123;</span><br><span class="line">                    请求6(<span class="keyword">function</span>(请求结果3)&#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这回傻眼了。。。 臭名昭著的 回调地狱 现身了。</p>
<p>更糟糕的是，我们基本上还要对每次请求的结果进行一些处理，代码会更加臃肿，在一个团队中，代码 review 以及后续的维护将会是一个很痛苦的过程。</p>
<p>回调地狱带来的负面作用有以下几点：</p>
<ul>
<li><p>代码臃肿。</p>
</li>
<li><p>可读性差。</p>
</li>
<li><p>耦合度过高，可维护性差。</p>
</li>
<li><p>代码复用性差。</p>
</li>
<li><p>容易滋生 bug。</p>
</li>
<li><p>只能在回调里处理异常。</p>
<p>出现了问题，自然就会有人去想办法。这时，就有人思考了，能不能用一种更加友好的代码组织方式，解决异步嵌套的问题。</p>
<p>let 请求结果1 = 请求1();<br>let 请求结果2 = 请求2(请求结果1);<br>let 请求结果3 = 请求3(请求结果2);<br>let 请求结果4 = 请求2(请求结果3);<br>let 请求结果5 = 请求3(请求结果4); </p>
</li>
</ul>
<p>类似上面这种同步的写法。 于是 Promise 规范诞生了，并且在业界有了很多实现来解决回调地狱的痛点。比如业界著名的 Q 和 bluebird，bluebird 甚至号称运行最快的类库。</p>
<blockquote>
<p>看到这里，对于上面的问题 2 和问题 7 ，心中是否有了答案呢。</p>
</blockquote>
<h2 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h2><p> Promise 是异步编程的一种解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。现已被 ES6 纳入进规范中。</p>
<h3 id="代码书写比较"><a href="#代码书写比较" class="headerlink" title="代码书写比较"></a>代码书写比较</h3><p>还是使用上面的网络请求例子，我们看下 Promise 的常规写法：</p>
<p>new Promise(请求1)<br>    .then(请求2(请求结果1))<br>    .then(请求3(请求结果2))<br>    .then(请求4(请求结果3))<br>    .then(请求5(请求结果4))<br>    .catch(处理异常(异常信息))</p>
<p>比较一下这种写法和上面的回调式的写法。我们不难发现，Promise 的写法更为直观，并且能够在外层捕获异步函数的异常信息。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Promise 的常用 API 如下：</p>
<ul>
<li>Promise.resolve(value)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">类方法，该方法返回一个以 value 值解析后的 Promise 对象 1、如果这个值是个 thenable（即带有 <span class="keyword">then</span> 方法），返回的 Promise 对象会“跟随”这个 thenable 的对象，采用它的最终状态（指 resolved/rejected/pending/settled）</span><br><span class="line">2、如果传入的 value 本身就是 Promise 对象，则该对象作为 Promise.resolve 方法的返回值返回。</span><br><span class="line">3、其他情况以该值为成功状态返回一个 Promise 对象。</span><br></pre></td></tr></table></figure>
<p>上面是 resolve 方法的解释，传入不同类型的 value 值，返回结果也有区别。这个 API 比较重要，建议大家通过练习一些小例子，并且配合上面的解释来熟悉它。如下几个小例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//如果传入的 value 本身就是 Promise 对象，则该对象作为 Promise.resolve 方法的返回值返回。  </span><br><span class="line"><span class="keyword">function</span> fn(resolve)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        resolve(123);</span><br><span class="line">    &#125;,3000);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> p0 = new Promise(fn);</span><br><span class="line"><span class="built_in">let</span> p1 = Promise.resolve(p0);</span><br><span class="line">// 返回为<span class="literal">true</span>，返回的 Promise 即是 入参的 Promise 对象。</span><br><span class="line">console.log(p0 === p1);</span><br></pre></td></tr></table></figure>
<p>传入 thenable 对象，返回 Promise 对象跟随 thenable 对象的最终状态。</p>
<blockquote>
<p>ES6 Promises 里提到了 Thenable 这个概念，简单来说它就是一个非常类似 Promise 的东西。最简单的例子就是 jQuery.ajax，它的返回值就是 thenable 对象。但是要谨记，并不是只要实现了 then 方法就一定能作为 Promise 对象来使用。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//如果传入的 value 本身就是 thenable 对象，返回的 promise 对象会跟随 thenable 对象的状态。</span><br><span class="line"><span class="built_in">let</span> promise = Promise.resolve($.ajax(<span class="string">&#x27;/test/test.json&#x27;</span>));// =&gt; promise对象</span><br><span class="line">promise.then(<span class="keyword">function</span>(value)&#123;</span><br><span class="line">   console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>返回一个状态已变成 resolved 的 Promise 对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> p1 = Promise.resolve(123); </span><br><span class="line">//打印p1 可以看到p1是一个状态置为resolved的Promise对象</span><br><span class="line">console.log(p1)</span><br></pre></td></tr></table></figure>
<ul>
<li>Promise.reject</li>
</ul>
<blockquote>
<p>类方法，且与 resolve 唯一的不同是，返回的 promise 对象的状态为 rejected。</p>
</blockquote>
<ul>
<li><p>Promise.prototype.then</p>
<blockquote>
<p>实例方法，为 Promise 注册回调函数，函数形式：fn(vlaue){}，value 是上一个任务的返回结果，then 中的函数一定要 return 一个结果或者一个新的 Promise 对象，才可以让之后的then 回调接收。</p>
</blockquote>
</li>
<li><p>Promise.prototype.catch</p>
<blockquote>
<p>实例方法，捕获异常，函数形式：fn(err){}, err 是 catch 注册 之前的回调抛出的异常信息。</p>
</blockquote>
</li>
<li><p>Promise.race</p>
<blockquote>
<p>类方法，多个 Promise 任务同时执行，返回最先执行结束的 Promise 任务的结果，不管这个 Promise 结果是成功还是失败。 </p>
</blockquote>
</li>
<li><p>Promise.all</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> 类方法，多个 Promise 任务同时执行。</span><br><span class="line">如果全部成功执行，则以数组的方式返回所有 Promise 任务的执行结果。 如果有一个 Promise 任务 rejected，则只返回 rejected 任务的结果。</span><br></pre></td></tr></table></figure>
<h2 id="如何理解-Promise"><a href="#如何理解-Promise" class="headerlink" title="如何理解 Promise"></a>如何理解 Promise</h2></li>
</ul>
<p> 为了便于理解 Promise，大家除了要多加练习以外，最好的方式是能够将Promise的机制与现实生活中的例子联系起来，这样才能真正得到消化。<br>  我们可以把 Promise 比作一个保姆，家里的一连串的事情，你只需要吩咐给他，他就能帮你做，你就可以去做其他事情了。<br>  比如，某一天要出门办事，但是我还要买菜做饭送到老婆单位。<br>  出门办的事情很重要，买菜做饭也重要。但我自己只能做一件事。<br>这时我就可以把买菜做饭的事情交给保姆，我会告诉她：</p>
<ul>
<li>你先去超市买菜。</li>
<li>用超市买回来的菜做饭。</li>
<li>将做好的饭菜送到老婆单位。</li>
<li>送到单位后打电话告诉我。<br>我们知道，上面三步都是需要消耗时间的，我们可以理解为三个异步任务。利用 Promise 的写法来书写这个操作：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 买菜(resolve，reject) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        resolve([<span class="string">&#x27;西红柿&#x27;</span>、<span class="string">&#x27;鸡蛋&#x27;</span>、<span class="string">&#x27;油菜&#x27;</span>]);</span><br><span class="line">    &#125;,3000)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> 做饭(resolve, reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        //对做好的饭进行下一步处理。</span><br><span class="line">        resolve (&#123;</span><br><span class="line">            主食: <span class="string">&#x27;米饭&#x27;</span>,</span><br><span class="line">            菜: [<span class="string">&#x27;西红柿炒鸡蛋&#x27;</span>、<span class="string">&#x27;清炒油菜&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,3000) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> 送饭(resolve，reject)&#123;</span><br><span class="line">    //对送饭的结果进行下一步处理</span><br><span class="line">    resolve(<span class="string">&#x27;老婆的么么哒&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> 电话通知我()&#123;</span><br><span class="line">    //电话通知我后的下一步处理</span><br><span class="line">    给保姆加100块钱奖金;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，现在我整理好了四个任务，这时我需要告诉保姆，让他按照这个任务列表去做。这个过程是必不可少的，因为如果不告诉保姆，保姆不知道需要做这些事情。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 告诉保姆帮我做几件连贯的事情，先去超市买菜</span><br><span class="line">new Promise(买菜)</span><br><span class="line">//用买好的菜做饭</span><br><span class="line">.<span class="keyword">then</span>((买好的菜)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(做饭);</span><br><span class="line">&#125;)</span><br><span class="line">//把做好的饭送到老婆公司</span><br><span class="line">.<span class="keyword">then</span>((做好的饭)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(送饭);</span><br><span class="line">&#125;)</span><br><span class="line">//送完饭后打电话通知我</span><br><span class="line">.<span class="keyword">then</span>((送饭结果)=&gt;&#123;</span><br><span class="line">    电话通知我();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>至此，我通知了保姆要做这些事情，然后我就可以放心地去办我的事情。</p>
<blockquote>
<p>请一定要谨记：如果我们的后续任务是异步任务的话，必须return 一个 新的 promise 对象。<br>如果后续任务是同步任务，只需 return 一个结果即可。<br>我们上面举的例子，除了电话通知我是一个同步任务，其余的都是异步任务，异步任务 return 的是 promise对象。</p>
</blockquote>
<p>除此之外，一定谨记，一个 Promise 对象有三个状态，并且状态一旦改变，便不能再被更改为其他状态。</p>
<ul>
<li><p>pending，异步任务正在进行。</p>
</li>
<li><p>resolved (也可以叫fulfilled)，异步任务执行成功。</p>
</li>
<li><p>rejected，异步任务执行失败。</p>
<h2 id="Promise的使用总结"><a href="#Promise的使用总结" class="headerlink" title="Promise的使用总结"></a>Promise的使用总结</h2><p>Promise 这么多概念，初学者很难一下子消化掉，那么我们可以采取强制记忆法，强迫自己去记住使用过程。</p>
</li>
<li><p>首先初始化一个 Promise 对象，可以通过两种方式创建， 这两种方式都会返回一个 Promise 对象。</p>
</li>
<li><p>1、new Promise(fn)</p>
</li>
<li><p>2、Promise.resolve(fn)</p>
</li>
<li><p>然后调用上一步返回的 promise 对象的 then 方法，注册回调函数。</p>
</li>
<li><p>then 中的回调函数可以有一个参数，也可以不带参数。如果 then 中的回调函数依赖上一步的返回结果，那么要带上参数。比如:</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">new Promise(fn)</span><br><span class="line">.<span class="keyword">then</span>(fn1(value）&#123;</span><br><span class="line">    //处理value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>最后注册 catch 异常处理函数，处理前面回调中可能抛出的异常。</li>
</ul>
<p>  通常按照这三个步骤，你就能够应对绝大部分的异步处理场景。用熟之后，再去研究 Promise 各个函数更深层次的原理以及使用方式即可。</p>
<p>  看到这里之后，我们便能回答上面的问题 4 和问题 5了。</p>
<h2 id="Promsie-与事件循环"><a href="#Promsie-与事件循环" class="headerlink" title="Promsie 与事件循环"></a>Promsie 与事件循环</h2><p>Promise在初始化时，传入的函数是同步执行的，然后注册 then 回调。注册完之后，继续往下执行同步代码，在这之前，then 中回调不会执行。同步代码块执行完毕后，才会在事件循环中检测是否有可用的 promise 回调，如果有，那么执行，如果没有，继续下一个事件循环。</p>
<p>  关于 Promise 在事件循环中还有一个 微任务的概念(microtask)，感兴趣的话可以看另外一篇关于nodejs 时间循环的文章 <a class="link"   href="https://link.juejin.im/?target=https://juejin.im/post/5af1413ef265da0b851cce80" >剖析nodejs的事件循环<i class="fas fa-external-link-alt"></i></a>，虽然和浏览器端有些不同，但是Promise 微任务的执行时机相差不大。</p>
<h2 id="Promise-的升级"><a href="#Promise-的升级" class="headerlink" title="Promise 的升级"></a>Promise 的升级</h2><p> ES6 出现了 generator 以及 async/await 语法，使异步处理更加接近同步代码写法，可读性更好，同时异常捕获和同步代码的书写趋于一致。上面的列子可以写成这样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(async ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> 蔬菜 = await 买菜();</span><br><span class="line">    <span class="built_in">let</span> 饭菜 = await 做饭(蔬菜);</span><br><span class="line">    <span class="built_in">let</span> 送饭结果 = await 送饭(饭菜);</span><br><span class="line">    <span class="built_in">let</span> 通知结果 = await 通知我(送饭结果);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>需要记住的是，async/await也是基于 Promise 实现的，所以，我们有必要深入理解 Promise 的用法。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue子组件调用父组件的三种方法</title>
    <url>/2020/12/30/Vue%E5%AD%90%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="第一种方法是直接在子组件中通过this-parent-event来调用父组件的方法"><a href="#第一种方法是直接在子组件中通过this-parent-event来调用父组件的方法" class="headerlink" title="第一种方法是直接在子组件中通过this.$parent.event来调用父组件的方法"></a>第一种方法是直接在子组件中通过this.$parent.event来调用父组件的方法</h4><p>父组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">fatherMethod</span></span>() &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">childMethod</span></span>() &#123;</span><br><span class="line">        this.<span class="variable">$parent</span>.fatherMethod();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="第二种方法是在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了"><a href="#第二种方法是在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了" class="headerlink" title="第二种方法是在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了"></a>第二种方法是在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了</h4><p>父组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child @fatherMethod=<span class="string">&quot;fatherMethod&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">fatherMethod</span></span>() &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">childMethod</span></span>() &#123;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">&#x27;fatherMethod&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法"><a href="#第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法" class="headerlink" title="第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法"></a>第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法</h4><p>父组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child :fatherMethod=<span class="string">&quot;fatherMethod&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">fatherMethod</span></span>() &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      fatherMethod: &#123;</span><br><span class="line">        <span class="built_in">type</span>: Function,</span><br><span class="line">        default: null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">childMethod</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.fatherMethod) &#123;</span><br><span class="line">          this.fatherMethod();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>call、apply和bind方法的用法以及区别</title>
    <url>/2020/08/02/call%E3%80%81apply%E5%92%8Cbind%E6%96%B9%E6%B3%95%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>call、apply、bind的作用是改变函数运行时this的指向，所以先说清楚this。</p>
<p>以下是函数的调用方法：</p>
<p>当一个函数被保存为对象的一个方法时，如果调用表达式包含一个提取属性的动作，那么它就是被当做一个方法来调用，此时的this被绑定到这个对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">    a:2,</span><br><span class="line">    fn:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.fn()//2    </span><br></pre></td></tr></table></figure>
<p>此时的this是指obj1这个对象，obj1.fn()实际上是obj1.fn.call(obj1)，事实上谁调用这个函数，this就是谁。补充一下，DOM对象绑定事件也属于方法调用模式，因此它绑定的this就是事件源DOM对象。如</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">document.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(e)&#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;, 200);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>点击页面，依次输出：document和window对象<br>解析：点击页面监听click事件属于方法调用，this指向事件源DOM对象，即<code>obj.fn.apply(obj)</code>，setTimeout内的函数属于回调函数，可以这么理解，<code>f1.call(null,f2)</code>，所以this指向window。</p>
<p><strong>函数调用模式：</strong></p>
<p>就是普通函数的调用，此时的this被绑定到window</p>
<ul>
<li>最普通的函数调用</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;</span><br><span class="line">      console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure>
<ul>
<li>函数嵌套</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">fn2</span></span>()&#123;</span><br><span class="line">        console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">    fn2()</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure>
<ul>
<li>把函数赋值之后再调用</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">    a:2,</span><br><span class="line">    fn:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fn1 = obj1.fn</span><br><span class="line">fn1()//1</span><br></pre></td></tr></table></figure>
<p>obj1.fn是一个函数<code>function()&#123;console.log(this.a)&#125;</code>，此时fn1就是不带任何修饰的函数调用，<code>function()&#123;console.log(this.a)&#125;.call(undefined)</code>，按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p>
<blockquote>
<p>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p>
</blockquote>
<p>因此上面的this绑定的就是window，它也被称为隐性绑定。<br>如果你希望打印出2，可以修改fn1()为fn1.call(obj1)，显示地绑定this为obj1</p>
<ul>
<li>回调函数</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1</span><br><span class="line"><span class="keyword">function</span> f1(fn)&#123;</span><br><span class="line">    fn()</span><br><span class="line">    console.log(a)//1</span><br><span class="line">&#125;</span><br><span class="line">f1(f2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">    var a = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    (<span class="function"><span class="title">function</span></span> ()&#123;var a = 2&#125;)()</span><br><span class="line">    console.log(a)//1</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>
<p>仍旧是最普通的函数调用，f1.call(undefined)，this指向window，打印出的是全局的a。<br>借此，我们终于可以解释为什么setTimeout总是丢失this了，因为它也就是一个回调函数而已。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(this)//window</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>()&#123;</span><br><span class="line">        console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">&#125;, 0);</span><br></pre></td></tr></table></figure>
<p><strong>构造器调用模式:</strong></p>
<p>new一个函数时，背地里会将创建一个连接到prototype成员的新对象，同时this会被绑定到那个新对象上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,age)&#123;</span><br><span class="line">// 这里的this都指向实例</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">    this.sayAge = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dot = new Person(<span class="string">&#x27;Dot&#x27;</span>,2)</span><br><span class="line">dot.sayAge()//2</span><br></pre></td></tr></table></figure>
<p><strong>call</strong></p>
<p>call 方法第一个参数是要绑定给this的值，后面传入的是一个参数列表。当第一个参数为null、undefined的时候，默认指向window。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 89, 46]</span><br><span class="line">var max = Math.max.call(null, arr[0], arr[1], arr[2], arr[3], arr[4])//89</span><br></pre></td></tr></table></figure>
<p>可以这么理解：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">obj1.fn() </span><br><span class="line">obj1.fn.call(obj1);</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line">fn1.call(null)</span><br><span class="line"></span><br><span class="line">f1(f2)</span><br><span class="line">f1.call(null,f2)</span><br></pre></td></tr></table></figure>
<p>看一个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    message: <span class="string">&#x27;My name is: &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getName(firstName, lastName) &#123;</span><br><span class="line">    console.log(this.message + firstName + <span class="string">&#x27; &#x27;</span> + lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName.call(obj, <span class="string">&#x27;Dot&#x27;</span>, <span class="string">&#x27;Dolby&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>apply</strong></p>
<p>apply接受两个参数，第一个参数是要绑定给this的值，第二个参数是一个参数数组。当第一个参数为null、undefined的时候，默认指向window。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,89,46]</span><br><span class="line">var max = Math.max.apply(null,arr)//89</span><br></pre></td></tr></table></figure>
<p>可以这么理解：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">obj1.fn() </span><br><span class="line">obj1.fn.apply(obj1);</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line">fn1.apply(null)</span><br><span class="line"></span><br><span class="line">f1(f2)</span><br><span class="line">f1.apply(null,f2)</span><br></pre></td></tr></table></figure>
<p>是不是觉得和前面写的call用法很像，事实上apply 和 call 的用法几乎相同, 唯一的差别在于：当函数需要传递多个变量时, apply 可以接受一个数组作为参数输入, call 则是接受一系列的单独变量。<br>看一个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    message: <span class="string">&#x27;My name is: &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getName(firstName, lastName) &#123;</span><br><span class="line">    console.log(this.message + firstName + <span class="string">&#x27; &#x27;</span> + lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName.apply(obj, [<span class="string">&#x27;Dot&#x27;</span>, <span class="string">&#x27;Dolby&#x27;</span>])// My name is: Dot Dolby</span><br></pre></td></tr></table></figure>
<p>可以看到，obj 是作为函数上下文的对象，函数 getName 中 this 指向了 obj 这个对象。参数 firstName 和 lastName 是放在数组中传入 getName 函数。</p>
<p>call和apply可用来借用别的对象的方法，这里以call()为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var Person1  = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    this.name = <span class="string">&#x27;Dot&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">var Person2 = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    this.getname = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">    Person1.call(this);</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person2();</span><br><span class="line">person.getname();       // Dot</span><br></pre></td></tr></table></figure>
<p>从上面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2 就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。</p>
<p>对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。像上面的找一组数中最大值的例子，当然是用apply合理。</p>
<p><strong>bind</strong></p>
<p>和call很相似，第一个参数是this的指向，从第二个参数开始是接收的参数列表。区别在于bind方法返回值是函数以及bind接收的参数列表的使用。</p>
<ul>
<li><p>bind返回值是函数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Dot&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">printName</span></span>() &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dot = printName.bind(obj)</span><br><span class="line">console.log(dot) // <span class="function"><span class="title">function</span></span> () &#123; … &#125;</span><br><span class="line">dot()  // Dot</span><br></pre></td></tr></table></figure>
<p>bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 printName 中的 this 并没有被改变，依旧指向全局对象 window。</p>
</li>
<li><p>参数的使用</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fn(a, b, c) &#123;</span><br><span class="line">    console.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">var fn1 = fn.bind(null, <span class="string">&#x27;Dot&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fn(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);            // A B C</span><br><span class="line">fn1(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);           // Dot A B</span><br><span class="line">fn1(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);                // Dot B C</span><br><span class="line">fn.call(null, <span class="string">&#x27;Dot&#x27;</span>);      // Dot undefined undefined</span><br></pre></td></tr></table></figure>
<p>call 是把第二个及以后的参数作为 fn 方法的实参传进去，而 fn1 方法的实参实则是在 bind 中参数的基础上再往后排。</p>
<p>有时候我们也用bind方法实现函数珂里化，以下是一个简单的示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var add = <span class="keyword">function</span>(x) &#123;</span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span>(y) &#123;</span><br><span class="line">    <span class="built_in">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var increment = add(1);</span><br><span class="line">var addTen = add(10);</span><br><span class="line"></span><br><span class="line">increment(2);</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">addTen(2);</span><br><span class="line">// 12</span><br></pre></td></tr></table></figure>
<p>在低版本浏览器没有 bind 方法，我们也可以自己实现一个。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Function.prototype.bind) &#123;</span><br><span class="line">    Function.prototype.bind = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var self = this,                        // 保存原函数</span><br><span class="line">            context = [].shift.call(arguments), // 保存需要绑定的this上下文</span><br><span class="line">            args = [].slice.call(arguments);    // 剩余的参数转为数组</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span> () &#123;                    // 返回一个新函数</span><br><span class="line">            self.apply(context, [].concat.call(args, [].slice.call(arguments)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><p>求数组中的最大和最小值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,89,46]</span><br><span class="line">var max = Math.max.apply(null,arr)//89</span><br><span class="line">var min = Math.min.apply(null,arr)//1</span><br></pre></td></tr></table></figure></li>
<li><p>将类数组转化为数组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var trueArr = Array.prototype.slice.call(arrayLike)</span><br></pre></td></tr></table></figure></li>
<li><p>数组追加</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var arr1 = [1,2,3];</span><br><span class="line">var arr2 = [4,5,6];</span><br><span class="line">var total = [].push.apply(arr1, arr2);//6</span><br><span class="line">// arr1 [1, 2, 3, 4, 5, 6]</span><br><span class="line">// arr2 [4,5,6]</span><br></pre></td></tr></table></figure>
<ul>
<li>判断变量类型</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> isArray(obj)&#123;</span><br><span class="line">    <span class="built_in">return</span> Object.prototype.toString.call(obj) == <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">isArray([]) // <span class="literal">true</span></span><br><span class="line">isArray(<span class="string">&#x27;dot&#x27;</span>) // <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>利用call和apply做继承</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,age)&#123;</span><br><span class="line">    // 这里的this都指向实例</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">    this.sayAge = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Female</span></span>()&#123;</span><br><span class="line">    Person.apply(this,arguments)//将父元素所有方法在这里执行一遍就继承了</span><br><span class="line">&#125;</span><br><span class="line">var dot = new Female(<span class="string">&#x27;Dot&#x27;</span>,2)</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 log 代理 console.log</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line">  console.log.apply(console, arguments);</span><br><span class="line">&#125;</span><br><span class="line">// 当然也有更方便的 var <span class="built_in">log</span> = console.log()</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>call、apply和bind函数存在的区别:</strong></p>
<p>bind返回对应函数, 便于稍后调用； apply, call则是立即调用。</p>
<p>除此外, 在 ES6 的箭头函数下, call 和 apply 将失效, 对于箭头函数来说:</p>
<ul>
<li>箭头函数体内的 this 对象, 就是定义时所在的对象, 而不是使用时所在的对象;所以不需要类似于var _this = this这种丑陋的写法</li>
<li>箭头函数不可以当作构造函数，也就是说不可以使用 new 命令, 否则会抛出一个错误</li>
<li>箭头函数不可以使用 arguments 对象,，该对象在函数体内不存在. 如果要用, 可以用 Rest 参数代替</li>
<li>不可以使用 yield 命令, 因此箭头函数不能用作 Generator 函数，什么是Generator函数可自行查阅资料，推荐阅读<a class="link"   href="http://www.ruanyifeng.com/blog/2015/04/generator.html" >阮一峰Generator 函数的含义与用法<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://es6.ruanyifeng.com/#docs/generator-async" >Generator 函数的异步应用<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p> <strong>参考资料：</strong></p>
<p> <a class="link"   href="https://zhuanlan.zhihu.com/p/23804247" >this 的值到底是什么？一次说清楚<i class="fas fa-external-link-alt"></i></a><br> <a class="link"   href="https://www.jianshu.com/p/cc7360f8fd1d" >一次性讲清楚apply/call/bind<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的computed和watch的细节全面分析</title>
    <url>/2020/08/02/Vue%E7%9A%84computed%E5%92%8Cwatch%E7%9A%84%E7%BB%86%E8%8A%82%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="1、computed"><a href="#1、computed" class="headerlink" title="1、computed"></a>1、computed</h3><h4 id="1-1、定义"><a href="#1-1、定义" class="headerlink" title="1.1、定义"></a>1.1、定义</h4><p>是一个计算属性,类似于过滤器,对绑定到view的数据进行处理</p>
<h4 id="1-2、get用法"><a href="#1-2、get用法" class="headerlink" title="1.2、get用法"></a>1.2、get用法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> this.firstName + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fullName不可在data里面定义,<br>如果定义会报如下图片的错误,因为对应的computed作为计算属性定义fullName并返回对应的结果给这个变量,变量不可被重复定义和赋值</p>
<p><img src="https://s1.ax1x.com/2020/08/02/at9Ol6.png" alt="at9Ol6.png"></p>
<h4 id="1-3-get和set用法"><a href="#1-3-get和set用法" class="headerlink" title="1.3 get和set用法"></a>1.3 get和set用法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  fullName：&#123;</span><br><span class="line">   <span class="function"><span class="title">get</span></span>()&#123;//回调函数 当需要读取当前属性值时执行，根据相关数据计算并返回当前属性的值</span><br><span class="line">      <span class="built_in">return</span> this.firstName + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="built_in">set</span>(val)&#123;//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span><br><span class="line">       //val就是fullName的最新属性值</span><br><span class="line">       console.log(val)</span><br><span class="line">        const names = val.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        console.log(names)</span><br><span class="line">        this.firstName = names[0];</span><br><span class="line">        this.lastName = names[1];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、watch"><a href="#2、watch" class="headerlink" title="2、watch"></a>2、watch</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>watch是一个观察的动作</p>
<h4 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">   firstName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">   this.fullName = val + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">lastName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">   this.fullName = this.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>上面是监听firstName和lastName的变化，但是仅限简单数据类型</p>
<h5 id="2-2-1、监听简单数据类型"><a href="#2-2-1、监听简单数据类型" class="headerlink" title="2.2.1、监听简单数据类型"></a>2.2.1、监听简单数据类型</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">      <span class="built_in">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:121</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      <span class="function"><span class="title">first</span></span>()&#123;</span><br><span class="line">        console.log(this.first)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h5 id="2-2-2-监听复杂数据类型"><a href="#2-2-2-监听复杂数据类型" class="headerlink" title="2.2.2 监听复杂数据类型"></a>2.2.2 监听复杂数据类型</h5><p>1、监听复杂数据类型需用深度监听</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">      <span class="built_in">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">          second:0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      secondChange:&#123;</span><br><span class="line">        handler(oldVal,newVal)&#123;</span><br><span class="line">          console.log(oldVal)</span><br><span class="line">          console.log(newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">        deep:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>2、console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化</p>
<p>3、oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue 不会保留修改之前值的副本<br><a class="link"   href="https://cn.vuejs.org/v2/api/#vm-watch" >vm.$watch的深度监听<i class="fas fa-external-link-alt"></i></a> 补充个知识点儿 <a class="link"   href="https://cn.vuejs.org/v2/api/#Vue-nextTick" >Vue.nextTick( [callback, context] )<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://s1.ax1x.com/2020/08/02/at9xmD.png" alt="at9xmD.png"></p>
<p>4、深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p>
<h5 id="2-2-3-监听对象单个属性"><a href="#2-2-3-监听对象单个属性" class="headerlink" title="2.2.3 监听对象单个属性"></a>2.2.3 监听对象单个属性</h5><p>方法一：可以直接对用对象.属性的方法拿到属性</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">            second:0</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">        first.second:<span class="keyword">function</span>(newVal,oldVal)&#123;</span><br><span class="line">        console.log(newVal,oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>方法二：watch如果想要监听对象的单个属性的变化,必须用computed作为中间件转化,因为computed可以取到对应的属性值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">          second:0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      <span class="function"><span class="title">secondChange</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.first.second</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      <span class="function"><span class="title">secondChange</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;second属性值变化了&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="运用场景："><a href="#运用场景：" class="headerlink" title="运用场景："></a>运用场景：</h3><ul>
<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>
<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用watch选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>
</ul>
<h3 id="3、computed和watch的区别"><a href="#3、computed和watch的区别" class="headerlink" title="3、computed和watch的区别"></a>3、computed和watch的区别</h3><h4 id="3-1、computed特性"><a href="#3-1、computed特性" class="headerlink" title="3.1、computed特性"></a>3.1、computed特性</h4><p>1、是计算值，<br>2、应用：就是简化tempalte里面<code>&#123;&#123;&#125;&#125;</code>计算和处理props或$emit的传值<br>3、具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</p>
<h4 id="3-2、watch特性"><a href="#3-2、watch特性" class="headerlink" title="3.2、watch特性"></a>3.2、watch特性</h4><p>1、是观察的动作，<br>2、应用：监听props，$emit或本组件的值执行异步操作<br>3、无缓存性，页面重新渲染时值不变化也会执行</p>
<h3 id="4、props传值"><a href="#4、props传值" class="headerlink" title="4、props传值"></a>4、props传值</h3><h4 id="4-1-常见错误1"><a href="#4-1-常见错误1" class="headerlink" title="4.1 常见错误1"></a>4.1 常见错误1</h4><p>传入的值想作为局部变量来使用,直接使用会</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">props:[<span class="string">&#x27;listShop&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">      <span class="built_in">return</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span></span>()&#123;</span><br><span class="line">      this.listShop=30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错</p>
<p><img src="https://s1.ax1x.com/2020/08/02/at9jOO.png" alt="at9jOO.png"><br>这个错误是说的避免直接修改父组件传入的值,因为会改变父组件的值,贴上<img src="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE" alt="官网介绍"></p>
<h4 id="4-2-解决方案一"><a href="#4-2-解决方案一" class="headerlink" title="4.2 解决方案一"></a>4.2 解决方案一</h4><p>简单数据类型解决方案:<br>所以可以在data中重新定义一个变量,改变指向,但是也只是针对简单数据类型,因为复杂数据类型栈存贮的是指针。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">props:[<span class="string">&#x27;listShop&#x27;</span>],</span><br><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span>&#123;</span><br><span class="line">    listShopChild:this.listShop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span></span>()&#123;</span><br><span class="line">    this.listShopChild=30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以愉快的更改传入的简单数据类型的数据啦!不会有任何报错,也不会影响父组件!</p>
<h5 id="4-2-1-存在的问题"><a href="#4-2-1-存在的问题" class="headerlink" title="4.2.1 存在的问题"></a>4.2.1 存在的问题</h5><p>复杂数据类型在栈中存贮的是指针,所以赋值给新的变量也会改变原始的变量值.那么应该怎么办?<br>1、可以手动深度克隆一个复杂的数据出来,循环或者递归都行</p>
<p>数组深度克隆:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var x = [1,2,3];</span><br><span class="line">var y = [];</span><br><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; x.length; i++) &#123;</span><br><span class="line">    y[i]=x[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(y);  //[1,2,3]</span><br><span class="line">y.push(4);</span><br><span class="line">console.log(y);  //[1,2,3,4]</span><br><span class="line">console.log(x);  //[1,2,3]</span><br></pre></td></tr></table></figure>
<p>对象深度克隆:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var x = &#123;a:1,b:2&#125;;</span><br><span class="line">var y = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(var i <span class="keyword">in</span> x)&#123;</span><br><span class="line">    y[i] = x[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(y);  //Object &#123;a: 1, b: 2&#125;</span><br><span class="line">y.c = 3;</span><br><span class="line">console.log(y);  //Object &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line">console.log(x);  //Object &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>
<p>函数深度克隆:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var x = <span class="function"><span class="title">function</span></span>()&#123;console.log(1);&#125;;</span><br><span class="line">var y = x;</span><br><span class="line">y = <span class="function"><span class="title">function</span></span>()&#123;console.log(2);&#125;;</span><br><span class="line">x();  //1</span><br><span class="line">y();  //2</span><br></pre></td></tr></table></figure>
<p>为什么函数可以直接赋值克隆?<br>由于函数对象克隆之后的对象会单独复制一次并存储实际数据，因此并不会影响克隆之前的对象。所以采用简单的复制“=”即可完成克隆。</p>
<p>2、Object.assign<br>只会对只是一级属性复制，比浅拷贝多深拷贝了一层而已,所以还是无法达到深度克隆的目的.<br><a class="link"   href="https://blog.csdn.net/waiterwaiter/article/details/50267787" >详情<i class="fas fa-external-link-alt"></i></a></p>
<p>3、强大的JSON.stringify和JSON.parse</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const obj1 = JSON.parse(JSON.stringify(obj));</span><br></pre></td></tr></table></figure>
<p>这是ES5新出来的API,先将对象转化为字符串,就是简单数据类型赋值,再用JSON.parse转化</p>
<h4 id="4-3-解决方案二"><a href="#4-3-解决方案二" class="headerlink" title="4.3 解决方案二"></a>4.3 解决方案二</h4><p>直接用computed改变</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="function"><span class="title">listShopChild</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.listShop</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-3-1-存在的问题"><a href="#4-3-1-存在的问题" class="headerlink" title="4.3.1 存在的问题"></a>4.3.1 存在的问题</h5><p>注意:此时用computed时,如果是数组this.$set(arr,1,true)对应的值也不更新，<br>这个很坑，这个bug我找个很久<br>如果传入的值只是在data定义，并未在methods或生命周期钩子更改，直接改变也会报错<br>所以还是可以先用局部变量接收,再修改，这个坑比较多</p>
<h3 id="5、应用"><a href="#5、应用" class="headerlink" title="5、应用"></a>5、应用</h3><p>1、监听本组件计算和监听<br>2、计算或监听父传子的props值<br>3、分为简单数据类型和复杂数据类型监听,监听方法如上watch的使用<br>4、监听vuex的state或者getters值的变化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">stateDemo</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.<span class="variable">$store</span>.state.demoState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">watch:&#123;</span><br><span class="line">    <span class="function"><span class="title">stateDemo</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;vuex变化啦&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、computed和watch的原理分析"><a href="#6、computed和watch的原理分析" class="headerlink" title="6、computed和watch的原理分析"></a>6、computed和watch的原理分析</h3><p>接下来给大家简单罗列下他们的原理!</p>
<h4 id="5-1-computed的原理"><a href="#5-1-computed的原理" class="headerlink" title="5.1 computed的原理"></a>5.1 computed的原理</h4><p><a class="link"   href="https://segmentfault.com/a/1190000010408657" >深入理解 Vue Computed 计算属性<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="5-2-watch的原理"><a href="#5-2-watch的原理" class="headerlink" title="5.2 watch的原理"></a>5.2 watch的原理</h4><p>分为三个过程:实例化Vue、调用$watch方法、属性变化，触发回调</p>
<p><a class="link"   href="https://segmentfault.com/a/1190000010014281#articleHeader2" >Vue的数据依赖实现原理简析<i class="fas fa-external-link-alt"></i></a><br/><br><a class="link"   href="https://www.cnblogs.com/Clarence2J/p/6860329.html" >vue中$watch源码阅读笔记<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="7、简单实现computed和watch"><a href="#7、简单实现computed和watch" class="headerlink" title="7、简单实现computed和watch"></a>7、简单实现computed和watch</h3><p>公共类</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> defineReactive(data, key, val, fn) &#123;</span><br><span class="line">      <span class="built_in">let</span> subs = [] // 新增</span><br><span class="line">      Object.defineProperty(data, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          // 新增</span><br><span class="line">       <span class="keyword">if</span> (data.<span class="variable">$target</span>) &#123;</span><br><span class="line">        subs.push(data.<span class="variable">$target</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> val</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="built_in">set</span>: <span class="keyword">function</span>(newVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="built_in">return</span></span><br><span class="line">      fn &amp;&amp; fn(newVal)</span><br><span class="line">      // 新增</span><br><span class="line">      <span class="keyword">if</span> (subs.length) &#123;</span><br><span class="line">        // 用 setTimeout 因为此时 this.data 还没更新</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          subs.forEach(sub =&gt; sub())</span><br><span class="line">        &#125;, 0)</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-1-computed实现"><a href="#7-1-computed实现" class="headerlink" title="7.1 computed实现"></a>7.1 computed实现</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> computed(ctx, obj) &#123;</span><br><span class="line">  <span class="built_in">let</span> keys = Object.keys(obj)</span><br><span class="line">  <span class="built_in">let</span> dataKeys = Object.keys(ctx.data)</span><br><span class="line">  dataKeys.forEach(dataKey =&gt; &#123;</span><br><span class="line">    defineReactive(ctx.data, dataKey, ctx.data[dataKey])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">let</span> firstComputedObj = keys.reduce((prev, next) =&gt; &#123;</span><br><span class="line">    ctx.data.<span class="variable">$target</span> = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      ctx.setData(&#123; [next]: obj[next].call(ctx) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    prev[next] = obj[next].call(ctx)</span><br><span class="line">    ctx.data.<span class="variable">$target</span> = null</span><br><span class="line">    <span class="built_in">return</span> prev</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">  ctx.setData(firstComputedObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-2-watch实现"><a href="#7-2-watch实现" class="headerlink" title="7.2 watch实现"></a>7.2 watch实现</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> watch(ctx, obj) &#123;</span><br><span class="line">  Object.keys(obj).forEach(key =&gt; &#123;</span><br><span class="line">    defineReactive(ctx.data, key, ctx.data[key], <span class="keyword">function</span>(value) &#123;</span><br><span class="line">      obj[key].call(ctx, value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://segmentfault.com/a/1190000014109601" >在微信小程序里使用 watch 和 computed<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>collapse、overflow、float这些特性相互叠加后会怎么样</title>
    <url>/2020/08/02/collapse%E3%80%81overflow%E3%80%81float%E8%BF%99%E4%BA%9B%E7%89%B9%E6%80%A7%E7%9B%B8%E4%BA%92%E5%8F%A0%E5%8A%A0%E5%90%8E%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</url>
    <content><![CDATA[<h2 id="position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？"><a href="#position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？"></a>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h2><p>这是寒冬大神提出的一个题目，刚开始看到这题的时候完全不知道从什么地方回答起好，题目内容比较广泛，找不到针对点。后来我觉得这个题目应该能拆成几个点来回答：1、’display’、’position’ 和 ‘float’ 的相互关系；2、position跟display、overflow、float下的margin collapse。</p>
<h2 id="一、’display’、’position’-和-‘float’-的相互关系"><a href="#一、’display’、’position’-和-‘float’-的相互关系" class="headerlink" title="一、’display’、’position’ 和 ‘float’ 的相互关系"></a>一、’display’、’position’ 和 ‘float’ 的相互关系</h2><p>首先我们先来看下这3个属性。<br/><br>display 属性规定元素应该生成的框的类型。 block 象块类型元素一样显示，none 缺省值。象行内元素类型一样显示， inline-block 象行内元素一样显示，但其内容象块类型元素一样显示，list-item 象块类型元素一样显示，并添加样式列表标记（display 还有很多其他值设置，读者自行查找）。<br/><br> position 属性规定元素的定位类型。 absolute表示生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位；fixed（老IE不支持）生成绝对定位的元素，相对于浏览器窗口进行定位；relative生成相对定位的元素，相对于其正常位置进行定位；static  默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。<br/><br> Float也是是一种布局方式，它定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 在布局过程中也经常会使用它来达到左右并排布局的效果。<br/><br>那么这三种布局和框形成的关键特性( display )之间有什么关系呢，请看下面流程图：<br/></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsltK.png" alt="aYsltK.png"></p>
<p>转换对应表：</p>
<table>
<thead>
<tr>
<th>设定值</th>
<th>计算值</th>
</tr>
</thead>
<tbody><tr>
<td>inline-table</td>
<td>table</td>
</tr>
<tr>
<td>inline, run-in, table-row-group, table-column, table-column-group, table-header-group, table-footer-group, table-row, table-cell, table-caption, inline-block</td>
<td>block</td>
</tr>
<tr>
<td>其他</td>
<td>同设定值</td>
</tr>
</tbody></table>
<p>总的来说，可以把它看作是一个类似优先级的机制， “position:absolute” 和 “position:fixed” 优先级最高，有它存在的时候，浮动不起作用，’display’ 的值也需要调整； 其次，元素的 ‘float’ 特性的值不是 “none” 的时候或者它是根元素的时候，调整 ‘display’ 的值； 最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’ 特性值同设置值。<br/></p>
<p>这从另一个侧面说明了一个问题：浮动或绝对定位的元素，只能是块元素或表格。<br/></p>
<p><strong>1. ‘display’ 的值为 ‘none’</strong></p>
<p>如果 ‘display’ 的值为 ‘none’，那么 ‘position’ 和 ‘float’ 不起作用。在这种情况下，元素不产生框。因此浮动和定位无效。</p>
<p><strong>2. ‘position’ 的值是 ‘absolute’ 或 ‘fixed’</strong></p>
<p>否则，如果 ‘position’ 的值是 ‘absolute’ 或 ‘fixed’，框就是绝对定位的，’float’ 计算后的值应该是 ‘none’，并且，’display’ 会被按照上表设置。 框的位置将由 ‘top’，’right’，’bottom’ 和 ‘left’ 属性和该框的包含块确定。<br/></p>
<p>也就是说，当元素是绝对定位时，浮动失效，’display’ 会被按规则重置。<br/></p>
<p>示例代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> getStyle(obj, style) &#123;</span><br><span class="line">       var _style = (style == <span class="string">&quot;float&quot;</span>) ? <span class="string">&quot;styleFloat&quot;</span> : style;</span><br><span class="line">       <span class="built_in">return</span> document.defaultView ? document.defaultView.getComputedStyle(obj, null).getPropertyValue(style) : obj.currentStyle[_style.replace(/-[a-z]/g, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">           <span class="built_in">return</span> arguments[0].charAt(1).toUpperCase();</span><br><span class="line">       &#125;)];</span><br><span class="line">    &#125;</span><br><span class="line">    window.onload = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">       document.getElementById(<span class="string">&quot;info&quot;</span>).innerHTML = <span class="string">&quot;float : &quot;</span> + getStyle(document.getElementById(<span class="string">&quot;test&quot;</span>), <span class="string">&quot;float&quot;</span>) +</span><br><span class="line">               <span class="string">&quot;&lt;br/&gt;display : &quot;</span> + getStyle(document.getElementById(<span class="string">&quot;test&quot;</span>), <span class="string">&quot;display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;test&quot;</span> style=<span class="string">&quot;position:absolute; float:left;display:inline;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;info&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面代码中有一个既是绝对定位又是浮动的元素，以上代码可取出其 ‘display’ 和 ‘float’ 的计算值。<br/></p>
<p>IE 中，’float’ 值和 ‘display’ 的特性值未发生变化，还是 “float: left; display: inline”。<br/></p>
<p>其他浏览器中计算后的结果是：”float: none; display: block”。<br/></p>
<p><strong>3. ‘float’ 的值不是 “none”</strong></p>
<p>如果 ‘float’ 的值不是 “none”，该框浮动并且 ‘display’ 会被按照转换对应表设置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> getStyle(obj, style) &#123;</span><br><span class="line">       var _style = (style == <span class="string">&quot;float&quot;</span>) ? <span class="string">&quot;styleFloat&quot;</span> : style;</span><br><span class="line">       <span class="built_in">return</span> document.defaultView ? document.defaultView.getComputedStyle(obj, null).getPropertyValue(style) : obj.currentStyle[_style.replace(/-[a-z]/g, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">           <span class="built_in">return</span> arguments[0].charAt(1).toUpperCase();</span><br><span class="line">       &#125;)];</span><br><span class="line">    &#125;</span><br><span class="line">    window.onload = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">       document.getElementById(<span class="string">&quot;info&quot;</span>).innerHTML = <span class="string">&quot;display : &quot;</span> + getStyle(document.getElementById(<span class="string">&quot;test&quot;</span>), <span class="string">&quot;display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;test&quot;</span> style=<span class="string">&quot;width:100px; height:100px; border:1px solid red;float:left;&quot;</span>&gt;<span class="built_in">float</span> span&lt;/span&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;info&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>按照规则，SPAN 是行内元素，因此不能够设置其宽度和高度。但是浮动后，’display’ 值按照转换对应表设置后，成为块级元素。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsnmR.png" alt="aYsnmR.png"></p>
<p>其他浏览器中：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsu01.png" alt="aYsu01.png"></p>
<p><strong>4. 元素是根元素</strong></p>
<p>如果元素是根元素，’display’ 的值按照转换对应表设置。</p>
<p><strong>5. 否则，应用指定的 ‘display’ 特性值</strong>。</p>
<h2 id="二、position跟display、overflow、float下的margin-collapse。"><a href="#二、position跟display、overflow、float下的margin-collapse。" class="headerlink" title="二、position跟display、overflow、float下的margin collapse。"></a>二、position跟display、overflow、float下的margin collapse。</h2><p>margin collapse我觉得这里的意思应该是Collapsing margins，即外边距折叠，指的是毗邻的两个或多个外边距 (margin) 会合并成一个外边距。<br/></p>
<p>其中所说的 margin 毗邻，可以归结为以下两点：<br/></p>
<ul>
<li>这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开。<br/></li>
<li>这些 margin 都处于普通流中。<br/></li>
</ul>
<p> <strong>1.两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠</strong>。</p>
<p> 注意一点，在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在一个元素的 height 是 “auto” 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。<br/></p>
<p> 示例代码：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;border:1px solid red; width:100px;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin:50px 0; background-color:green; height:50px; width:50px;&quot;</span>&gt;</span><br><span class="line">       &lt;div style=<span class="string">&quot;margin:20px 0;&quot;</span>&gt;</span><br><span class="line">           &lt;div style=<span class="string">&quot;margin:100px 0;&quot;</span>&gt;B&lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p> 效果图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsKTx.png" alt="aYsKTx.png"></p>
<p> 以上代码中，margin 会把 B 的包含块撑开。<br/></p>
<p>如果一个元素的 height 特性的值不是 auto，那么它的 margin-bottom 和它子元素的 margin-bottom 不算相邻，因此，不会发生折叠。 margin-top 没有此限制，所以是 100px，margin-bottom 没有折叠，只有 50px。<br/></p>
<p>垂直方向<br/></p>
<p>是指具体的方位，只有垂直方向的 margin 才会折叠，也就是说，水平方向的 margin 不会发生折叠的现象。<br/></p>
<p><strong>折叠后 margin 的计算</strong></p>
<p><strong>1). 参与折叠的 margin 都是正值</strong></p>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;height:50px; margin-bottom:50px;width:50px; background-color: red;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;height:50px;margin-top:100px; width:50px; background-color: green;&quot;</span>&gt;B&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsQk6.png" alt="aYsQk6.png"></p>
<p>在 margin 都是正数的情况下，取其中 margin 较大的值为最终 margin 值。</p>
<p><strong>2). 参与折叠的 margin 都是负值</strong></p>
<p>当 margin 都是负值的时候，取的是其中绝对值较大的，然后，从 0 位置，负向位移。</p>
<p>示例代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;height:100px; margin-bottom:-75px;width:100px; background-color: red;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;height:100px;margin-top:-50px; margin-left:50px; width:100px; background-color: green;&quot;</span>&gt;B&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYs1fO.png" alt="aYs1fO.png"></p>
<p><strong>3). 参与折叠的 margin 中有正值，有负值</strong></p>
<p>如果，毗邻的 margin 中有正值，同时存在负值会怎样呢？有正有负，先取出负 margin 中绝对值中最大的，然后，和正 margin 值中最大的 margin 相加。</p>
<p>示例代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;height:50px; margin-bottom:-50px;width:50px; background-color: red;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;height:50px;margin-top:100px; width:50px; background-color: green;&quot;</span>&gt;B&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYs8pD.png" alt="aYs8pD.png"></p>
<p>上面的例子最终的 margin 应该是 100 + (-50) = 50px。</p>
<p><strong>4). 相邻的 margin 要一起参与计算，不得分步计算</strong></p>
<p>要注意，相邻的元素不一定非要是兄弟节点，父子节点也可以，即使不是兄弟父子节点也可以相邻。</p>
<p>而且，在计算时，相邻的 margin 要一起参与计算，不得分步计算。</p>
<p>一个复杂的实例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;margin:50px 0;background-color:green; width:50px;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin:-60px 0;&quot;</span>&gt;</span><br><span class="line">           &lt;div style=<span class="string">&quot;margin:150px 0;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;margin:-100px 0;background-color:green; width:50px;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin:-120px 0;&gt;</span></span><br><span class="line"><span class="string">           &lt;div style=&quot;</span>margin:200px 0;<span class="string">&quot;&gt;B&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>错误的计算方式：算 A 和 B 之间的 margin，分别算 A 和其父元素的折叠，然后与其父元素的父元素的折叠，这个值算出来之后，应该是 90px。依此法算出 B 的为 80px；然后，A和B折叠，margin 为 90px。</p>
<p>请注意，多个 margin 相邻折叠成一个 margin，所以计算的时候，应该取所有相关的值一起计算，而不能分开分步来算。</p>
<p>以上例子中，A 和 B 之间的 margin 折叠产生的 margin，是6个相邻 margin 折叠的结果。将其 margin 值分为两组：</p>
<p>正值：50px，150px，200px<br>负值：-60px，-100px，-120px<br>根据有正有负时的计算规则，正值的最大值为 200px，负值中绝对值最大的是 -120px，所以，最终折叠后的 margin 应该是 200 + (-120) = 80px。</p>
<p><strong>2.浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠</strong></p>
<p>浮动元素的 margin 在垂直方向上也不会发生 margin 折叠，即使和它相邻的子元素也不会。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;margin-bottom:50px;width:50px; height:50px; background-color:green;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;margin-top:50px; width:100px; height:100px; background-color:green; float:left;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin-top:50px;background-color:gold;&quot;</span>&gt;B&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsG1e.png" alt="aYsG1e.png"></p>
<p>两个绿色的块儿之间，相距100px，而若 B 和它的浮动包含块发生 margin 折叠的话，金色的条应该位于绿色块的最上方，显然，没有发生折叠。inline-block 元素、绝对定位元素的 margin同样如此， 不会和垂直方向上其他元素的 margin 折叠。</p>
<p><strong>3.创建了块级格式化上下文的元素，不和它的子元素发生 margin 折叠</strong></p>
<p>以 “overflow : hidden” 的元素为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;margin-top:50px; width:100px; height:100px; background-color:green; overflow:hidden;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin-top:50px; background-color:gold;&quot;</span>&gt;B&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>若 B 和它的 “overflow:hidden” 包含块发生 margin 折叠的话，金色的条应该位于绿色块的最上方，否则，没有发生。</p>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsJ6H.png" alt="aYsJ6H.png"></p>
<p><strong>4.元素自身的 margin-bottom 和 margin-top 相邻时也会折叠</strong></p>
<p>自身 margin-bottom 和 margin-top 相邻，只能是自身内容为空，垂直方向上 border、padding 为 0。</p>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;border:1px solid red; width:100px;&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin-top: 100px;margin-bottom: 50px;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码运行后，我们讲得到的是红色边框的正方形，方框的宽高都应该是 100px，高度不应该是 150px。</p>
<p>示意图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsYXd.png" alt="aYsYXd.png"></p>
<p> 参考资料来源: <a class="link"   href="http://www.w3help.org/zh-cn/" >http://www.w3help.org/zh-cn/<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css3中定位模型之position属性的使用方法</title>
    <url>/2020/08/02/css3%E4%B8%AD%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%9E%8B%E4%B9%8Bposition%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、position元素介绍"><a href="#一、position元素介绍" class="headerlink" title="一、position元素介绍"></a>一、position元素介绍</h2><table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
<th>所属类别</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>默认值。没有定位，<br/>元素出现在正常的流中(忽略top,bottom,left,right或者z-index声明)</td>
<td></td>
</tr>
<tr>
<td>relative</td>
<td>元素遵循默认的文档流。<br/>相对于元素的原位置进行移动，周围元素忽略该元素的移动。<br/>需要设置top、bottom、left、right值进行定位</td>
<td>相对定位</td>
</tr>
<tr>
<td>absolute</td>
<td>元素脱离正常的文档流<br/>相对于包含该元素的第一个非静态定位的元素进行定位，<br/>若不满足条件，则会根据最外层的window进行定位。<br/>需要设置top、bottom、left、right值进行定位</td>
<td>绝对定位</td>
</tr>
<tr>
<td>fixed</td>
<td>元素脱离正常文档流。<br/>相对于最外层的window进行定位，固定在屏幕上的某个位置，不因屏幕滚动而消失。<br/>需要设置top、bottom、left、right值进行定位</td>
<td>绝对定位(固定定位)</td>
</tr>
<tr>
<td>inherit</td>
<td>继承父元素的position值</td>
<td></td>
</tr>
</tbody></table>
<p>设置position属性只会让元素脱离文档流，需要设置偏移属性使元素移动。包括4个偏移属性，分别为top、bottom、left、right。</p>
<p>具体描述如下表格所示：</p>
<table>
<thead>
<tr>
<th>偏移属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>表示向元素左端插入多少距离，正值使元素右移多少距离。</td>
</tr>
<tr>
<td>right</td>
<td>表示向元素右端插入多少距离，正值使元素左移多少距离。</td>
</tr>
<tr>
<td>bottom</td>
<td>表示向元素下方插入多少距离，正值使元素上移多少距离。</td>
</tr>
<tr>
<td>top</td>
<td>表示向元素上方插入多少距离，正值使元素下移多少距离。</td>
</tr>
</tbody></table>
<p>偏移属性的值可以为负值，负值时向相同方向移动。一般设置时设置一个或两个偏移量即可。</p>
<p>当元素中设置position为非默认值后，该元素会成为设定位置的元素。在元素变成设定位置后，就成为了最近的绝对定位后代元素的定位参考点，即该元素为设置为绝对定位子元素的第一个非静态定位的元素。</p>
<p>目前所有主流的浏览器都支持position属性的使用，但注意所有IE浏览器均不支持inherit属性值。</p>
<h2 id="二、属性值详细介绍"><a href="#二、属性值详细介绍" class="headerlink" title="二、属性值详细介绍"></a>二、属性值详细介绍</h2><p>首先设置示例的显示内容，分别设定了三个div块元素，并分别设置class属性值。HTML源代码如下：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;div0&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;div1 div&quot;</span>&gt;This is div1.&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;div2 div&quot;</span>&gt;This is div2.&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;div3 div&quot;</span>&gt;This is div3.&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>设置原始示例的显示效果，为了截图容易理解，将body设置为3px的红色边框。包围三个div块的大div块设置1px的黑边框，灰色的背景色以及50%的宽度。三个div块则设置相同的边框和100px的高度。CSS源代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    border: 3px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.div0 &#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    width: 50%;</span><br><span class="line">    background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">    margin: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.div &#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 20px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终的示例效果图如下：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYs9wq.png" alt="aYs9wq.png"></p>
<p>1、<strong>relative</strong>——使元素相对于文档流的位置偏移一段距离</p>
<p>元素遵循默认的文档流，相对于元素的原位置进行移动，周围元素忽略该元素的移动。需要设置top、bottom、left、right的值进行相对定位。<br>举个栗子：设置第二个div块的position属性为relative，并且设置偏移量为向右偏移50px、向下偏移50px。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">    background-color: <span class="comment">#e0e0e0;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    left: 50px;</span><br><span class="line">    top: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到如下效果图中，第一和第三块div块并没有移动位置，说明relative属性值使元素遵循默认的文档流。设置偏移量后，第二块div块则向右、向下分别偏移50px。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsikV.png" alt="aYsikV.png"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">    background-color: <span class="comment">#e0e0e0;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    left: -50px;</span><br><span class="line">    top: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当设置左偏移量为-50px时，则如下图所示，第二元素块向左偏移了50px。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsFYT.png" alt="aYsFYT.png"></p>
<p>2、<strong>absolute</strong>——使元素相对于文档流的位置或最近定位祖先元素的位置偏移一定的距离<br/><br>元素脱离默认的文档流，相对于包含该元素的第一个非静态定位的元素进行定位。需要设置top、bottom、left、right值进行绝对定位。</p>
<p>对于元素，使用width、height可以设置它的尺寸，设定百分数是相对于最近定位祖先元素的尺寸。</p>
<p>举个栗子*2：设置第二个div块的position属性为absolute，并且设置偏移量为向右偏移50px、向下偏移50px。注意此时没有设置该元素的父元素的position值为非默认值。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">    background-color: <span class="comment">#e0e0e0;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 20px;</span><br><span class="line">    top: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以从图中看到，第三块div元素向上移动，第二块元素脱离了原来的文档流。而在没有设置该元素的父元素的position值为非默认值时，第二块div元素块是相对于body的值来向右、向下偏移的。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsEpF.png" alt="aYsEpF.png"></p>
<p> 再来看设置了该元素的父元素的position值为非默认值的情况。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div0 &#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    width: 50%;</span><br><span class="line">    background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">    margin: 50px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 当设置了该元素的父元素的position值为非默认值的情况时，此时的第二块div元素块则是相对于包含三个元素块的大div元素块来进行向右、向下的偏移。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYskfU.png" alt="aYskfU.png"></p>
<p>  3、<strong>fixed</strong>——使元素相对于视口偏移一定的距离<br/></p>
<p>元素脱离默认的文档流，相对于最外层的window进行定位，固定在屏幕上的某个位置，不因屏幕滚动而消失。需要设置top、bottom、left、right值进行定位。</p>
<p>举个栗子*3：设置第二个div块的position属性为fixed，并且设置偏移量为向右偏移20px、向下偏移200px。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">    background-color: <span class="comment">#e0e0e0;</span></span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 20px;</span><br><span class="line">    top: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从图中看出，第二个div元素块的位置在右下角，是相对于视口进行了向左20px、向下200px的偏移。并且在页面滑动时，也会保持着同样的位置不变。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsVl4.png" alt="aYsVl4.png"></p>
<h2 id="三、Z-index"><a href="#三、Z-index" class="headerlink" title="三、Z-index"></a>三、Z-index</h2><p>Z-index可用于设置元素之间的层叠顺序。只对于定位元素有效，即只对于position属性的属性值为absolute、relative和fixed有效。静态定位元素按照文档出现顺序从后往前进行堆叠。设定位置元素忽略文档出现顺序，根据z-index值由小到大的顺序从后往前堆叠，即Z-index的值越高表示元素显示的顺序越优先。设置为负值z-index的设定位置元素位于静态定位元素和非设定位置浮动元素之下。z-index值不必为连续值，其默认值为auto。当设置的值相同时，后加载的元素优先显示。<br/></p>
<p>举个栗子*4：将relative示例的元素设置-index值为-1。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">    background-color: <span class="comment">#e0e0e0;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    left: 50px;</span><br><span class="line">    top: 50px;</span><br><span class="line">    z-index: -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从图中可以看到，当元素的z-index设置为负值时，设定位置元素是位于静态定位元素之下，即是di第二个div元素的父元素div0的位置之下。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYseX9.png" alt="aYseX9.png"></p>
<h2 id="四、实际应用——使用绝对定位显示二级菜单"><a href="#四、实际应用——使用绝对定位显示二级菜单" class="headerlink" title="四、实际应用——使用绝对定位显示二级菜单"></a>四、实际应用——使用绝对定位显示二级菜单</h2><p>使用无序列表和Flex布局导航栏菜单，HTML源代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;ul class=<span class="string">&quot;MenuWrap&quot;</span>&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;ListItem1&quot;</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem&quot;</span> &gt;Home&lt;/a&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;MenuWrap2&quot;</span> id=<span class="string">&quot;MenuWrap2&quot;</span>&gt;</span><br><span class="line">             &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem2&quot;</span>&gt;Item1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem2&quot;</span>&gt;Item2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem2&quot;</span>&gt;Item3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;ListItem2&quot;</span>&gt;&lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem&quot;</span>&gt;About&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;ListItem3&quot;</span>&gt;&lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;ListItem&quot;</span>&gt;Products&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt; </span><br></pre></td></tr></table></figure>
<p>将包裹二级菜单的ul元素设置的position属性设置为非默认值relative。再将二级菜单的position属性设置为绝对定位，根据一级菜单的高度设置偏移量。并且将二级菜单的显示方式display属性设置为none值表示不显示。最后再通过JavaScript设置鼠标悬浮经过一级菜单栏时显示二级菜单栏。CSS源代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.MenuWrap &#123;</span><br><span class="line">    background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">    min-height: 2.75em;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.ListItem &#123;</span><br><span class="line">    color: black;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    padding:0px 20px;</span><br><span class="line">&#125;</span><br><span class="line">ul.MenuWrap2 &#123;</span><br><span class="line">    padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.MenuWrap2 &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">    min-width: 4.5em;</span><br><span class="line">    text-align: center;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 2.75em;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">.MenuWrap2 li &#123;</span><br><span class="line">    padding-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.ListItem2 &#123;</span><br><span class="line">    color:black;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>元素的定位模型中需要区分每个属性值的不同定位方式，分为绝对定位、相对定位、固定定位以及默认定位和继承父元素。其中绝对定位和固定定位都脱离原本的文档流，而相对定位则遵循原本的文档流。设置元素的定位方式后，还需要指定偏移量。可以从上、右、下、左四个方向进行偏移。并且可以利用Z-index属性设置元素之间的层叠顺序。</p>
<p>定位模型是在CSS中设置元素位置的重要方式之一，使用该模型可以实现页面常用的菜单导航、悬浮公告等效果。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css优先级和权重问题以及important优先级</title>
    <url>/2020/08/02/css%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E6%9D%83%E9%87%8D%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Aimportant%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="css优先级和权重问题以及-important优先级"><a href="#css优先级和权重问题以及-important优先级" class="headerlink" title="css优先级和权重问题以及!important优先级"></a>css优先级和权重问题以及!important优先级</h2><p>css选择器大致可以分为四类：<br/></p>
<ul>
<li>行内样式;<br/></li>
<li>id选择器;<br/></li>
<li>class选择器;<br/></li>
<li>元素选择器;<br/></li>
</ul>
<p>这四种选择器可以根据权重和权值比较决定渲染谁先谁后，谁大谁小。<br/></p>
<ul>
<li>一个selector的权重表示方式：0.0.0.0，按照计算规则给每位填充数字，对应位置相等，则比较下一位；<br/></li>
<li>也有分别以1000、100、10、1四个权值系数对CSS选择器进行权重计算;<br/></li>
</ul>
<table>
<thead>
<tr>
<th>选择器类别</th>
<th>说明</th>
<th>权重表示</th>
<th>权值表示</th>
</tr>
</thead>
<tbody><tr>
<td>行内样式</td>
<td>行内只有一个 style = “”</td>
<td>（1.0.0.0）｜1000</td>
<td></td>
</tr>
<tr>
<td>id选择器</td>
<td>selector中使用了几个id，即#的个数</td>
<td>（0.1.0.0）｜ 100</td>
<td></td>
</tr>
<tr>
<td>类选择器</td>
<td>类,伪类,以及属性的个数<br/>如： .outerClass .buttonClass[type=”button”]:hover{}<br/>选择器中有2个类,1个属性,1个伪类</td>
<td>（0.0.1.0）｜ 10</td>
<td></td>
</tr>
<tr>
<td>元素选择器</td>
<td>伪元素和标签元素的个数，如： p:first-child<br/>选择器中有一个标签元素p和一个伪元素first-child</td>
<td>（0.0.0.1）｜ 1</td>
<td></td>
</tr>
</tbody></table>
<p> 张鑫旭大神的<a class="link"   href="https://www.zhangxinxu.com/study/201208/256-class-fire-an-id.html" >256个class类名选择器干掉一个id选择器实例页面<i class="fas fa-external-link-alt"></i></a> ，我试了下256个好像也不行。。。</p>
<h1 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：<br/></h1><ul>
<li>!important 表示强制应用该样式，例如：button{ width: 150px !important;}，与以上的选择器相遇时，强制使用此样式；</li>
<li>如果比较后权重相同，那么后者覆盖前者，后渲染的胜出；</li>
<li>内联样式  &gt; id选择器样式 &gt; 类选择器样式 &gt; 元素选择器样式；</li>
<li>CSS选择器的使用，应该尽量避免使用 !important 和 内联样式；id通常也是与class区分开使用，前者多用于JS中的结点定位，后者多用于CSS选择器。</li>
<li>重中之重，1000/100/10/1这种权值系数的比较方式只是便于理解，真实情况下10个class并不能逆转1个id。</li>
</ul>
<h1 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:<br/></h1><p>对权重排序正确的是：<br/><br>a) .list .box p 10 + 10 + 1 + 1 = 22 <br/><br>b) #list .box div span 100 + 10 + 1 +1 = 112 <br/><br>c) .list span 10 + 1 = 11 <br/><br>d) #list #box 100 + 100 = 200 <br/><br>e) p:last-child 1 = 1 <br/><br>f) style 1000 = 10000 <br/></p>
<p>f&gt;d&gt;b&gt;a&gt;c&gt;e</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>flex</title>
    <url>/2020/08/02/flex/</url>
    <content><![CDATA[<p><a class="link"   href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" >Flex 布局教程：语法篇<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" >Flex 布局教程：实例篇<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" >grid布局<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>jsonp原理</title>
    <url>/2020/12/16/jsonp%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>在学习jsonp之前首先要明白以下几点：<br>首先确定为什么要用jsonp，因为要跨域请求数据，那为什么会发生跨域呢，</p>
<p>因为浏览器的同源策略，那什么是同源策略呢浏览器从A网站向B网站请求资源，必须同时满足三点才可以，协议，域名，端口相同，任何一点不同都会产生跨域，产生跨域后，浏览器就会阻止数据返回。</p>
<p>人们为了满足在不同的域名间传递数据，发明了jsonp技术：</p>
<p>在学习jsonp之前，大家可以思考一下，一张网页中哪些标签是可以跨域请求资源的，我们知道，在页面上有三种资源是可以与页面本身不同源的。它们是：js脚本，css样式文件，图片：</p>
<p>1）<script type="text/javascript" src="某个cdn地址" ></script></p>
<p>2）<link type="text/css" rel="stylesheet" href="某个cdn地址" /></p>
<p>3）<img src="某个cdn地址" alt=""/></p>
<p>以上三种资源是可以发生跨域后，而资源可以返回的；</p>
<p>而jsonp就是利用了<code>&lt;script&gt;</code>标签可以链接到不同源的js脚本来到达跨域目的。当链接的资源到达浏览器时，浏览器会根据他们的类型来采取不同的处理方式，比如，如果是css文件，则会进行对页面 repaint，如果是img 则会将图片渲染出来，如果是script 脚本，则会进行执行，比如我们在页面引入了jquery库，为什么就可以使用 $ 了呢？就是因为 jquery 库被浏览器执行之后，会给全局对象window增加一个属性： $ ，所以我们才能使用 $ 来进行各种处理。</p>
<p>重点：浏览器会根据他们的类型采用不同的处理方式，js文件则会执行。</p>
<p>通常一般我们利用ajax请求某些接口返回的数据，基本都是json格式，而jsonp请求返回的数据，是什么呢，咱们来看一条完整的jsop请求和其返回的数据：</p>
<p><a href="https://imgchr.com/i/r6ZT39"><img src="https://s3.ax1x.com/2020/12/23/r6ZT39.png" alt="r6ZT39.png"></a></p>
<p>前端工程师通过callback向后端传递了一个abc字符串，后端呢将数据包裹在 abc（）中返回，</p>
<p>签名提到过了，浏览器会根据不同的文件类型进行不同的处理，咱们利用的是javascript，所以返回的数据会被解析为，js文件，而上面的数据如果被解析为js文件，就会被执行；</p>
<p>这就是 jsonp 的基本原理，利用script标签的特性，将数据使用json格式用一个函数包裹起来，然后在进行访问的页面中定义一个相同函数名的函数，因为 script 标签src引用的js脚本到达浏览器时会执行，而我们已经定义了一个同名的函数，所以json格式的数据，就作为参数传递给了我们定义的同名函数了。这样就完成了跨域数据交换。jsonp的含义是：json with padding，而在json数据外包裹它的那个函数。<br>附上封装的jsop的代码：</p>
<p><a href="https://imgchr.com/i/r6eEE8"><img src="https://s3.ax1x.com/2020/12/23/r6eEE8.jpg" alt="r6eEE8.jpg"></a></p>
<p>以上便是利用jquery的风格封装得到jsonp函数，</p>
<p>在和第三方接口调用或者和后端工程师交互式，一定要实现沟通好，向后端传递参数名时，用的什么参数，jquery默认用的是callback，</p>
<p>举个例子：</p>
<p>百度的jsonp用的是</p>
<p><a href="https://imgchr.com/i/r6eavR"><img src="https://s3.ax1x.com/2020/12/23/r6eavR.png" alt="r6eavR.png"></a></p>
<p>百度用的是cb传递的；</p>
<p>现在咱们看一看上面封装的代码：</p>
<p>有一句非常关键，就是在window上通过变量挂载了一个Cname的属性，而这个属性是个变量，</p>
<p>变量值为一个很长的字符串，而cname这个属性是一个函数，这个函数就是，jsonp返回函数调用后，调用的函数。</p>
]]></content>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>jsonp返回的数据格式与普通json的区别</title>
    <url>/2020/08/02/jsonp%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E4%B8%8E%E6%99%AE%E9%80%9Ajson%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><a class="link"   href="https://segmentfault.com/q/1010000008772557/a-1020000008775449" >jsonp返回的数据格式与普通json的区别<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>html相关面试题</title>
    <url>/2020/08/02/html%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、什么是HTML语义化标签"><a href="#一、什么是HTML语义化标签" class="headerlink" title="一、什么是HTML语义化标签"></a>一、什么是HTML语义化标签</h3><p>语义化的标签，说明让标签有自己的含义。</p>
<p>一行文字</p>

<p><span>一行文字</span></p>
<p>如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签则没有独特的含义。</p>
<p>二、语义化标签的特点</p>
<p>代码结构清晰，方便阅读，有利于团队合作开发。</p>
<p>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。</p>
<p>有利于搜索引擎优化（SEO）。</p>
<p>便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p>
<p>三、常见的语义化标签</p>
<p>因此我们在写页面结构时，应尽量使用有 语义的HTML 标签</p>
<p><code>&lt;title&gt;</code>：页面主体内容。</p>
<p><code>&lt;hn&gt;</code>：h1~h6，分级标题，<code>&lt;h1&gt;</code> 与 <code>&lt;title&gt;</code> 协调有利于搜索引擎优化。</p>
<p><code>&lt;ul&gt;</code>：无序列表。</p>
<p><code>&lt;ol&gt;</code>：有序列表。</p>
<p><code>&lt;header&gt;</code>：页眉通常包括网站标志、主导航、全站链接以及搜索框。</p>
<p><code>&lt;nav&gt;</code>：标记导航，仅对文档中重要的链接群使用。</p>
<p><code>&lt;main&gt;</code>：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。</p>
<p><code>&lt;article&gt;</code>：定义外部的内容，其中的内容独立于文档的其余部分。</p>
<p><code>&lt;section&gt;</code>：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p>
<p><code>&lt;aside&gt;</code>：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。</p>
<p><code>&lt;footer&gt;</code>：页脚，只有当父级是body时，才是整个页面的页脚。</p>
<p><code>&lt;small&gt;</code>：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</p>
<p><code>&lt;strong&gt;</code>：和 em 标签一样，用于强调文本，但它强调的程度更强一些。</p>
<p><code>&lt;em&gt;</code>：将其中的文本表示为强调的内容，表现为斜体。</p>
<p><code>&lt;mark&gt;</code>：使用黄色突出显示部分文本。</p>
<p><code>&lt;figure&gt;</code>：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。</p>
<p><code>&lt;figcaption&gt;</code>：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。</p>
<p><code>&lt;cite&gt;</code>：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。</p>
<p><code>&lt;blockquoto&gt;</code>：定义块引用，块引用拥有它们自己的空间。</p>
<p><code>&lt;q&gt;</code>：短的引述（跨浏览器问题，尽量避免使用）。</p>
<p><code>&lt;time&gt;</code>：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。</p>
<p><code>&lt;abbr&gt;</code>：简称或缩写。</p>
<p><code>&lt;dfn&gt;</code>：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。</p>
<p><code>&lt;del&gt;</code>：移除的内容。</p>
<p><code>&lt;ins&gt;</code>：添加的内容。</p>
<p><code>&lt;code&gt;</code>：标记代码。</p>
<p><code>&lt;meter&gt;</code>：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）</p>
<p><code>&lt;progress&gt;</code>：定义运行中的进度（进程）。</p>
<h3 id="二、什么是回流，什么是重绘，有什么区别？"><a href="#二、什么是回流，什么是重绘，有什么区别？" class="headerlink" title="二、什么是回流，什么是重绘，有什么区别？"></a>二、什么是回流，什么是重绘，有什么区别？</h3><h4 id="html-加载时发生了什么"><a href="#html-加载时发生了什么" class="headerlink" title="html 加载时发生了什么"></a>html 加载时发生了什么</h4><p>在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。<br>浏览器把所有样式(用户定义的CSS和用户代理)解析成样式结构体<br>DOM Tree 和样式结构体组合后构建render tree, render tree类似于DOM tree，但区别很大，因为render tree能识别样式，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。我自己简单的理解就是DOM Tree和我们写的CSS结合在一起之后，渲染出了render tree。</p>
<h4 id="什么是回流"><a href="#什么是回流" class="headerlink" title="什么是回流"></a>什么是回流</h4><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。</p>
<h4 id="什么是重绘"><a href="#什么是重绘" class="headerlink" title="什么是重绘"></a>什么是重绘</h4><p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>他们的区别很大：<br>回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流<br>当页面布局和几何属性改变时就需要回流<br>比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</p>
<h4 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h4><p>能得知回流比重绘的代价要更高，回流的花销跟render tree有多少节点需要重新构建有关系<br>因为这些机制的存在，所以浏览器会帮助我们优化这些操作，浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>
<h4 id="触发重排途径"><a href="#触发重排途径" class="headerlink" title="触发重排途径"></a>触发重排途径</h4><h5 id="添加、删除或改变元素的可见性"><a href="#添加、删除或改变元素的可见性" class="headerlink" title="添加、删除或改变元素的可见性"></a>添加、删除或改变元素的可见性</h5><p>使用JavaScript更改DOM会导致回流</p>
<h5 id="添加、删除或改变css样式"><a href="#添加、删除或改变css样式" class="headerlink" title="添加、删除或改变css样式"></a>添加、删除或改变css样式</h5><p>直接应用CSS样式或者类名都可能会改变布局。比如更改元素的宽度会影响同一DOM树及其周围的所有元素</p>
<h5 id="CSS3-animations-和-transitions"><a href="#CSS3-animations-和-transitions" class="headerlink" title="CSS3 animations 和 transitions"></a>CSS3 animations 和 transitions</h5><p>动画的每一帧都会引起回流</p>
<h5 id="用offsetWidth-和-offsetHeight"><a href="#用offsetWidth-和-offsetHeight" class="headerlink" title="用offsetWidth 和 offsetHeight"></a>用offsetWidth 和 offsetHeight</h5><p>读取元素的<code>offsetWidth</code>和<code>offsetHeight</code>属性会触发回流来计算属性值。</p>
<h5 id="用户行为"><a href="#用户行为" class="headerlink" title="用户行为"></a>用户行为</h5><p>一些用户行为会触发回流，比如：hover、在输入框中输入文本、调整窗口大小、更改字体大小、切换样式表或字体。</p>
<h4 id="减少回流和重绘的技巧"><a href="#减少回流和重绘的技巧" class="headerlink" title="减少回流和重绘的技巧"></a>减少回流和重绘的技巧</h4><p>减少回流、重绘其实就是需要减少对render tree的操作，并减少对一些style信息的请求。</p>
<p>具体方法：</p>
<h5 id="1、不要1个1个改变元素的样式属性，最好直接改变className，但className是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用cssText来改变，见下面代码："><a href="#1、不要1个1个改变元素的样式属性，最好直接改变className，但className是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用cssText来改变，见下面代码：" class="headerlink" title="1、不要1个1个改变元素的样式属性，最好直接改变className，但className是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用cssText来改变，见下面代码："></a>1、不要1个1个改变元素的样式属性，最好直接改变className，但className是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用cssText来改变，见下面代码：</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 不好的写法  </span><br><span class="line">var left = 1;  </span><br><span class="line">var top = 1;  </span><br><span class="line">el.style.left = left + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line">el.style.top  = top  + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line"> </span><br><span class="line">// 比较好的写法   </span><br><span class="line">el.className += <span class="string">&quot; className1&quot;</span>;  </span><br><span class="line"> </span><br><span class="line">// 比较好的写法   </span><br><span class="line">el.style.cssText += <span class="string">&quot;; left: &quot;</span> + left + <span class="string">&quot;px; top: &quot;</span> + top + <span class="string">&quot;px;&quot;</span>; </span><br></pre></td></tr></table></figure>
<h5 id="2、让要操作的元素进行”离线处理”，处理完后一起更新，这里所谓的”离线处理”即让元素不存在于render-tree中，比如："><a href="#2、让要操作的元素进行”离线处理”，处理完后一起更新，这里所谓的”离线处理”即让元素不存在于render-tree中，比如：" class="headerlink" title="2、让要操作的元素进行”离线处理”，处理完后一起更新，这里所谓的”离线处理”即让元素不存在于render tree中，比如："></a>2、让要操作的元素进行”离线处理”，处理完后一起更新，这里所谓的”离线处理”即让元素不存在于render tree中，比如：</h5><p>a) 使用documentFragment或div等元素进行缓存操作，这个主要用于添加元素的时候，大家应该都用过，就是先把所有要添加的元素添加到1个div(这个div也是新加的)，最后才把这个div append到body中。</p>
<p>b) 先display:none 隐藏元素，然后对该元素进行所有的操作，最后再显示该元素。因对display:none的元素进行操作不会引起回流、重绘。所以只要操作只会有2次回流。</p>
<h5 id="3、不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了，见下面代码："><a href="#3、不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了，见下面代码：" class="headerlink" title="3、不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了，见下面代码："></a>3、不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了，见下面代码：</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 别这样写  </span><br><span class="line"><span class="keyword">for</span>(循环) &#123;  </span><br><span class="line">    elel.style.left = el.offsetLeft + 5 + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line">    elel.style.top  = el.offsetTop  + 5 + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">// 这样写好点  </span><br><span class="line">var left = el.offsetLeft,top  = el.offsetTop,s = el.style;  </span><br><span class="line"><span class="keyword">for</span>(循环) &#123;  </span><br><span class="line">    left += 10;  </span><br><span class="line">    top  += 10;  </span><br><span class="line">    s.left = left + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line">    s.top  = top  + <span class="string">&quot;px&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4、操作会影响到render-tree中的多少节点以及影响的方式，影响越多，花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果，想想下面2种移动的方法："><a href="#4、操作会影响到render-tree中的多少节点以及影响的方式，影响越多，花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果，想想下面2种移动的方法：" class="headerlink" title="4、操作会影响到render tree中的多少节点以及影响的方式，影响越多，花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果，想想下面2种移动的方法："></a>4、操作会影响到render tree中的多少节点以及影响的方式，影响越多，花费肯定就越多。比如现在很多人使用jquery的animate方法移动元素来展示一些动画效果，想想下面2种移动的方法：</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// block1是position:absolute 定位的元素，它移动会影响到它父元素下的所有子元素。  </span><br><span class="line">// 因为在它移动过程中，所有子元素需要判断block1的z-index是否在自己的上面，  </span><br><span class="line">// 如果是在自己的上面,则需要重绘,这里不会引起回流  </span><br><span class="line">$(<span class="string">&quot;#block1&quot;</span>).animate(&#123;left:50&#125;);  </span><br><span class="line">// block2是相对定位的元素,这个影响的元素与block1一样，但是因为block2非绝对定位  </span><br><span class="line">// 而且改变的是marginLeft属性，所以这里每次改变不但会影响重绘，  </span><br><span class="line">// 还会引起父元素及其下元素的回流  </span><br><span class="line">$(<span class="string">&quot;#block2&quot;</span>).animate(&#123;marginLeft:50&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="使用最佳布局方案"><a href="#使用最佳布局方案" class="headerlink" title="使用最佳布局方案"></a>使用最佳布局方案</h5><p>不要使用内联样式和table布局！<br>内联样式会在下载HTML时影响布局，并触发额外的reflow。<br>table布局开销很大，因为解析器需要多次传递去计算单元格维度，使用table时应用fixed定位有一定的优化效果，因为列的宽度是基于标题行的内容。<br>主页面布局应用flexbox也会有性能影响，因为在HTML下载的时候，flex items的位置和尺寸可能会变化。</p>
<h5 id="最小化CSS规则的数量"><a href="#最小化CSS规则的数量" class="headerlink" title="最小化CSS规则的数量"></a>最小化CSS规则的数量</h5><p>css规则越少，重排越快，要尽量避免复杂的css选择器。<br>如果您使用的是Bootstrap这样的框架，那么这一点尤其成问题——很少有站点使用了框架提供的所有样式。像Unused CSS、uCSS、grunt-uncss和gulp-uncss这样的工具可以显著减少样式定义和文件大小。</p>
<h5 id="最小化DOM层级"><a href="#最小化DOM层级" class="headerlink" title="最小化DOM层级"></a>最小化DOM层级</h5><p>稍微复杂一点——减小DOM树大小和每个分支的元素数量。文档越小越浅，回流越快。如果不需要支持古老的浏览器，可以删除不必要的包裹元素</p>
<h5 id="从文档流中移除复杂的动效"><a href="#从文档流中移除复杂的动效" class="headerlink" title="从文档流中移除复杂的动效"></a>从文档流中移除复杂的动效</h5><p>通过使用<code>position: absolute;</code> 或者 <code>position: fixed;</code>来使有动效的元素脱离文档流，这可以在不影响文档流中的其它元素的情况下更新尺寸和位置。</p>
<h5 id="更新隐藏的元素"><a href="#更新隐藏的元素" class="headerlink" title="更新隐藏的元素"></a>更新隐藏的元素</h5><p>通过<code>display: none;</code>来隐藏的元素在改变时不会触发重绘和重排，可以的话，在元素可见之前进行更改。</p>
<h4 id="行内元素和块级元素的区别"><a href="#行内元素和块级元素的区别" class="headerlink" title="行内元素和块级元素的区别"></a>行内元素和块级元素的区别</h4><p><strong>1）、行内元素</strong></p>
<p>①：设置宽高无效</p>
<p>②：对margin设置左右方向有效，而上下无效，padding设置都无效</p>
<p>③：不会自动换行</p>
<p><strong>2）、块级元素</strong></p>
<p>①：可以设置宽高</p>
<p>②：设置margin和padding都有效</p>
<p>③：可以自动换行</p>
<p>④：多个块状，默认排列从上到下</p>
<h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><p>数字递归求和：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> sum (n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == 0) <span class="built_in">return</span> 0;</span><br><span class="line">    <span class="built_in">return</span> n + sum(n-1)</span><br><span class="line">&#125;</span><br><span class="line">console.log(sum(100))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>flex之flex为1的含义</title>
    <url>/2020/12/30/flex%E4%B9%8Bflex%E4%B8%BA1%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<h4 id="一-flex是由三个属性组成"><a href="#一-flex是由三个属性组成" class="headerlink" title="一. flex是由三个属性组成:"></a>一. flex是由三个属性组成:</h4><h5 id="1-flex-grow-存在剩余空间-为正-分配"><a href="#1-flex-grow-存在剩余空间-为正-分配" class="headerlink" title="1. flex-grow: 存在剩余空间, 为正, 分配"></a>1. flex-grow: 存在剩余空间, 为正, 分配</h5><p>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。在「flex」属性中该值如果被省略则默认为1.</p>
<h5 id="取值："><a href="#取值：" class="headerlink" title="取值："></a>取值：</h5><p>number：用数值来定义扩展比率。不允许负值</p>
<p>适用于：flex子项</p>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>设置或检索弹性盒的扩展比率。<br>根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。</p>
<p>eg:<br><a href="https://imgchr.com/i/rOzZeU"><img src="https://s3.ax1x.com/2020/12/30/rOzZeU.jpg" alt="rOzZeU.jpg"></a></p>
<p><a href="https://imgchr.com/i/rOztTe"><img src="https://s3.ax1x.com/2020/12/30/rOztTe.jpg" alt="rOztTe.jpg"></a></p>
<h4 id="2-flex-shrink-不存在剩余空间-为负-计算收缩比例"><a href="#2-flex-shrink-不存在剩余空间-为负-计算收缩比例" class="headerlink" title="2. flex-shrink: 不存在剩余空间, 为负, 计算收缩比例"></a>2. flex-shrink: 不存在剩余空间, 为负, 计算收缩比例</h4><p>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>
<h4 id="取值：-1"><a href="#取值：-1" class="headerlink" title="取值："></a>取值：</h4><p>number：用数值来定义收缩比率。不允许负值</p>
<p>适用于：flex子项</p>
<h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><p>设置或检索弹性盒的收缩比率。<br>根据弹性盒子元素所设置的收缩因子作为比率来收缩空间。</p>
<p><a href="https://imgchr.com/i/rOzcTg"><img src="https://s3.ax1x.com/2020/12/30/rOzcTg.jpg" alt="rOzcTg.jpg"></a></p>
<p><a href="https://imgchr.com/i/rOz70U"><img src="https://s3.ax1x.com/2020/12/30/rOz70U.jpg" alt="rOz70U.jpg"></a></p>
<h4 id="3-flex-basis-分配剩余空间前-定义宽度"><a href="#3-flex-basis-分配剩余空间前-定义宽度" class="headerlink" title="3. flex-basis: 分配剩余空间前, 定义宽度"></a>3. flex-basis: 分配剩余空间前, 定义宽度</h4><p>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<br>在「flex」属性中该值如果被省略则默认为「0%」<br>在「flex」属性中该值如果被指定为「auto」，则伸缩基准值的计算值是自身的 &lt;’ width ‘&gt; 设置，如果自身的宽度没有定义，则长度取决于内容。</p>
<h5 id="取值：-2"><a href="#取值：-2" class="headerlink" title="取值："></a>取值：</h5><p>length：用长度值来定义宽度。不允许负值<br>percent：用百分比来定义宽度。不允许负值<br>auto：无特定宽度值，取决于其它属性值<br>content：基于内容自动计算宽度</p>
<p>适用于：flex子项</p>
<h5 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h5><p>设置或检索弹性盒伸缩基准值。<br>如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间<br>对应的脚本特性为flexBasis。</p>
<h4 id="二-flex"><a href="#二-flex" class="headerlink" title="二. flex:"></a>二. flex:</h4><h4 id="说明：-3"><a href="#说明：-3" class="headerlink" title="说明："></a>说明：</h4><p>复合属性。设置或检索弹性盒模型对象的子元素如何分配空间。<br>如果缩写「flex: 1」, 则其计算值为「1 1 0%」<br>如果缩写「flex: auto」, 则其计算值为「1 1 auto」<br>如果「flex: none」, 则其计算值为「0 0 auto」<br>如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值 </p>
<p>flex属性默认是0 1 auto<br>flex-grow为0，则存在剩余空间也不放大<br>flex-shrink为1，则空间不足该项目缩小<br>flex-basis为auto，则该项目本来的大小</p>
<p>eg1:</p>
<p>页面设计中用到了flex:1, 具体什么意思呢, 说说我自己的理解.</p>
<p><a href="https://imgchr.com/i/rXS1hj"><img src="https://s3.ax1x.com/2020/12/30/rXS1hj.jpg" alt="rXS1hj.jpg"></a></p>
<p>解析:</p>
<p>flex-grow:1; 有剩余空间, 分配</p>
<p>flex-shrink:1; 没有剩余空间, 收缩</p>
<p>flex-basis:0%; 没有基础宽度</p>
<p><a href="https://imgchr.com/i/rXS7vt"><img src="https://s3.ax1x.com/2020/12/30/rXS7vt.jpg" alt="rXS7vt.jpg"></a></p>
]]></content>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>js判断变量是不是数组的方法</title>
    <url>/2020/11/24/js%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="方案一：-instanceof"><a href="#方案一：-instanceof" class="headerlink" title="方案一： instanceof"></a>方案一： instanceof</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">变量 instanceof 类型  返回的是布尔值  <span class="literal">true</span> <span class="literal">false</span>&lt;br&gt;例: var a = []   a instanceof Array</span><br></pre></td></tr></table></figure>
<h4 id="方案二：-原型prototype-toString-call"><a href="#方案二：-原型prototype-toString-call" class="headerlink" title="方案二： 原型prototype + toString +  call()"></a>方案二： 原型prototype + toString +  call()</h4><p><a href="https://imgchr.com/i/DYq1xS"><img src="https://s3.ax1x.com/2020/11/24/DYq1xS.png" alt="DYq1xS.png"></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">首先: Object.prototype.toString.call(variable)来判断，返回值是字符串</span><br><span class="line">其次: Object.prototype.toString.call(variable).indexOf(<span class="string">&#x27;Array&#x27;</span>) 如果变量对象是纯数组，返回的数字不是-1</span><br><span class="line">最后: Object.prototype.toString.call(variable).indexOf(<span class="string">&#x27;Array&#x27;</span>) !== -1 比对数值是否等于-1就能判断是否是数组类型 是为<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="方案三：原型prototype-isPrototypeOf"><a href="#方案三：原型prototype-isPrototypeOf" class="headerlink" title="方案三：原型prototype + isPrototypeOf()"></a>方案三：原型prototype + isPrototypeOf()</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Array.prototype.isPrototypeOf(variable) </span><br></pre></td></tr></table></figure>
<h5 id="isPrototypeOf-函数-用于指示对象是否存在于一个对象的原型链中。如果存在返回true，反之返回false。该方法属Object对象，由于所有的对象都继承了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。如果variable的原型链中存在Array对象，就会返回true，也就说明variable是数组类型。"><a href="#isPrototypeOf-函数-用于指示对象是否存在于一个对象的原型链中。如果存在返回true，反之返回false。该方法属Object对象，由于所有的对象都继承了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。如果variable的原型链中存在Array对象，就会返回true，也就说明variable是数组类型。" class="headerlink" title="isPrototypeOf() 函数 : 用于指示对象是否存在于一个对象的原型链中。如果存在返回true，反之返回false。该方法属Object对象，由于所有的对象都继承了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。如果variable的原型链中存在Array对象，就会返回true，也就说明variable是数组类型。"></a>isPrototypeOf() 函数 : 用于指示对象是否存在于一个对象的原型链中。如果存在返回true，反之返回false。该方法属Object对象，由于所有的对象都继承了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。如果variable的原型链中存在Array对象，就会返回true，也就说明variable是数组类型。</h5><h4 id="方案四：构造函数-constructor"><a href="#方案四：构造函数-constructor" class="headerlink" title="方案四：构造函数 constructor"></a>方案四：构造函数 constructor</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">variable.constructor</span><br><span class="line">variable.constructor.toString()</span><br><span class="line">variable.constructor.toString().indexOf(<span class="string">&quot;Array&quot;</span>) ！== -1</span><br></pre></td></tr></table></figure>
<p>一个数组类型的实例，其原型<strong>proto</strong>.constructor右边是Array关键字，再拿到字符串，最后查找字符串中Array关键字的位置是否等于-1</p>
<h4 id="方案五：数组方法-isArray"><a href="#方案五：数组方法-isArray" class="headerlink" title="方案五：数组方法 isArray()"></a>方案五：数组方法 isArray()</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Array.isArray(variable)</span><br></pre></td></tr></table></figure>

<h2 id="javascript如何判断是否为对象？"><a href="#javascript如何判断是否为对象？" class="headerlink" title="javascript如何判断是否为对象？"></a>javascript如何判断是否为对象？</h2><p><strong>先声明一个对象</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var obj = &#123;&#125;；</span><br></pre></td></tr></table></figure>
<p><strong>判断是否为对象的方法：</strong></p>
<p>1、toString（推荐）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Object.prototype.toString.call(obj) === <span class="string">&#x27;[Object Object]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>2、constructor属性</p>
<p>constructor 属性返回对创建此对象的 Boolean 函数的引用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">obj.constructor === Object</span><br></pre></td></tr></table></figure>
<p>3、instanceof运算符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">obj instanceof Object</span><br></pre></td></tr></table></figure>
<p>注：需要注意的是由于数组也是对象，因此用 arr instanceof Object 也为true。</p>
<p>4、typeof运算符</p>
<p>typeof运算符返回一个字符串，表示未经计算的操作数的类型。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">typeof obj === Object</span><br><span class="line"></span><br><span class="line">// 根据typeof判断对象也不太准确</span><br><span class="line">表达式                     返回值</span><br><span class="line">typeof undefined       <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">typeof null               <span class="string">&#x27;object&#x27;</span></span><br><span class="line">typeof <span class="literal">true</span>               <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line">typeof 123               <span class="string">&#x27;number&#x27;</span></span><br><span class="line">typeof <span class="string">&quot;abc&quot;</span>           <span class="string">&#x27;string&#x27;</span></span><br><span class="line">typeof <span class="function"><span class="title">function</span></span>() &#123;&#125;   <span class="string">&#x27;function&#x27;</span></span><br><span class="line">typeof &#123;&#125;               <span class="string">&#x27;object&#x27;</span></span><br><span class="line">typeof []               <span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>
<p>5、$.isPlainObject()</p>
<p>该方法判断指定参数是否是一个纯粹的对象（所谓”纯粹的对象”，就是该对象是通过”{}”或”new Object”创建的。）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$.isPlainObject(obj)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js基本数据类型有哪些，有什么区别？</title>
    <url>/2020/08/24/js%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<p>一、JavaScript的数据类型：</p>
<p>1、基本数据类型有这五种: Undefined、Null、String、Number、Boolean</p>
<p>2、引用类型：当复制保存着对象的某个变量时，操作的是对象的引用，但在为对象添加属性时，操作的是实际的对象。引用类型值指那些可能为多个值构成的对象。引用类型值指那些可能为多个值构成的对象。</p>
<p>3、引用类型有这几种：object、Array、RegExp、Date、Function、特殊的基本包装类型(String、Number、Boolean)以及单体内置对象(Global、Math)。</p>
<p>二、基本类型和引用类型的区别</p>
<p>1、基本类型的变量是存放在栈区的（栈区指内存里的栈内存）；</p>
<p>2、引用类型的值是同时保存在栈内存和堆内存中的对象；</p>
<p>3、基本类型的比较是值的比较；</p>
<p>4、引用类型的比较是引用的比较；</p>
<p>三、什么是栈内存，什么是堆内存，两者有什么区别？</p>
<p><strong>栈内存</strong>：由程序自动向操作系统申请分配以及回收，速度快，使用方便，但程序员无法控制。若分配失败，则提示栈溢出错误。注意，const局部变量也储存在栈区内，栈区向地址减小的方向增长。</p>
<p><strong>堆内存</strong>：程序员向操作系统申请一块内存，当系统收到程序的申请时，会遍历一个记录空闲内存地址的链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。分配的速度较慢，地址不连续，容易碎片化。此外，由程序员申请，同时也必须由程序员负责销毁，否则则导致内存泄露。</p>
<p>四、关于堆和栈区别的比喻：</p>
<p>堆和栈的区别可以引用一位前辈的比喻来看出：使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>localStorage和sessionStorage区别</title>
    <url>/2020/11/18/localStorage%E5%92%8CsessionStorage%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>localStorage 和 sessionStorage一样都是用来存储客户端临时信息的对象。</p>
<p>他们均只能存储字符串类型的对象(虽然规范中可以存储其他类型的对象，但是目前位置没有浏览器对其进行实现)。<br>localStorage生命周期是永久的，这意味着用户除非在浏览器上清除localStorage信息，否则，这些信息将永远存在。<br>sessionStorage生命周期为当前窗口或者当前标签页，一旦窗口或者标签页被永久关闭，那么所有通过sessionStorage存储的数据也就被清空了。</p>
<p>不同的浏览器无法共享localStorage或者sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage(页面属于相同域名和端口)，但是不同页面或者标签页间无法共享sessionStorage的信息。这里需要注意，页面及标签仅指顶级窗口，如果标签页包含多个iframe标签且他们属于同源页面，那么他们之间可以共享sessionStorage的。</p>
]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx的gzip设置详解</title>
    <url>/2020/08/02/nginx%E7%9A%84gzip%E8%AE%BE%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>nginx中gzip压缩(节省带宽)<br>原理:<br>浏览器—请求—-&gt; 声明可以接受 gzip压缩 或 deflate压缩 或compress 或 sdch压缩<br>从http协议的角度看–请求头 声明 acceopt-encoding: gzip deflate sdch (是指压缩算法,其中sdch是google倡导的一种压缩方式,目前支持的服务器尚不多)<br>服务器–&gt;回应—把内容用gzip方式压缩—-&gt;发给浏览器<br>浏览&lt;—–解码gzip—–接收gzip压缩内容—-</p>
<p>官方文档 <a class="link"   href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html" >http://nginx.org/en/docs/http/ngx_http_gzip_module.html<i class="fas fa-external-link-alt"></i></a></p>
<p>gzip配置的常用参数<br>gzip on|off; #是否开启gzip<br>gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)<br>gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)<br>gzip_disable #正则匹配UA 什么样的Uri不进行gzip<br>gzip_min_length 200 # 开始压缩的最小长度(再小就不要压缩了,意义不在)<br>gzip_http_version 1.0|1.1 # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)<br>gzip_proxied # 设置请求者代理服务器,该如何缓存内容<br>gzip_types text/plain application/xml # 对哪些类型的文件用压缩 如txt,xml,html ,css<br>gzip_vary on|off # 是否传输gzip压缩标志</p>
<p>注意:<br>图片/mp3这样的二进制文件,不必压缩<br>因为压缩率比较小, 比如100-&gt;80字节,而且压缩也是耗费CPU资源的,比较小的文件不必压缩</p>
<p>nginx中的expires缓存(缓存在浏览器中 提高网站性能)<br>使用场景:对于网站的图片,尤其是新闻站, 图片一旦发布, 改动的可能是非常小的.我们希望 能否在用户访问一次后, 图片缓存在用户的浏览器端,且时间比较长的缓存.<br>列如:缓存一个小时<br>location ~..(jpg|png|jpeg|gif){<br>expires 1d;<br>}<br>(注意:服务器的日期要准确,如果服务器的日期落后于实际日期,可能导致缓存失效)<br>304 也是一种很好的缓存手段<br>原理是: 服务器响应文件内容是,同时响应etag标签(内容的签名,内容一变,他也变), 和 last_modified_since 2个标签值浏览器下次去请求时,头信息发送这两个标签, 服务器检测文件有没有发生变化,如无,直接头信息返回 etag,last_modified_since浏览器知道内容无改变,于是直接调用本地缓存.<br>这个过程,也请求了服务器,但是传着的内容极少.<br>对于变化周期较短的,如静态html,js,css,比较适于用这个方式</p>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>git stash的用法总结</title>
    <url>/2020/12/14/stash%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h4><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。</p>
<p>“‘储藏”“可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>
<h4 id="储藏你的工作"><a href="#储藏你的工作" class="headerlink" title="储藏你的工作"></a>储藏你的工作</h4><p>假如你正在一个分支上做开发任务，现在你想切换到另外一个分支上去做一些工作，比如修改bug、继续之前的工作等等。但是，你现在还不想提交你正在进行的工作，所以你可以储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state \</span><br><span class="line">  <span class="string">&quot;WIP on master: 049d078 added the index file&quot;</span></span><br><span class="line">HEAD is now at 049d078 added the index file</span><br><span class="line">(To restore them <span class="built_in">type</span> <span class="string">&quot;git stash apply&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样你的工作目录就干净了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>
<p>这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。要查看现有的储藏，你可以使用 <code>git stash list</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 049d078 added the index file</span><br><span class="line">stash@&#123;1&#125;: WIP on master: c264051 Revert <span class="string">&quot;added file_size&quot;</span></span><br><span class="line">stash@&#123;2&#125;: WIP on master: 21d80a5 added number to <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>在这个案例中，之前已经进行了两次储藏，所以你可以访问到三个不同的储藏。你可以重新应用你刚刚实施的储藏，所采用的命令就是之前在原始的 stash 命令的帮助输出里提示的：<code>git stash apply</code>。如果你想应用更早的储藏，你可以通过名字指定它，像这样：<code>git stash apply stash@&#123;2&#125;</code>。如果你不指明，Git 默认使用最近的储藏并尝试应用它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git stash apply</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Changes not staged for commit:</span></span><br><span class="line"><span class="comment">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      modified:   index.html</span></span><br><span class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></span><br></pre></td></tr></table></figure>
<p>你可以看到 Git 重新修改了你所储藏的那些当时尚未提交的文件。在这个案例里，你尝试应用储藏的工作目录是干净的，并且属于同一分支；但是一个干净的工作目录和应用到相同的分支上并不是应用储藏的必要条件。你可以在其中一个分支上保留一份储藏，随后切换到另外一个分支，再重新应用这些变更。在工作目录里包含已修改和未提交的文件时，你也可以应用储藏——Git 会给出归并冲突如果有任何变更无法干净地被应用。</p>
<p>对文件的变更被重新应用，但是被暂存的文件没有重新被暂存。想那样的话，你必须在运行 <code>git stash apply</code> 命令时带上一个 <code>--index</code> 的选项来告诉命令重新应用被暂存的变更。如果你是这么做的，你应该已经回到你原来的位置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git stash apply --index</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      modified:   index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes not staged for commit:</span></span><br><span class="line"><span class="comment">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></span><br></pre></td></tr></table></figure>
<p>apply 选项只尝试应用储藏的工作——储藏的内容仍然在栈上。要移除它，你可以运行 <code>git stash drop</code>，加上你希望移除的储藏的名字：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 049d078 added the index file</span><br><span class="line">stash@&#123;1&#125;: WIP on master: c264051 Revert <span class="string">&quot;added file_size&quot;</span></span><br><span class="line">stash@&#123;2&#125;: WIP on master: 21d80a5 added number to <span class="built_in">log</span></span><br><span class="line">$ git stash drop stash@&#123;0&#125;</span><br><span class="line">Dropped stash@&#123;0&#125; (364e91f3f268f0900bc3ee613f9f733e82aaed43)</span><br></pre></td></tr></table></figure>
<p>你也可以运行<code>git stash pop</code>来重新应用储藏，同时立刻将其从堆栈中移走。</p>
<h4 id="取消储藏-Un-applying-a-Stash"><a href="#取消储藏-Un-applying-a-Stash" class="headerlink" title="取消储藏(Un-applying a Stash)"></a>取消储藏(Un-applying a Stash)</h4><p>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash show -p stash@&#123;0&#125; | git apply -R</span><br></pre></td></tr></table></figure>
<p>同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash show -p | git apply -R</span><br></pre></td></tr></table></figure>
<p>你可能会想要新建一个別名，在你的 Git 里增加一个 <code>stash-unapply</code> 命令，这样更有效率。例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.stash-unapply <span class="string">&#x27;!git stash show -p | git apply -R&#x27;</span></span><br><span class="line">$ git stash apply</span><br><span class="line">$ <span class="comment">#... work work work</span></span><br><span class="line">$ git stash-unapply</span><br></pre></td></tr></table></figure>
<h4 id="从储藏中创建分支"><a href="#从储藏中创建分支" class="headerlink" title="从储藏中创建分支"></a>从储藏中创建分支</h4><p>如果你储藏了一些工作，暂时不去理会，然后继续在你储藏工作的分支上工作，你在重新应用工作时可能会碰到一些问题。如果尝试应用的变更是针对一个你那之后修改过的文件，你会碰到一个归并冲突并且必须去化解它。如果你想用更方便的方法来重新检验你储藏的变更，你可以运行 git stash branch，这会创建一个新的分支，检出你储藏工作时的所处的提交，重新应用你的工作，如果成功，将会丢弃储藏。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash branch testchanges</span><br><span class="line">Switched to a new branch <span class="string">&quot;testchanges&quot;</span></span><br><span class="line"><span class="comment"># On branch testchanges</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      modified:   index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes not staged for commit:</span></span><br><span class="line"><span class="comment">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</span><br></pre></td></tr></table></figure>
<p>这是一个很棒的捷径来恢复储藏的工作然后在新的分支上继续当时的工作。</p>
<h4 id="git-stash-暂存部分文件"><a href="#git-stash-暂存部分文件" class="headerlink" title="git stash 暂存部分文件"></a>git stash 暂存部分文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>
<p>什么参数不加，会分别对暂存区(没有add的)和工作区(add之后的)的状态进行保存。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash save <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>
<p>save可以添加保存时的备注。示例:git stash save “完成user接口”</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>
<p>-k 或–keep-index只备份没有add的文件。示例<code>git stash save --keep-index &quot;部分文件&quot;</code></p>
<h4 id="git-stash使用技巧"><a href="#git-stash使用技巧" class="headerlink" title="git stash使用技巧"></a>git stash使用技巧</h4><p>常规 git stash 的一个限制是它会一下暂存所有的文件。有时，只备份某些文件更为方便，让另外一些与代码库保持一致。一个非常有用的技巧，用来备份部分文件：</p>
<ul>
<li>add 那些你不想备份的文件（例如： git add file1.js, file2.js）</li>
<li>调用 git stash –keep-index。只会备份那些没有被add的文件。</li>
<li>调用 git reset 取消已经add的文件的备份，继续自己的工作。</li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>table使用总结</title>
    <url>/2020/11/13/table%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>1、(IE浏览器)使用 table-layout:fixed;强制table的宽度,内层td,th采用word-break : break-all;或者word-wrap : break-word ;换行</p>
<h3 id="2、解决设置table中td宽度不生效"><a href="#2、解决设置table中td宽度不生效" class="headerlink" title="2、解决设置table中td宽度不生效"></a>2、解决设置table中td宽度不生效</h3><ul>
<li><p>特性：table是一个整体，每一列td的宽度是由一个其中一个最长td的宽度决定的。</p>
</li>
<li><p>解决：一定要在table标签上加word-wrap: break-word; word-break: break-all;之后再设置百分比宽度就可以生效了(获取你用的bootstrap，可以添加col-md-1)</p>
<p><a href="https://imgchr.com/i/DpvwdS"><img src="https://s3.ax1x.com/2020/11/13/DpvwdS.png" alt="DpvwdS.png"></a><br><a href="https://imgchr.com/i/DpvWZT"><img src="https://s3.ax1x.com/2020/11/13/DpvWZT.png" alt="DpvWZT.png"></a></p>
<h1 id="让一个元素相对于父元素固定定位"><a href="#让一个元素相对于父元素固定定位" class="headerlink" title="让一个元素相对于父元素固定定位"></a>让一个元素相对于父元素固定定位</h1><p>遇到了一个场景，需要实现相对于父元素的fixed定位：在父元素内拖动滚动条时，”fixed”定位的元素不能滑动，在外层拖动滚动条时，父元素及父元素内的所有元素跟着一起滑动。但是position: fixed是相对于窗口进行的定位，不能直接实现我们需要的效果。</p>
</li>
</ul>
<p>  让特定子元素相对于父元素”fixed”定位，也就是说，剩余的子元素不定位。那我们可以分开来想，如果添加一个祖先元素assistor，有两个祖先元素，一个用于辅助定位，一个用于包裹不定位的内容，这个问题就解决了。</p>
<p>  实质上是child相对于assistorabsolute定位，parent内的内容自己负责展示。只要assistor和parent一样大，看起来就像是子元素child相对于父元素parent固定定位了。具体原理是position: absolute;的元素会相对于第一个设置了position: relative;的祖先元素进行定位，我们将assistor设置为position: reletive;，滚动条是在parent中的，这样”fixed”定位和parent内的内容滚动就都实现了。</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;<span class="built_in">test</span>&lt;/td&gt;&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.assistor &#123;</span><br><span class="line">  position: relative; /*关键点*/</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 300px;</span><br><span class="line">  margin: 100px auto 0 auto;</span><br><span class="line">  background-color: <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line">.parent &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: <span class="comment">#888;</span></span><br><span class="line">  overflow: auto; /*关键点*/</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">  position: absolute; /*关键点*/</span><br><span class="line">  width: 120px;</span><br><span class="line">  height: 120px;</span><br><span class="line">  margin: 100px 50px;</span><br><span class="line">  background-color: <span class="comment">#eee;</span></span><br><span class="line">&#125;</span><br><span class="line">.placeholder &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div class=<span class="string">&quot;assistor&quot;</span>&gt;</span><br><span class="line">		&lt;div class=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">		  &lt;div class=<span class="string">&quot;child&quot;</span>&gt;111&lt;/div&gt;</span><br><span class="line">		  &lt;div class=<span class="string">&quot;placeholder&quot;</span>&gt;</span><br><span class="line">			  1114561611&lt;br/&gt;11134111&lt;br/&gt;1111116761111&lt;br/&gt;1111111111111111111111</span><br><span class="line">			  11111111111111111111111111111111111111111111111111111111111</span><br><span class="line">			  1111111111111111111111111111111111111122222222222222222222</span><br><span class="line">			  22222222222222222222222222222222222222222222222222222222222</span><br><span class="line">			  222222222222222222222222&lt;br/&gt; 2222222222222222222222222222222</span><br><span class="line">			  22222222222222222222222222&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>typeof与instanceof区别</title>
    <url>/2020/08/02/typeof%E4%B8%8Einstanceof%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>typeof可以判断数据类型，但是无法判断array和object，如何解决?</p>
</blockquote>
<h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>用于判断数据类型，返回值为6个字符串，分别为<code>string</code>、<code>Boolean</code>、<code>number</code>、<code>function</code>、<code>object</code>、<code>undefined</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = [34,4,3,54],</span><br><span class="line">    b = 34,</span><br><span class="line">    c = <span class="string">&#x27;adsfas&#x27;</span>,</span><br><span class="line">    d = <span class="function"><span class="title">function</span></span>()&#123;console.log(<span class="string">&#x27;我是函数&#x27;</span>)&#125;,</span><br><span class="line">    e = <span class="literal">true</span>,</span><br><span class="line">    f = null,</span><br><span class="line">    g;</span><br><span class="line"></span><br><span class="line">    console.log(typeof(a));//object</span><br><span class="line">    console.log(typeof(b));//number</span><br><span class="line">    console.log(typeof(c));//string</span><br><span class="line">    console.log(typeof(d));//<span class="keyword">function</span></span><br><span class="line">    console.log(typeof(e));//boolean</span><br><span class="line">    console.log(typeof(f));//object</span><br><span class="line">    console.log(typeof(g));//undefined</span><br></pre></td></tr></table></figure>
<p>但是你可能会发现，<code>typeof</code>在判断<code>null</code>、<code>array</code>、<code>object</code>以及函数实例<code>（new + 函数）</code>时，得到的都是<code>object</code>。这使得在判断这些数据类型的时候，得不到真是的数据类型。由此引出<code>instanceof</code>。</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instance中文翻译为实例，因此instanceof的含义就不言而喻，判断该对象是谁的实例，同时我们也就知道instanceof是对象运算符。<br>这里的实例就牵扯到了对象的继承，它的判断就是根据原型链进行搜寻，在对象obj1的原型链上如果存在另一个对象obj2的原型属性，那么表达式（obj1 instanceof obj2）返回值为true；否则返回false。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p> typeof和instanceof都是用来判断变量类型的，两者的区别在于：</p>
<ul>
<li>typeof判断所有变量的类型，返回值有number，boolean，string，function，object，undefined。</li>
<li>typeof对于丰富的对象实例，只能返回”Object”字符串。<br>instanceof用来判断对象，代码形式为obj1 instanceof obj2（obj1是否是obj2的实例），obj2必须为对象，否则会报错！其返回值为布尔值。</li>
<li>instanceof可以对不同的对象实例进行判断，判断方法是根据对象的原型链依次向下查询，如果obj2的原型属性存在obj1的原型链上，（obj1 instanceof obj2）值为true。</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app利用rich-text展示富文本内容,图片的宽度溢出屏幕</title>
    <url>/2020/09/02/uni-app%E5%88%A9%E7%94%A8rich-text%E5%B1%95%E7%A4%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9-%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%BD%E5%BA%A6%E6%BA%A2%E5%87%BA%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<p>一、在App.vue组件中（h5），直接在App.vue修改即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uni-rich-text img &#123;</span><br><span class="line">    max-<span class="keyword">with</span>: <span class="number">100</span>% !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、在小程序里面展示富文本内容，图片的宽度溢出屏幕的问题。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;rich-text :nodes=<span class="string">&quot;infos.content | formatRichText&quot;</span>&gt;&lt;/rich-text&gt; </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">	<span class="built_in">export</span> default &#123;</span><br><span class="line">		<span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">			<span class="built_in">return</span> &#123;&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		components: &#123;&#125;,</span><br><span class="line">		onLoad(option) &#123;&#125;,</span><br><span class="line">		filters: &#123;</span><br><span class="line">           /**</span><br><span class="line">			 * 处理富文本里的图片宽度自适应</span><br><span class="line">			 * 1.去掉img标签里的style、width、height属性</span><br><span class="line">			 * 2.img标签添加style属性：max-width:100%;height:auto</span><br><span class="line">			 * 3.修改所有style里的width属性为max-width:100%</span><br><span class="line">			 * 4.去掉&lt;br/&gt;标签</span><br><span class="line">			 * @param html</span><br><span class="line">			 * @returns &#123;void|string|*&#125;</span><br><span class="line">			 */    </span><br><span class="line">                     </span><br><span class="line">			formatRichText (html) &#123; </span><br><span class="line">        <span class="built_in">let</span> newContent= html.replace(/&lt;img[^&gt;]*&gt;/gi,<span class="keyword">function</span>(match,capture)&#123;</span><br><span class="line">            match = match.replace(/style=<span class="string">&quot;[^&quot;</span>]+<span class="string">&quot;/gi, &#x27;&#x27;).replace(/style=&#x27;[^&#x27;]+&#x27;/gi, &#x27;&#x27;);</span></span><br><span class="line"><span class="string">            match = match.replace(/width=&quot;</span>[^<span class="string">&quot;]+&quot;</span>/gi, <span class="string">&#x27;&#x27;</span>).replace(/width=<span class="string">&#x27;[^&#x27;</span>]+<span class="string">&#x27;/gi, &#x27;</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">            match = match.replace(/height=&quot;[^&quot;]+&quot;/gi, &#x27;</span><span class="string">&#x27;).replace(/height=&#x27;</span>[^<span class="string">&#x27;]+&#x27;</span>/gi, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="built_in">return</span> match;</span><br><span class="line">        &#125;);</span><br><span class="line">        newContent = newContent.replace(/style=<span class="string">&quot;[^&quot;</span>]+<span class="string">&quot;/gi,function(match,capture)&#123;</span></span><br><span class="line"><span class="string">            match = match.replace(/width:[^;]+;/gi, &#x27;max-width:100%;&#x27;).replace(/width:[^;]+;/gi, &#x27;max-width:100%;&#x27;);</span></span><br><span class="line"><span class="string">            return match;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        newContent = newContent.replace(/&lt;br[^&gt;]*\/&gt;/gi, &#x27;&#x27;);</span></span><br><span class="line"><span class="string">        newContent = newContent.replace(/\&lt;img/gi, &#x27;&lt;img style=&quot;</span>max-width:100%;height:auto;display:inline-block;margin:10rpx auto;<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">        return newContent;</span></span><br><span class="line"><span class="string">			&#125;       </span></span><br><span class="line"><span class="string">		&#125;,</span></span><br><span class="line"><span class="string">		methods: &#123;&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中的mixins</title>
    <url>/2020/08/02/vue%E4%B8%AD%E7%9A%84mixins/</url>
    <content><![CDATA[<p><a class="link"   href="https://cn.vuejs.org/v2/guide/mixins.html" >vue中的mixins<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中的router和route的区别</title>
    <url>/2020/08/02/vue%E4%B8%AD%E7%9A%84router%E5%92%8Croute%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="vue中的-router和-route的区别"><a href="#vue中的-router和-route的区别" class="headerlink" title="vue中的$router和$route的区别"></a>vue中的$router和$route的区别</h3><p><strong>一、</strong></p>
<p>router是VueRouter的实例，相当于一个全局的路由器对象，里面还有好多的属性和子对象，例如history对象，经常用的跳转链接就可以用this.$router.push(), 和router-linkrouter-link跳转一样。<br>this.$router.push()会往history栈中添加一个新的记录。<a class="link"   href="https://router.vuejs.org/zh/guide/essentials/navigation.html" >详细见vue官方文档<i class="fas fa-external-link-alt"></i></a></p>
<p>route相当于正在跳转的路由对象。可以从里面获取name，path，params，query等。</p>
<p>打印this.$route和this.$router</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atiEdg.png" alt="atiEdg.png"></p>
<p>路由传参的方式：</p>
<p>1、可以手写完整的path：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">this.<span class="variable">$router</span>.push(&#123;path:`/user/<span class="variable">$&#123;userId&#125;</span>`&#125;)</span><br></pre></td></tr></table></figure>
<p>这样传参的话，配置路由的时候需要在path上加参数path: user/:userId<br>这种接收参数的方式是this.$route.params.userId</p>
<p>2、也可以用params传参</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//命名路由</span><br><span class="line">router.push(&#123;name: <span class="string">&#x27;user&#x27;</span>, params: &#123; userId:123 &#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>3、也可以用query传参</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//带查询参数，变成 /register?plan=private</span><br><span class="line">router.push(&#123;path: <span class="string">&#x27;register&#x27;</span>, query: &#123; plan: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>query传参是针对path的，params传参是针对name的。。接收的方式都差不多。。。this.$route.query和this.$route.params<br>注意这只是跳转url，跳转到这个url显示什么组件，得配置路由。router跳转和<router-link>标签跳转，规则差不多。</p>
<p>展示的话<br><img src="https://s1.ax1x.com/2020/08/02/atiFL8.png" alt="atiFL8.png"></p>
<p>注意：如果提供了path，params将会被忽略，但是query不属于这种情况。。。</p>
<p>如果使用完整路径和query传参，刷新页面时不会造成路由传参的参数丢失。</p>
<p>这个vue官方文档讲的很详细。</p>
<p><strong>二、</strong></p>
<p>有时候配置路由时path有时候会加 ‘/‘ 有时候不加,例如path:’name’和path:’/name’。区别其实官方文档说了，我当时没仔细看，导致这个问题还困扰了我很久。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atiisf.png" alt="atiisf.png"><br>意思就是以 / 开头的会被当做路径，就不会一直嵌套之前的路径。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现路由按需加载(路由懒加载)的3种方式</title>
    <url>/2020/08/02/vue%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD-%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD-%E7%9A%843%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>vue异步组件</li>
<li>es提案的import()</li>
<li>webpack的require.ensure()</li>
</ul>
<blockquote>
<p>vue异步组件技术 === 异步加载<br>  vue-router配置路由, 使用vue的异步组件技术, 可以实现按需加载.<br>  但是, 这种情况下一个组件生成一个js文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* vue异步组件技术 */</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  component: resolve =&gt; require([<span class="string">&#x27;@/components/home&#x27;</span>],resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">  component: resolve =&gt; require([<span class="string">&#x27;@/components/index&#x27;</span>],resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  component: resolve =&gt; require([<span class="string">&#x27;@/components/about&#x27;</span>],resolve)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>组件懒加载方案二 路由懒加载(使用import)</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 下面2行代码，没有指定webpackChunkName，每个组件打包成一个js文件。</span><br><span class="line">/* const Home = () =&gt; import(<span class="string">&#x27;@/components/home&#x27;</span>)</span><br><span class="line">const Index = () =&gt; import(<span class="string">&#x27;@/components/index&#x27;</span>)</span><br><span class="line">const About = () =&gt; import(<span class="string">&#x27;@/components/about&#x27;</span>) */</span><br><span class="line">// 下面2行代码，指定了相同的webpackChunkName，会合并打包成一个js文件。 把组件按组分块</span><br><span class="line">const Home =  () =&gt; import(/* webpackChunkName: <span class="string">&#x27;ImportFuncDemo&#x27;</span> */ <span class="string">&#x27;@/components/home&#x27;</span>)</span><br><span class="line">const Index = () =&gt; import(/* webpackChunkName: <span class="string">&#x27;ImportFuncDemo&#x27;</span> */ <span class="string">&#x27;@/components/index&#x27;</span>)</span><br><span class="line">const About = () =&gt; import(/* webpackChunkName: <span class="string">&#x27;ImportFuncDemo&#x27;</span> */ <span class="string">&#x27;@/components/about&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  component: About</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">  component: Index</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>webpack提供的require.ensure()<br>vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。<br>这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* 组件懒加载方案三: webpack提供的require.ensure() */</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(<span class="string">&#x27;@/components/home&#x27;</span>)), <span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(<span class="string">&#x27;@/components/index&#x27;</span>)), <span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(<span class="string">&#x27;@/components/about&#x27;</span>)), <span class="string">&#x27;demo-01&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的双向绑定原理及实现</title>
    <url>/2020/08/02/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.cnblogs.com/libin-1/p/6893712.html" >vue的双向绑定原理及实现<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack性能优化——DLL</title>
    <url>/2020/09/27/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94DLL/</url>
    <content><![CDATA[<p>Webpack性能优化的方式有很多种，本文之所以将 dll 单独讲解，是因为 dll 是一种最简单粗暴并且极其有效的优化方式。</p>
<p>在通常的打包过程中，你所引用的诸如：jquery、bootstrap、react、react-router、redux、antd、vue、vue-router、vuex 等等众多库也会被打包进 bundle 文件中。由于这些库的内容基本不会发生改变，每次打包加入它们无疑是一种巨大的性能浪费。</p>
<p>Dll 的技术就是在第一次时将所有引入的库打包成一个 dll.js 的文件，将自己编写的内容打包为 bundle.js 文件，这样之后的打包只用处理 bundle 部分。</p>
<p>以 Vue 项目为例，首先创建一个名为 webpack.dll.config.js 的文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>),</span><br><span class="line">　　fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>),</span><br><span class="line">　　webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vendors = [</span><br><span class="line">　　<span class="string">&#x27;vue&#x27;</span>, </span><br><span class="line">　　<span class="string">&#x27;vue-router&#x27;</span>, </span><br><span class="line">　　<span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">　　entry: &#123;</span><br><span class="line">　　　　vendor: vendors</span><br><span class="line">　　&#125;,</span><br><span class="line">　　output: &#123;</span><br><span class="line">　　　　path: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">　　　　filename: <span class="string">&quot;Dll.js&quot;</span>,</span><br><span class="line">　　　　library: <span class="string">&quot;[name]_[hash]&quot;</span></span><br><span class="line">　　&#125;,</span><br><span class="line">　　plugins: [</span><br><span class="line">　　　　<span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">　　　　　　path: path.join(__dirname, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;manifest.json&quot;</span>),</span><br><span class="line">　　　　　　name: <span class="string">&quot;[name]_[hash]&quot;</span>,</span><br><span class="line">　　　　　　context: __dirname</span><br><span class="line">　　　　&#125;)</span><br><span class="line">　　]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这个文件的作用是将 vue、vue-router 以及 vuex 合并打包为一个名为 Dll.js 的静态资源包，同时生成一个 manifest.json 文件方便对 Dll.js 中的模块进行引用。</p>
<p>要注意的是，执行 webpack 命令是默认执行该目录下名为 webpack.config.js 或者 webpackfile.js 的文件。所以需要通过 –config 指令手动指定该文件，最后加入 -p 指令将 Dll.js 压缩。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ webpack --config webpack.dll.config.js -p</span><br></pre></td></tr></table></figure>
<p>这样，在项目根目录下就会多增加一个 dist 文件夹，其中有压缩之后的 Dll.js 与 manifest.json 文件。</p>
<p>manifest.json 文件内容如下，给各个模块赋予 id 以便引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vendor_2beb750db72b1cda4321&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;./node_modules/process/browser.js&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;meta&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;./node_modules/vue-router/dist/vue-router.esm.js&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;harmonyModule&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;exports&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;default&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;./node_modules/vue/dist/vue.runtime.esm.js&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;harmonyModule&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;exports&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;default&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//.......</span></span><br></pre></td></tr></table></figure>
<p>最后在 webpack.config.js 中添加引用。在 plugins 属性中添加 DllReferencePlugin 插件，并指明 manifest.json 文件的引用路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        context: __dirname,</span><br><span class="line">        manifest: <span class="built_in">require</span>(<span class="string">&#x27;./dist/manifest.json&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在确保成功执行 webpack.dll.config.js 文件后，执行 webpack -p 进行项目打包。<br><img src="https://s1.ax1x.com/2020/09/27/0k6dHK.png" alt="4sdL4.png"></p>
<p>可以看到打包在 Dll 文件中的文件都被<code>delegated(委派)</code>，而不是直接打进 bundle 文件中</p>
<p>这样我们就将所有的资源完成打包，生成的 dist 目录如下：<br><img src="https://s1.ax1x.com/2020/09/27/0k6aB6.png" alt="4sdL4.png"></p>
<p>不过 dist 文件夹要想作为一个完整的工程还少一个 html 文件，我创建了一个名为 pack.js 的文件，使用 nodejs 的 fileSystem 对 html 文件进行修改并拷贝。</p>
<p>pack.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="keyword">var</span> dataStr = data.toString(),</span><br><span class="line">        timestamp = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">    </span><br><span class="line">        dataStr = dataStr</span><br><span class="line">                    .replace(<span class="string">&#x27;bundle.js&#x27;</span>, <span class="string">&#x27;bundle.js?v=&#x27;</span>+timestamp)</span><br><span class="line">                    .replace(<span class="string">&#x27;&lt;!-- dll --&gt;&#x27;</span>, <span class="string">&#x27;&lt;script src=&quot;./dist/Dll.js?v=&#x27;</span>+ timestamp +<span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        fs.writeFile(<span class="string">&#x27;./dist/index.html&#x27;</span>, dataStr, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;HTML file copy successfully&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们需要在模块的入口 html 中添加 <code>&lt;!-- dll --&gt;</code> 的占位字符，pack.js 的作用就是将 html 文件拷贝一份到 dist 目录下，同时将 <!-- dll --> 替换为引用 Dll.js 的 script 标签，并在引用文件后添加时间戳。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- .... --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;demo&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- dll --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./bundle.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在执行 webpack -p 打包后，输入下面命令运行 pack.js，就会在 dist 目录下生成 html 文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ node pack.js</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/09/27/0k6Unx.png" alt="4sdL4.png"></p>
<p>内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- .... --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;demo&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;./dist/Dll.js?v=1488250309725&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./bundle.js?v=1488250309725&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>这样 dist 文件夹就作为一个完整的、不需要任何手动操作、已经压缩混淆后的项目可以直接进行线上的部署。</p>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack相关面试题</title>
    <url>/2020/08/02/webpack%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="1、webpack与grunt、gulp的不同？"><a href="#1、webpack与grunt、gulp的不同？" class="headerlink" title="1、webpack与grunt、gulp的不同？"></a>1、webpack与grunt、gulp的不同？</h4><p>三者都是前端构建工具，grunt和gulp在早期比较流行，现在webpack相对来说比较主流，不过一些轻量化的任务还是会用gulp来处理，比如单独打包CSS文件等。</p>
<p>grunt和gulp是基于任务和流（Task、Stream）的。类似jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个web的构建流程。</p>
<p>webpack是基于入口的。webpack会自动地递归解析入口所需要加载的所有资源文件，然后用不同的Loader来处理不同的文件，用Plugin来扩展webpack功能。</p>
<p>所以总结一下：</p>
<ul>
<li><p>从构建思路来说<br>gulp和grunt需要开发者将整个前端构建过程拆分成多个<code>Task</code>，并合理控制所有<code>Task</code>的调用关系 webpack需要开发者找到入口，并需要清楚对于不同的资源应该使用什么Loader做何种解析和加工</p>
</li>
<li><p>对于知识背景来说<br>gulp更像后端开发者的思路，需要对于整个流程了如指掌 webpack更倾向于前端开发者的思路</p>
</li>
</ul>
<h4 id="2、与webpack类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用webpack"><a href="#2、与webpack类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用webpack" class="headerlink" title="2、与webpack类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用webpack"></a>2、与webpack类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用webpack</h4><p>同样是基于入口的打包工具还有以下几个主流的：</p>
<ul>
<li>webpack</li>
<li>rollup</li>
<li>parcel</li>
</ul>
<p><strong>从应用场景上来看：</strong></p>
<ul>
<li>webpack适用于大型复杂的前端站点构建</li>
<li>rollup适用于基础库的打包，如vue、react</li>
<li>parcel适用于简单的实验性项目，他可以满足低门槛的快速看到效果<br>由于parcel在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用parcel </li>
</ul>
<h4 id="3、有哪些常见的Loader？他们是解决什么问题的？"><a href="#3、有哪些常见的Loader？他们是解决什么问题的？" class="headerlink" title="3、有哪些常见的Loader？他们是解决什么问题的？"></a>3、有哪些常见的Loader？他们是解决什么问题的？</h4><ul>
<li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li>
<li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li>
<li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li>
<li>image-loader：加载并且压缩图片文件</li>
<li>babel-loader：把 ES6 转换成 ES5</li>
<li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li>
<li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li>
<li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li>
</ul>
<h4 id="4、有哪些常见的Plugin？他们是解决什么问题的？"><a href="#4、有哪些常见的Plugin？他们是解决什么问题的？" class="headerlink" title="4、有哪些常见的Plugin？他们是解决什么问题的？"></a>4、有哪些常见的Plugin？他们是解决什么问题的？</h4><ul>
<li>define-plugin：定义环境变量</li>
<li>commons-chunk-plugin：提取公共代码</li>
<li>uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码</li>
</ul>
<h4 id="5-Loader和Plugin的不同？"><a href="#5-Loader和Plugin的不同？" class="headerlink" title="5.Loader和Plugin的不同？"></a>5.Loader和Plugin的不同？</h4><p><strong>不同的作用</strong></p>
<ul>
<li>Loader直译为”加载器”。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</li>
<li>Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li>
</ul>
<p><strong>不同的用法</strong></p>
<ul>
<li>Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）</li>
<li>Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</li>
</ul>
<h4 id="6-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"><a href="#6-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全" class="headerlink" title="6.webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全"></a>6.webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全</h4><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>
<p>1、初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；<br>2、开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；<br>3、确定入口：根据配置中的 entry 找出所有的入口文件；<br>4、编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；<br>5、完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；<br>6、输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；<br>7、输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。<br>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>
<h4 id="7-是否写过Loader和Plugin？描述一下编写loader或plugin的思路？"><a href="#7-是否写过Loader和Plugin？描述一下编写loader或plugin的思路？" class="headerlink" title="7.是否写过Loader和Plugin？描述一下编写loader或plugin的思路？"></a>7.是否写过Loader和Plugin？描述一下编写loader或plugin的思路？</h4><p>Loader像一个”翻译官”把读到的源文件内容转义成新的文件内容，并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。</p>
<p>编写Loader时要遵循单一原则，每个Loader只做一种”转义”工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用this.callback()方法，将内容返回给webpack。 还可以通过 this.async()生成一个callback函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——loader-utils。</p>
<p>相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<h4 id="8-webpack的热更新是如何做到的？说明其原理？"><a href="#8-webpack的热更新是如何做到的？说明其原理？" class="headerlink" title="8.webpack的热更新是如何做到的？说明其原理？"></a>8.webpack的热更新是如何做到的？说明其原理？</h4><p>webpack的热更新又称热替换（Hot Module Replacement），缩写为HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p>
<p>原理：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atARp9.jpg" alt="atARp9.jpg"></p>
<p>首先要知道server端和client端都做了处理工作</p>
<p>1、第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。<br>2、第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。<br>3、第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。<br>4、第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。<br>5、webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。<br>6、HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。<br>7、而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。<br>8、最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</p>
<h4 id="9-如何利用webpack来优化前端性能？（提高性能和体验）"><a href="#9-如何利用webpack来优化前端性能？（提高性能和体验）" class="headerlink" title="9.如何利用webpack来优化前端性能？（提高性能和体验）"></a>9.如何利用webpack来优化前端性能？（提高性能和体验）</h4><p>用webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运行快速高效。</p>
<ul>
<li>压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用webpack的UglifyJsPlugin和ParallelUglifyPlugin来压缩JS文件， 利用cssnano（css-loader?minimize）来压缩css</li>
<li>利用CDN加速。在构建过程中，将引用的静态资源路径修改为CDN上对应的路径。可以利用webpack对于output参数和各loader的publicPath参数来修改资源路径</li>
<li>删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数–optimize-minimize来实现</li>
<li>提取公共代码。</li>
</ul>
<h4 id="10-如何提高webpack的构建速度？"><a href="#10-如何提高webpack的构建速度？" class="headerlink" title="10.如何提高webpack的构建速度？"></a>10.如何提高webpack的构建速度？</h4><p>1、多入口情况下，使用CommonsChunkPlugin来提取公共代码<br>2、通过externals配置来提取常用库<br>3、利用DllPlugin和DllReferencePlugin预编译资源模块 通过DllPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，再通过DllReferencePlugin将预编译的模块加载进来。<br>4、使用Happypack 实现多线程加速编译<br>5、使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度<br>6、使用Tree-shaking和Scope Hoisting来剔除多余代码</p>
<h4 id="11-怎么配置单页应用？怎么配置多页应用？"><a href="#11-怎么配置单页应用？怎么配置多页应用？" class="headerlink" title="11.怎么配置单页应用？怎么配置多页应用？"></a>11.怎么配置单页应用？怎么配置多页应用？</h4><p>单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可，这里不再赘述</p>
<p>多页应用的话，可以使用webpack的 AutoWebPlugin来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：</p>
<ul>
<li>每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套css样式表</li>
<li>随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</li>
</ul>
<h4 id="12-npm打包时需要注意哪些？如何利用webpack来更好的构建？"><a href="#12-npm打包时需要注意哪些？如何利用webpack来更好的构建？" class="headerlink" title="12.npm打包时需要注意哪些？如何利用webpack来更好的构建？"></a>12.npm打包时需要注意哪些？如何利用webpack来更好的构建？</h4><p> Npm是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是JS模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于NPM模块上传的方法可以去官网上进行学习，这里只讲解如何利用webpack来构建。</p>
<p> NPM模块需要注意以下问题：</p>
<p>1、要支持CommonJS模块化规范，所以要求打包后的最后结果也遵守该规则。<br>2、Npm模块使用者的环境是不确定的，很有可能并不支持ES6，所以打包的最后结果应该是采用ES5编写的。并且如果ES5是经过转换的，请最好连同SourceMap一同上传。<br>3、Npm包大小应该是尽量小（有些仓库会限制包大小）<br>4、发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。<br>5、UI组件类的模块应该将依赖的其它资源文件，例如.css文件也需要包含在发布的模块里。</p>
<p>基于以上需要注意的问题，我们可以对于webpack配置做以下扩展和优化：</p>
<p>1、CommonJS模块化规范的解决方案： 设置output.libraryTarget=’commonjs2’使输出的代码符合CommonJS2 模块化规范，以供给其它模块导入使用<br>2、输出ES5代码的解决方案：使用babel-loader把 ES6 代码转换成 ES5 的代码。再通过开启devtool: ‘source-map’输出SourceMap以发布调试。<br>3、Npm包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改.babelrc文件，为其加入transform-runtime插件<br>4、不能将依赖模块打包到NPM模块中的解决方案：使用externals配置项来告诉webpack哪些模块不需要打包。<br>5、对于依赖的资源文件打包的解决方案：通过css-loader和extract-text-webpack-plugin来实现，配置如下：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atiI0S.jpg" alt="atiI0S.jpg"></p>
<h4 id="13-如何在vue项目中实现按需加载？"><a href="#13-如何在vue项目中实现按需加载？" class="headerlink" title="13.如何在vue项目中实现按需加载？"></a>13.如何在vue项目中实现按需加载？</h4><p>Vue UI组件库的按需加载 为了快速开发前端项目，经常会引入现成的UI组件库如ElementUI、iView等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</p>
<p>不过很多组件库已经提供了现成的解决方案，如Element出品的babel-plugin-component和AntDesign出品的babel-plugin-import 安装以上插件后，在.babelrc配置中或babel-loader的参数中进行设置，即可实现组件按需加载了。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atALpd.png" alt="atALpd.png"></p>
<p>单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</p>
<p>通过import(<em>)语句来控制加载时机，webpack内置了对于import(</em>)的解析，会将import(<em>)中引入的模块作为一个新的入口在生成一个chunk。 当代码执行到import(</em>)语句时，会去加载Chunk对应生成的文件。import()会返回一个Promise对象，所以为了让浏览器支持，需要事先注入Promise polyfill</p>
<p><strong>参考文章</strong></p>
<ul>
<li>关于 webpack 的面试题有哪些？</li>
<li>前端面试之webpack面试常见问题</li>
<li>《深入浅出webpack》电子版</li>
<li>webpack 构建性能优化策略小结</li>
</ul>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/08/02/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="给定一个整数数组nums和一个目标值target-请你在该数组中找出和为目标值的那个两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。"><a href="#给定一个整数数组nums和一个目标值target-请你在该数组中找出和为目标值的那个两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。" class="headerlink" title="给定一个整数数组nums和一个目标值target,请你在该数组中找出和为目标值的那个两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。"></a>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>,请你在该数组中找出和为目标值的那个<code>两个</code>整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</h3><p><strong>示例:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为num[0] + num[1] = 2 + 7 = 9</span><br><span class="line"></span><br><span class="line">所以，返回[0,1]</span><br></pre></td></tr></table></figure>
<p><strong>解题方法:</strong></p>
<p>1、暴力法</p>
<ul>
<li>使用两层循环，外层循环计算当前元素与target之间的差值，内循环寻找该差值，若找到该差值，则返回两个元素的下标</li>
<li>时间复杂度: O(n^2)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; nums.length; j++&gt;)&#123;</span><br><span class="line">     <span class="keyword">var</span> dif =  target - nums[i];</span><br><span class="line">     <span class="comment">/* j = i + 1 的目的是减少重复计算和避免两个元素下标相同 */</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(nums[j] == dif)</span><br><span class="line">       <span class="keyword">return</span> [i, j];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>2、利用数组减少查询时间</p>
<ul>
<li><p>在暴力法中，内层循环查找差值很浪费时间，那么如何减少查询时间呢？利用数组就可以减少查询时间。</p>
</li>
<li><p>使用一层循环，每遍历到一个元素就计算该元素与target之间的差值dif，然后以dif为下标到数组temp中寻找，如果temp[dif]有值(即不是undefined)，则返回两个元素在数组nums的下标，如果没有找到，则将当前元素存入数组temp中(下标:nums[i],value:i)。</p>
</li>
<li><p>时间复杂度: O(n)</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++&gt;)&#123;</span><br><span class="line">    <span class="keyword">var</span> dif = target-nums[i];</span><br><span class="line">    <span class="keyword">if</span>(temp[dif] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> [temp[dif], i];</span><br><span class="line">    &#125;</span><br><span class="line">    temp[nums[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是函数柯里化</title>
    <url>/2020/11/10/%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    <content><![CDATA[<h4 id="1、初步认识"><a href="#1、初步认识" class="headerlink" title="1、初步认识"></a>1、初步认识</h4><p>柯里化，即Currying，可以使函数变得更加灵活。我们可以一次性传入多个参数调用它；也可以只传入一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">1</span>)); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add1 = add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add1(<span class="number">1</span>)); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">1</span>)); <span class="comment">// 输出11</span></span><br></pre></td></tr></table></figure>
<p>代码中，我们可以一次性传入2个1作为参数add(1)(1)，也可以传入1个参数之后获取add1与add10函数，这样使用起来非常灵活。</p>
<p>在实际项目中，柯里化通常有以下三大作用</p>
<ul>
<li>参数复用</li>
<li>提前确认</li>
<li>延迟运行</li>
</ul>
<h5 id="作用一、参数复用"><a href="#作用一、参数复用" class="headerlink" title="作用一、参数复用"></a>作用一、参数复用</h5><p>所谓参数复用，就是利用闭包的原理，让我们前面传输过来的参数不要被释放掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常封装check函数进行字符串正则匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">reg, txt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reg.test(txt)</span><br><span class="line">&#125;</span><br><span class="line">check(<span class="regexp">/\d+/g</span>, <span class="string">&#x27;test&#x27;</span>)        <span class="comment">//false</span></span><br><span class="line">check(<span class="regexp">/[a-z]+/g</span>, <span class="string">&#x27;test&#x27;</span>)     <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 使用柯里化函数进行字符串正则匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curryingCheck</span>(<span class="params">reg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">txt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reg.test(txt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hasNumber = curryingCheck(<span class="regexp">/\d+/g</span>)</span><br><span class="line"><span class="keyword">var</span> hasLetter = curryingCheck(<span class="regexp">/[a-z]+/g</span>)</span><br><span class="line">hasNumber(<span class="string">&#x27;test1&#x27;</span>)      <span class="comment">// true</span></span><br><span class="line">hasNumber(<span class="string">&#x27;testtest&#x27;</span>)   <span class="comment">// false</span></span><br><span class="line">hasLetter(<span class="string">&#x27;21212&#x27;</span>)      <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h5 id="作用二、提前确认"><a href="#作用二、提前确认" class="headerlink" title="作用二、提前确认"></a>作用二、提前确认</h5><p>这一特性经常是用来对浏览器的兼容性做出一些判断并初始化api，比如说我们目前用来监听事件大部分情况是使用addEventListener来实现的，但是一些较久的浏览器并不支持该方法，所以在使用之前，我们可以先做一次判断，之后便可以省略这个步骤了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> on = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">element, event, handler</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">                element.addEventListener(event, handler, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">element, event, handler</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">                element.attachEvent(<span class="string">&#x27;on&#x27;</span> + event, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h5 id="作用三、-延迟运行"><a href="#作用三、-延迟运行" class="headerlink" title="作用三、 延迟运行"></a>作用三、 延迟运行</h5><p>js中的bind这个方法，用到的就是柯里化的这个特征。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _this.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是纯函数</title>
    <url>/2020/11/09/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%AF%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用。"><a href="#纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用。" class="headerlink" title="纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用。"></a>纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用。</h3><p>下面我们来分别说明一下概念中的两个条件：</p>
<blockquote>
<h4 id="返回结果只依赖其参数"><a href="#返回结果只依赖其参数" class="headerlink" title="返回结果只依赖其参数"></a>返回结果只依赖其参数</h4></blockquote>
<p>返回值只和函数参数有关，与外部无关。无论外部发生什么样的变化，函数的返回值都不会改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  非纯函数 返回值与a相关，无法预料</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">b</span>) =&gt;</span> a + b</span><br><span class="line">foo(<span class="number">2</span>)                    <span class="comment">// =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯函数 返回结果只依赖于它的参数 x 和 b，foo(1, 2) 永远是 3。今天是 3，明天也是 3，在服务器跑是 3，在客户端跑也 3，不管你外部发生了什么变化，foo(1, 2) 永远是 3。只要 foo 代码不改变，你传入的参数是确定的，那么 foo(1, 2) 的值永远是可预料的。</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">x, b</span>) =&gt;</span> x + b</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="函数执行过程中没有副作用"><a href="#函数执行过程中没有副作用" class="headerlink" title="函数执行过程中没有副作用"></a>函数执行过程中没有副作用</h3></blockquote>
<p>函数执行的过程中对外部产生了可观察的变化，我们就说函数产生了副作用。<br>例如修改外部的变量、调用DOM API修改页面，发送Ajax请求、调用window.reload刷新浏览器甚至是console.log打印数据，都是副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无副作用</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">obj, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.x + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counter = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line">foo(counter, <span class="number">2</span>)                       <span class="comment">// =&gt; 3</span></span><br><span class="line">counter.x                             <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改一下 ，再观察(修改了外部变量，产生了副作用。)</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">obj, b</span>) =&gt;</span> &#123;</span><br><span class="line">  obj.x = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> obj.x + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counter = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line">foo(counter, <span class="number">2</span>)                       <span class="comment">// =&gt; 4</span></span><br><span class="line">counter.x                             <span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>从单页应用改造成多页应用</title>
    <url>/2020/08/02/%E4%BB%8E%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%94%B9%E9%80%A0%E6%88%90%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="从单页应用改造成多页应用"><a href="#从单页应用改造成多页应用" class="headerlink" title="从单页应用改造成多页应用"></a>从单页应用改造成多页应用</h3><h4 id="需求再现"><a href="#需求再现" class="headerlink" title="需求再现"></a>需求再现</h4><p>项目A/B/C的内容是交叉的，有的页面不同，有的页面和组件是公用的，例如A项目多了个人中心及其里面所有内容（最全的一个项目，但是是放在微信中的，需要获取微信授权），B项目是通用版的项目（也就是说可以放在微信，也可以放在app内，不需要获取授权之类的。）,C项目是A/B项目中共有的一个页面功能抽取出来了。<br>所以有的时候比如说这块功能需要调整，那么就得A/B/C三个项目关于这块的功能与页面也要一起调整。</p>
<h4 id="关于动态组件"><a href="#关于动态组件" class="headerlink" title="关于动态组件"></a>关于动态组件</h4><p>这一块做的主要是<components :is="xxx">配合vuex来做的。<br>前端页面改成上述模式，具体的组件排列顺序由后台传过来，比如说请求接口的时候，告诉它这是在D页面，并且把相应的机构号6传过去，后台传给我一个组件数组，moduleList:[‘2’, ‘1’, ‘3’, ‘4’]，然后我前端的<components :is="item" v-for="(item, index) in moduleList" :key="index">会按照moduleList里的组件顺序来动态渲染组件，之前一些父子组件传数据，在这里就变得不太适用了，所以这里的数据改用vuex存储。考虑到vuex在刷新数据丢失的问题，部分比较重要的，不想重新请求的，改用sessionStorage存储。</p>
<h4 id="关于多入口多出口"><a href="#关于多入口多出口" class="headerlink" title="关于多入口多出口"></a>关于多入口多出口</h4><p>其实就是最开始的项目入口是<code>App.vue</code>和<code>main.js</code>，打包出来的出入口是<code>index.html</code>，然后现在增加了两个，我这边是增加了<code>genneral.js</code>和<code>genneral.html</code>以及<code>single.js</code>和<code>single.html</code>。</p>
<ul>
<li>1.首先要更改vue-cli生成的webpack里的参数，声明一下我这个版本的webpack版本还是2.6.x的，比较老了，现在应该都到4.x.x了吧。</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/atiRSI.png" alt="atiRSI.png"></p>
<p>PS：路由和store记得要各自独立，因为我这里的vuex很少只涉及一两个模块。并且仅仅是传递数据之类的，所以这里没有做成独立的。</p>
<ul>
<li>2.修改build/webpack.base.conf.js</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/atiWlt.png" alt="atiWlt.png"></p>
<ul>
<li>3.修改 build/webpack.dev.conf.js</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/atif6P.png" alt="atif6P.png"></p>
<ul>
<li>4.修改 build/webpack.prod.conf.js</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/atihOf.png" alt="atihOf.png"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/ati5m8.png" alt="ati5m8.png"></p>
<ul>
<li>5.修改 config/index.js<br><img src="https://s1.ax1x.com/2020/08/02/atioTg.png" alt="atioTg.png"></li>
</ul>
<blockquote>
<p>理一下对应关系</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">main.js ==&gt; App.vue ==&gt; router/index.js  A项目</span><br><span class="line">general.js ==&gt; general.vue ==&gt; router/general.js  B项目</span><br><span class="line">single.js ==&gt; single.vue ==&gt; router/single.js C项目</span><br></pre></td></tr></table></figure>
<blockquote>
<p>部署的时候分三个不同的url</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xxxxx/index.html对应A项目</span><br><span class="line">xxxxx/general.html 对应B项目</span><br><span class="line">xxxxx/single.html对应C项目</span><br></pre></td></tr></table></figure>
<p>至于页面中的差异，我是通过v-if来控制，A项目的D页面是否有顶部tab，B项目的D页面是否有底部footer。<br>因为这些页面大致是一样，仅有部分微调。所以改成用v-if来控制。</p>
<p>大神给的<a class="link"   href="https://github.com/muzi8/multiPage-demo" >demo<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>从输入url到页面加载完成发生了什么(详解)</title>
    <url>/2020/08/02/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88(%E8%AF%A6%E8%A7%A3)/</url>
    <content><![CDATA[<p>这是一道经典的面试题，这道题没有一个标准的答案，它涉及很多的知识点，面试官会通过这道题了解你对哪一方面的知识比较擅长，然后继续追问看看你的掌握程度。当然我写的这些也只是我的一些简单的理解，从前端的角度出发，我觉得首先回答必须包括几个基本的点，然后在根据你的理解深入回答。</p>
<p>1、浏览器的地址栏输入URL并按下回车。</p>
<p>　　2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。</p>
<p>　　3、DNS解析URL对应的IP。</p>
<p>　　4、根据IP建立TCP连接（三次握手）。</p>
<p>　　5、HTTP发起请求。</p>
<p>　　6、服务器处理请求，浏览器接收HTTP响应。</p>
<p>　　7、渲染页面，构建DOM树。</p>
<p>　　8、关闭TCP连接（四次挥手）。</p>
<p>　　说完整个过程的几个关键点后我们再来展开的说一下。<br><strong>一、URL</strong></p>
<p>我们常见的RUL是这样的:<code>http://www.baidu.com</code>, 这个域名由三部分组成：协议名、域名、端口号，这里端口是默认所以隐藏。除此之外URL还会包含一些路径、查询和其他片段，例如：<code>http://www.tuicool.com/search?kw=%E4%</code>。我们最常见的的协议是HTTP协议，除此之外还有加密的HTTPS协议、FTP协议、FILe协议等等。URL的中间部分为域名或者是IP，之后就是端口号了。通常端口号不常见是因为大部分的都是使用默认端口，如HTTP默认端口80，HTTPS默认端口443。说到这里可能有的面试官会问你同源策略，以及更深层次的跨域的问题，我今天就不在这里展开了</p>
<p><strong>二、缓存</strong></p>
<p>说完URL我们说说浏览器缓存,HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为强制缓存，对比缓存。</p>
<p>　　<strong>强制缓存判断HTTP首部字段：cache-control，Expires。</strong></p>
<p>　　Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用。</p>
<p>　　cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。</p>
<p>　　<strong>对比缓存通过HTTP的last-modified，Etag字段进行判断。</strong></p>
<p>　　last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。</p>
<p>　　Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化，如果变化则返回新资源，否则返回304。</p>
<p>在第一次请求服务器的时候在获取资源之后是会先把该资源缓存在本地的，同时服务器response返回了一个响应头ETag，ETag全称Entity Tag，用来标识一个资源。在具体的实现中，ETag可以是资源的hash值，也可以是一个内部维护的版本号。但不管怎样，ETag应该能反映出资源内容的变化，这是Http缓存可以正常工作的基础。服务器对于hello world这个字符串使用上述返回的ETag来表示，只要hello world这个资源不变，这个Etag就不会变。</p>
<p>客户端第二次请求服务器的时候，利用请求头If-None-Match来告诉服务器自己已经有个ETag为xxx的资源。如果服务器上的资源没有变化，也就是说服务器上的资源的ETag也是xxx的话，服务器就不会再返回该资源的内容，而是返回一个304的响应，告诉浏览器该资源没有变化，缓存有效，浏览器将直接调用本地缓存。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYXzPf.png" alt="aYXzPf.png"></p>
<p><strong>三、DNS域名解析</strong></p>
<p>我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。</p>
<p>　　首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。</p>
<p>　　如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。</p>
<p>　　如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。</p>
<p>　　最后迭代查询，按根域服务器 -&gt;顶级域,.cn-&gt;第二层域，hb.cn -&gt;子域，<a class="link"   href="http://www.hb.cn的顺序找到ip地址./" >www.hb.cn的顺序找到IP地址。<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYXvIP.jpg" alt="aYXvIP.jpg"></p>
<p>递归查询，按上一级DNS服务器-&gt;上上级-&gt;….逐级向上查询找到IP地址。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYXXVI.jpg" alt="aYXXVI.jpg"></p>
<p><strong>四、TCP连接</strong></p>
<p>在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。</p>
<p>　　第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； </p>
<p>　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>
<p>　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<p>　　完成三次握手，客户端与服务器开始传送数据。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYXLqA.png" alt="aYXLqA.png"></p>
<p><strong>五、浏览器向服务器发送HTTP请求</strong></p>
<p>完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。<br><img src="https://s1.ax1x.com/2020/08/02/aYXjat.jpg" alt="aYXjat.jpg"></p>
<p><strong>六、浏览器接收响应</strong></p>
<p>服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。</p>
<p>　　状态码主要包括以下部分</p>
<p>　　1xx：指示信息–表示请求已接收，继续处理。</p>
<p>　　2xx：成功–表示请求已被成功接收、理解、接受。</p>
<p>　　3xx：重定向–要完成请求必须进行更进一步的操作。</p>
<p>　　4xx：客户端错误–请求有语法错误或请求无法实现。</p>
<p>　　5xx：服务器端错误–服务器未能实现合法的请求。</p>
<p>　　响应头主要由Cache-Control、 Connection、Date、Pragma等组成。</p>
<p>　　响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。</p>
<p><strong>七、页面渲染</strong></p>
<p>如果说响应的内容是HTML文档的话，就需要浏览器进行解析渲染呈现给用户。整个过程涉及两个方面：解析和渲染。在渲染页面之前，需要构建DOM树和CSSOM树。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjSG8.png" alt="aYjSG8.png"></p>
<p>在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。这里就涉及了两个重要概念：Reflow和Repaint。</p>
<p>　　Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。</p>
<p>　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。</p>
<p>　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。</p>
<p>下面这些动作有很大可能会是成本比较高的：</p>
<p>1、增加、删除、修改DOM结点时，会导致Reflow或Repaint</p>
<p>2、移动DOM的位置，或是搞个动画的时候</p>
<p>3、内容发生变化</p>
<p>4、修改CSS样式的时候</p>
<p>5、Resize窗口的时候（移动端没有这个问题），或是滚动的时候</p>
<p>6、修改网页的默认字体时</p>
<p><strong>基本上来说，reflow有如下的几个原因：</strong></p>
<p>1、Initial，网页初始化的时候</p>
<p>2、Incremental，一些js在操作DOM树时</p>
<p>3、Resize，其些元件的尺寸变了</p>
<p>4、StyleChange，如果CSS的属性发生变化了</p>
<p>5、Dirty，几个Incremental的reflow发生在同一个frame的子树上</p>
<p>八、关闭TCP连接或继续保持连接</p>
<p>通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYj9xg.png" alt="aYj9xg.png"></p>
<p>第一次挥手是浏览器发完数据后，发送FIN请求断开连接。</p>
<p>　　第二次挥手是服务器发送ACK表示同意，如果在这一次服务器也发送FIN请求断开连接似乎也没有不妥，但考虑到服务器可能还有数据要发送，所以服务器发送FIN应该放在第三次挥手中。</p>
<p>　　这样浏览器需要返回ACK表示同意，也就是第四次挥手。</p>
<p>至此从浏览器地址栏输入URL到页面呈现到你面前的整个过程就分析完了。</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>关于跨域,以及跨域的几种方式</title>
    <url>/2020/08/02/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F-%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>首先我们来想一想</p>
<pre><code>为什么会有跨域这个名词的出现呢?

跨域又是什么呢?为何要跨域?

浏览器的同源策略又是什么?怎么解决?

jsonp又是什么?

跨域的原理又是什么呢?</code></pre>
<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释:"></a>名词解释:</h4><p><strong>跨域:</strong></p>
<p>浏览器对于javascript的同源策略的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据(因为a.cn和b.cn是不同域),所以跨域就出现了.</p>
<p>上面提到的,同域的概念又是什么呢??? 简单的解释就是相同域名,端口相同,协议相同。</p>
<p><strong>同源策略:</strong></p>
<p>请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同.</p>
<p>比如:我在本地上的域名是study.cn,请求另外一个域名一段数据</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjpRS.png" alt="aYjpRS.png"></p>
<p>这个时候在浏览器上会报错:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjPMQ.png" alt="aYjPMQ.png"></p>
<p>这个就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险~</p>
<p>| study.cn/json/jsonp/jsonp.html |<br>| ——— | ——— | ——— |<br>|  请求地址| 形式| 结果<br>| <a class="link"   href="http://study.cn/test/a.html|" >http://study.cn/test/a.html|<i class="fas fa-external-link-alt"></i></a> 同一域名,不同文件夹| 成功<br>| <a class="link"   href="http://study.cn/json/jsonp/jsonp.html|" >http://study.cn/json/jsonp/jsonp.html|<i class="fas fa-external-link-alt"></i></a> 同一域名,统一文件夹| 成功<br>| <a class="link"   href="http://a.study.cn/json/jsonp/jsonp.html|" >http://a.study.cn/json/jsonp/jsonp.html|<i class="fas fa-external-link-alt"></i></a> 不同域名,文件路径相同| 失败<br>| <a class="link"   href="http://study.cn:8080/json/jsonp/jsonp.html|" >http://study.cn:8080/json/jsonp/jsonp.html|<i class="fas fa-external-link-alt"></i></a> 同一域名,不同端口| 失败<br>| <a class="link"   href="https://study.cn/json/jsonp/jsonp.html|" >https://study.cn/json/jsonp/jsonp.html|<i class="fas fa-external-link-alt"></i></a> 同一域名,不同协议| 失败</p>
<p><strong>jsonp:</strong></p>
<p>jsonp 全称是JSON with Padding,是为了解决跨域请求资源而产生的解决方案,是一种依靠开发人员创造出的一种非官方跨域数据交互协议。</p>
<p>一个是描述信息的格式，一个是信息传递双方约定的方法。</p>
<p><strong>jsonp的产生:</strong></p>
<p>1.AJAX直接请求普通文件存在跨域无权限访问的问题,不管是静态页面也好.</p>
<p>2.不过我们在调用js文件的时候又不受跨域影响,比如引入jquery框架的,或者是调用相片的时候</p>
<p>3.凡是拥有src这个属性的标签都可以跨域例如<code>&lt;script&gt;&lt;img&gt;&lt;iframe&gt;</code></p>
<p>4.如果想通过纯web端跨域访问数据只有一种可能,那就是把远程服务器上的数据装进js格式的文件里.</p>
<p>5.而json又是一个轻量级的数据格式,还被js原生支持</p>
<p>6.为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback 参数给服务端，</p>
<p><strong>demo1:基于script标签实现跨域</strong></p>
<p>举个例子:我在<a class="link"   href="http://study.cn/json/jsonp/jsonp_2.html%E4%B8%8B%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AA%E8%BF%9C%E7%A8%8B%E7%9A%84js%E6%96%87%E4%BB%B6" >http://study.cn/json/jsonp/jsonp_2.html下请求一个远程的js文件<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line"> &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     var message = <span class="keyword">function</span>(data) &#123;</span><br><span class="line">         alert(data[1].title);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://web.cn/js/message.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&#x27;testdiv&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>远程的message.js文件是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">message([</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;天津新闻联播，雷人搞笑的男主持人&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;楼市告别富得流油 专家:房价下跌是大概率事件&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;法国人关注时事 八成年轻人每天阅读新闻&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;新闻中的历史,历史中的新闻&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;东阳新闻20140222&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;6&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;23个职能部门要增加新闻发布频次&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;7&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;《贵州新闻联播》 中国美丽乡村&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;8&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;朝韩离散家属团聚首轮活动结束&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;9&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;索契冬奥会一天曝出两例兴奋剂事件&quot;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;10&quot;</span>, <span class="string">&quot;title&quot;</span>:<span class="string">&quot;今天中国多地仍将出现中度霾&quot;</span>&#125;</span><br><span class="line"> ]);</span><br></pre></td></tr></table></figure>
<p>这个时候我们得到的相应头是:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjirj.png" alt="aYjirj.png"></p>
<p>这样就实现跨域成功了,因为服务端返回数据时会将这个callback参数(message)作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>
<p><strong>demo2: 基于script标签实现跨域</strong></p>
<p>让远程js知道它应该调用的本地函数叫什么名字,只要服务端提供的js脚本是动态生成的就好了,这样前台只需要传一个callback参数过去告诉服务端,我需要XXX代码,于是服务端就会得到相应了.</p>
<p>例如 在<a class="link"   href="http://study.cn/json/jsonp/jsonp_3.html%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82" >http://study.cn/json/jsonp/jsonp_3.html页面请求<i class="fas fa-external-link-alt"></i></a> <a class="link"   href="http://192.168.31.137/train/test/jsonpthree" >http://192.168.31.137/train/test/jsonpthree<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    var messagetow = <span class="keyword">function</span>(data)&#123;</span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;;</span><br><span class="line">    var url = <span class="string">&quot;http://192.168.31.137/train/test/jsonpthree?callback=messagetow&quot;</span>;</span><br><span class="line">    var script = document.createElement(<span class="string">&#x27;script&#x27;</span>); </span><br><span class="line">    script.setAttribute(<span class="string">&#x27;src&#x27;</span>, url); </span><br><span class="line">    document.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[0].appendChild(script);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>得到的响应头是:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjFqs.png" alt="aYjFqs.png"></p>
<p><strong>demo3:  基于jquery跨域</strong></p>
<p>那么如何用jquery来实现我们的跨域呢???jquery已经把跨域封装到ajax上了,而且封装得非常的好,使用起来也特别方便</p>
<p>如果是一般的ajax请求:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        url:<span class="string">&#x27;http://192.168.31.137/train/test/testjsonp&#x27;</span>,</span><br><span class="line">        <span class="built_in">type</span> : <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        dataType : <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">        success:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">            alert(2);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>那么在浏览器中会报错:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjAZn.png" alt="aYjAZn.png"></p>
<p>jsonp形式的ajax请求:并且通过get请求的方式传入参数,</p>
<p><strong>注意:跨域请求是只能是get请求不能使用post请求</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var name = <span class="string">&#x27;chenshishuo&#x27;</span>;</span><br><span class="line">    var sex = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">    var address = <span class="string">&#x27;shenzhen&#x27;</span>;</span><br><span class="line">    var looks = <span class="string">&#x27;handsome &#x27;</span>;</span><br><span class="line">     $.ajax(&#123;</span><br><span class="line">         <span class="built_in">type</span> : <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">         url:<span class="string">&#x27;http://192.168.31.137/train/test/testjsonp&#x27;</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">            name : name,</span><br><span class="line">            sex : sex,</span><br><span class="line">            address : address,</span><br><span class="line">            looks : looks,</span><br><span class="line">        &#125;,</span><br><span class="line">        cache :<span class="literal">false</span>,</span><br><span class="line">        jsonp: <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">        jsonpCallback:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        dataType : <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        success:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">            alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input id=<span class="string">&#x27;inputtest&#x27;</span> value=<span class="string">&#x27;546&#x27;</span> name=<span class="string">&#x27;inputtest&#x27;</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">&#x27;testdiv&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>jsonp 传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(默认为:callback)</strong><br><strong>jsonpCallback 自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名</strong></p>
<p>看看请求头和相应头吧</p>
<p>请求头:jquery会自动带入callback参数,当服务端获取到这个参数后,返回回来.(响应头)</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjVI0.png" alt="aYjVI0.png"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjEaq.png" alt="aYjEaq.png"></p>
<p>现在是不是明白了跨域的基本原理,和基本的使用方法呢??</p>
<p>上面我们说到img中的src可以自动调用远程图片的(这个比较简单我在这里就不说了)</p>
<p>还有ifram请求:</p>
<p>基于iframe实现的跨域要求两个域具有aa.xx.com,bb.xx.com 这种特点，</p>
<p>也就是两个页面必须属于一个基础域（例如都是xxx.com)，使用同一协议和同一端口，这样在两个页面中同时添加document.domain，就可以实现父页面调用子页面的函数</p>
<p><strong>要点就是 :通过修改document.domain来跨子域</strong></p>
<p><strong>demo4: 通过iframe来跨子域</strong></p>
<p><a class="link"   href="http://a.study.cn/a.html" >http://a.study.cn/a.html<i class="fas fa-external-link-alt"></i></a> 请求 <a class="link"   href="http://b.study.cn/b.html" >http://b.study.cn/b.html<i class="fas fa-external-link-alt"></i></a></p>
<p>在a.html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">        &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">            document.domain = <span class="string">&#x27;study.cn&#x27;</span>;</span><br><span class="line">            <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">                alert(document.getElementById(<span class="string">&#x27;a&#x27;</span>).contentWindow);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;iframe id=<span class="string">&#x27;a&#x27;</span> src=<span class="string">&#x27;http://b.study.cn/b.html&#x27;</span> onload=<span class="string">&#x27;test()&#x27;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在b.html:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">document.domain = <span class="string">&#x27;study.cn&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    我是b.study.cn的body</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>运行效果截图:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYjeiV.png" alt="aYjeiV.png"></p>
<p>我们就可以通过js访问到iframe中的各种属性和对象了</p>
<p>如果你想在<a class="link"   href="http://a.study.cn/a.html%E9%A1%B5%E9%9D%A2%E4%B8%AD%E9%80%9A%E8%BF%87ajax%E7%9B%B4%E6%8E%A5%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2http://b.study.cn/b.html%EF%BC%8C%E5%8D%B3%E4%BD%BF%E4%BD%A0%E8%AE%BE%E7%BD%AE%E4%BA%86%E7%9B%B8%E5%90%8C%E7%9A%84document.domain%E4%B9%9F%E8%BF%98%E6%98%AF%E4%B8%8D%E8%A1%8C%E7%9A%84" >http://a.study.cn/a.html页面中通过ajax直接请求页面http://b.study.cn/b.html，即使你设置了相同的document.domain也还是不行的<i class="fas fa-external-link-alt"></i></a>.</p>
<p>所以修改document.domain的方法只适用于不同子域的框架(父类与子类)间的交互。</p>
<p>如果想通过使用ajax的方法去与不同子域间的数据交互或者是js调用，只有两种方法,一种是使用jsonp的方法外，还有一种是使用iframe来做一个代理。</p>
<p>原理就是让这个 iframe载入一个与你想要通过ajax获取数据的目标页面处在相同的域的页面，所以这个iframe中的页面是可以正常使用ajax去获取你要的数据 的，</p>
<p>然后就是通过我们刚刚讲得修改document.domain的方法，让我们能通过js完全控制这个iframe，这样我们就可以让iframe去发 送ajax请求，然后收到的数据我们也可以获得了。</p>
<p>上面的所有知识点,应该可以解决第一开始提出的问题了吧.</p>
]]></content>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>判断一个对象是否为空对象</title>
    <url>/2020/12/07/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>)]: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  value: <span class="string">&quot;john&quot;</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span> <span class="comment">// 不可枚举</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="方法一：-利用-for…in-循环"><a href="#方法一：-利用-for…in-循环" class="headerlink" title="方法一： 利用 for…in 循环"></a>方法一： 利用 for…in 循环</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> isEmpty(obj) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i <span class="keyword">in</span> Object.keys(obj)) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span> // 进入循环即不为空</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(isEmpty(obj)) // <span class="literal">true</span></span><br><span class="line">console.log(isEmpty(obj1)) // <span class="literal">false</span></span><br><span class="line">console.log(isEmpty(obj2)) // <span class="literal">true</span></span><br><span class="line">console.log(isEmpty(obj3)) // <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="方法二：利用JSON-stringify-转化为字符串"><a href="#方法二：利用JSON-stringify-转化为字符串" class="headerlink" title="方法二：利用JSON.stringify()转化为字符串"></a>方法二：利用JSON.stringify()转化为字符串</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = <span class="function">(<span class="params">obj</span>) =&gt;</span> (<span class="built_in">JSON</span>.stringify(obj) === <span class="string">&#x27;&#123;&#125;&#x27;</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj1)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj2)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h5 id="方法三-使用Object-keys-将取出对象中的键名，再判断长度"><a href="#方法三-使用Object-keys-将取出对象中的键名，再判断长度" class="headerlink" title="方法三: 使用Object.keys()将取出对象中的键名，再判断长度"></a>方法三: 使用Object.keys()将取出对象中的键名，再判断长度</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = <span class="function">(<span class="params">obj</span>) =&gt;</span> (<span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj1)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj2)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(obj3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>由此可见，以上三种方法不能判断对象中的不可枚举属性。</p>
<p>如果对象中含有不可枚举属性，我们又需要找出这些属性，就可以使用 <code>Object.getOwnPropertyNames()</code> 和 <code>Object.getOwnPropertySymbols() </code> 这两个API。</p>
<p><code>Object.getOwnPropertyNames()</code>  返回对象中的所有属性（不包括symbol）</p>
<p><code>Object.getOwnPropertySymbols() </code> 只返回对象中的symbol属性</p>
<p>所以我们可以结合它们：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> isEmpty(obj) &#123;</span><br><span class="line">  <span class="built_in">return</span>  !Object.getOwnPropertyNames(obj).length &amp;&amp;  !Object.getOwnPropertySymbols(obj).length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(isEmpty(obj)) // <span class="literal">true</span></span><br><span class="line">console.log(isEmpty(obj1)) // <span class="literal">false</span></span><br><span class="line">console.log(isEmpty(obj2)) // <span class="literal">false</span></span><br><span class="line">console.log(isEmpty(obj3)) // <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于面向对象</title>
    <url>/2021/01/04/%E5%85%B3%E4%BA%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h4 id="ES5实现面向对象"><a href="#ES5实现面向对象" class="headerlink" title="ES5实现面向对象"></a>ES5实现面向对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 面向对象继承  组合使用原型链和构造函数</span></span><br><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, friends</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    <span class="comment">// this.say = function()&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(this.name+&#x27;的朋友&#x27;+this.friends+&#x27;今年&#x27;+this.age+&#x27;岁了&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类方法</span></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&#x27;的朋友&#x27;</span>+<span class="built_in">this</span>.friends+<span class="string">&#x27;今年&#x27;</span>+<span class="built_in">this</span>.age+<span class="string">&#x27;岁了&#x27;</span>, <span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, friends, school</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 继承父类所有实例属性(获得父类构造函数中的属性)</span></span><br><span class="line">    Person.call(<span class="built_in">this</span>, name, age, friends)</span><br><span class="line">    <span class="built_in">this</span>.school = school <span class="comment">// 添加新的子类属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类的原型方法 (获得父类原型链上的属性和方法)</span></span><br><span class="line"><span class="comment">// ES3 </span></span><br><span class="line"><span class="comment">// Student.prototype = new Person()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 Object.create()</span></span><br><span class="line"><span class="comment">// 从本质上讲，createObject()对传入其中的对象执行了一次浅复制。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function createObject(proto) &#123;</span></span><br><span class="line"><span class="comment">//     function F() &#123; &#125;</span></span><br><span class="line"><span class="comment">//     F.prototype = proto;</span></span><br><span class="line"><span class="comment">//     return new F();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Student.prototype = Object.create(Person.prototype)</span></span><br><span class="line"><span class="comment">// // 设置 constructor 属性指向 Student</span></span><br><span class="line"><span class="comment">// Student.prototype.constructor = Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增子类方法</span></span><br><span class="line">Student.prototype.saySchool = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&#x27;的朋友&#x27;</span>+<span class="built_in">this</span>.friends+<span class="string">&#x27;今年&#x27;</span>+<span class="built_in">this</span>.age+<span class="string">&#x27;岁了&#x27;</span>, <span class="string">&#x27;在&#x27;</span>+<span class="built_in">this</span>.school+<span class="string">&#x27;读一年级&#x27;</span>, <span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;小明&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;小黑&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;小黄&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;小华&#x27;</span>, <span class="string">&#x27;清华小学&#x27;</span>)</span><br><span class="line">person.say();</span><br><span class="line">student.saySchool();</span><br></pre></td></tr></table></figure>
<h4 id="ES6实现面向对象"><a href="#ES6实现面向对象" class="headerlink" title="ES6实现面向对象"></a>ES6实现面向对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 实现方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, friends</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&#x27;的朋友&#x27;</span>+<span class="built_in">this</span>.friends+<span class="string">&#x27;今年&#x27;</span>+<span class="built_in">this</span>.age+<span class="string">&#x27;岁了&#x27;</span>, <span class="string">&#x27;person ES6&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span> <span class="keyword">extends</span> <span class="title">Person1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, friends, school</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, friends, <span class="string">&#x27;Student&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.school = school</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">saySchool</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&#x27;的朋友&#x27;</span>+<span class="built_in">this</span>.friends+<span class="string">&#x27;今年&#x27;</span>+<span class="built_in">this</span>.age+<span class="string">&#x27;岁了&#x27;</span>, <span class="string">&#x27;在&#x27;</span>+<span class="built_in">this</span>.school+<span class="string">&#x27;读一年级&#x27;</span>, <span class="string">&#x27;student ES6&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person1(<span class="string">&#x27;小明&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;小黑&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student1(<span class="string">&#x27;小黄&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;小华&#x27;</span>, <span class="string">&#x27;清华小学&#x27;</span>)</span><br><span class="line">person1.say();</span><br><span class="line">student1.saySchool();</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化的七大手段</title>
    <url>/2020/08/02/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%83%E5%A4%A7%E6%89%8B%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h2><p>本文将详细介绍前端性能优化的七大手段，包括减少请求数量、减小资源大小、优化网络连接、优化资源加载、减少重绘回流、使用性能更好的API和构建优化</p>
<h2 id="一、减少请求数量"><a href="#一、减少请求数量" class="headerlink" title="一、减少请求数量"></a>一、减少请求数量</h2><p>【合并】</p>
<p>　　如果不进行文件合并，有如下3个隐患</p>
<p>　　1、文件与文件之间有插入的上行请求，增加了N-1个网络延迟</p>
<p>　　2、受丢包问题影响更严重</p>
<p>　　3、经过代理服务器时可能会被断开</p>
<p>　　但是，文件合并本身也有自己的问题</p>
<p>　　1、首屏渲染问题</p>
<p>　　2、缓存失效问题</p>
<p>　　所以，对于文件合并，有如下改进建议</p>
<p>　　1、公共库合并</p>
<p>　　2、不同页面单独合并</p>
<p>【图片处理】</p>
<p>　　1、雪碧图</p>
<p>　　CSS雪碧图是以前非常流行的技术，把网站上的一些图片整合到一张单独的图片中，可以减少网站的HTTP请求数量，但是当整合图片比较大时，一次加载比较慢。随着字体图片、SVG图片的流行，该技术渐渐退出了历史舞台</p>
<p>　　2、Base64</p>
<p>　　将图片的内容以Base64格式内嵌到HTML中，可以减少HTTP请求数量。但是，由于Base64编码用8位字符表示信息中的6个位，所以编码后大小大约比原始值扩大了 33%</p>
<p>　　3、使用字体图标来代替图片</p>
<p>【减少重定向】</p>
<p>　　尽量避免使用重定向，当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载，降低了用户体验</p>
<p>　　如果一定要使用重定向，如http重定向到https，要使用301永久重定向，而不是302临时重定向。因为，如果使用302，则每一次访问http，都会被重定向到https的页面。而永久重定向，在第一次从http重定向到https之后 ，每次访问http，会直接返回https的页面</p>
<p>【使用缓存】</p>
<p>　　使用cach-control或expires这类强缓存时，缓存不过期的情况下，不向服务器发送请求。强缓存过期时，会使用last-modified或etag这类协商缓存，向服务器发送请求，如果资源没有变化，则服务器返回304响应，浏览器继续从本地缓存加载资源；如果资源更新了，则服务器将更新后的资源发送到浏览器，并返回200响应</p>
<p>【不使用CSS @import】</p>
<p>　　CSS的@import会造成额外的请求</p>
<p>【避免使用空的src和href】</p>
<p>　　a标签设置空的href，会重定向到当前的页面地址</p>
<p>　　form设置空的method，会提交表单到当前的页面地址</p>
<h2 id="二、减小资源大小"><a href="#二、减小资源大小" class="headerlink" title="二、减小资源大小"></a>二、减小资源大小</h2><p>【压缩】</p>
<p>　　1、HTML压缩</p>
<p>　　HTML代码压缩就是压缩在文本文件中有意义，但是在HTML中不显示的字符，包括空格，制表符，换行符等</p>
<p>　　2、CSS压缩</p>
<p>　　CSS压缩包括无效代码删除与CSS语义合并</p>
<p>　　3、JS压缩与混乱</p>
<p>　　JS压缩与混乱包括无效字符及注释的删除、代码语义的缩减和优化、降低代码可读性，实现代码保护</p>
<p>　　4、图片压缩</p>
<p>　　针对真实图片情况，舍弃一些相对无关紧要的色彩信息</p>
<p>【webp】</p>
<p>　　在安卓下可以使用webp格式的图片，它具有更优的图像数据压缩算法，能带来更小的图片体积，同等画面质量下，体积比jpg、png少了25%以上，而且同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性</p>
<p>【开启gzip】</p>
<p>　　HTTP协议上的GZIP编码是一种用来改进WEB应用程序性能的技术。大流量的WEB站点常常使用GZIP压缩技术来让用户感受更快的速度。这一般是指WWW服务器中安装的一个功能，当有人来访问这个服务器中的网站时，服务器中的这个功能就将网页内容压缩后传输到来访的电脑浏览器中显示出来。一般对纯文本内容可压缩到原大小的40%</p>
<h2 id="三、优化网络连接"><a href="#三、优化网络连接" class="headerlink" title="三、优化网络连接"></a>三、优化网络连接</h2><p>【使用CDN】</p>
<p>　　CDN全称是Content Delivery Network，即内容分发网络，它能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度</p>
<p>【使用DNS预解析】</p>
<p>　　当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。在解析过程中，按照浏览器缓存、系统缓存、路由器缓存、ISP(运营商)DNS缓存、根域名服务器、顶级域名服务器、主域名服务器的顺序，逐步读取缓存，直到拿到IP地址</p>
<p>　　DNS Prefetch，即DNS预解析就是根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，来提高网站的访问速度</p>
<p>　　方法是在 head 标签里面写上几个 link 标签</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;dns-prefecth&quot;</span> href=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefecth&quot;</span> href=<span class="string">&quot;https://www.google-analytics.com&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>　　对以上几个网站提前解析 DNS，由于它是并行的，不会堵塞页面渲染，这样可以缩短资源加载的时间</p>
<p>【并行连接】</p>
<p>　　由于在HTTP1.1协议下，chrome每个域名的最大并发数是6个。使用多个域名，可以增加并发数</p>
<p>【持久连接】</p>
<p>　　使用keep-alive或presistent来建立持久连接，持久连接降低了时延和连接建立的开销，将连接保持在已调谐状态，而且减少了打开连接的潜在数量</p>
<p>【管道化连接】</p>
<p>　　在HTTP2协议中，可以开启管道化连接，即单条连接的多路复用，每条连接中并发传输多个资源，这里就不需要添加域名来增加并发数了</p>
<h2 id="四、优化资源加载"><a href="#四、优化资源加载" class="headerlink" title="四、优化资源加载"></a>四、优化资源加载</h2><p>【资源加载位置】</p>
<p>　　通过优化资源加载位置，更改资源加载时机，使尽可能快地展示出页面内容，尽可能快地使功能可用</p>
<p>　　1、CSS文件放在head中，先外链，后本页</p>
<p>　　2、JS文件放在body底部，先外链，后本页</p>
<p>　　3、处理页面、处理页面布局的JS文件放在head中，如babel-polyfill.js文件、flexible.js文件</p>
<p>　　4、body中间尽量不写style标签和script标签</p>
<p>【资源加载时机】</p>
<p>　　1、异步script标签</p>
<p>　　defer:  异步加载，在HTML解析完成后执行。defer的实际效果与将代码放在body底部类似</p>
<p>　　async: 异步加载，加载完成后立即执行</p>
<p>　　2、模块按需加载</p>
<p>　　在SPA等业务逻辑比较复杂的系统中，需要根据路由来加载当前页面需要的业务模块</p>
<p>　　按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载</p>
<p>　　webpack 提供了两个类似的技术，优先选择的方式是使用符合 ECMAScript 提案 的 import() 语法。第二种则是使用 webpack 特定的 require.ensure</p>
<p>　　3、使用资源预加载preload和资源预读取prefetch</p>
<p>　　preload让浏览器提前加载指定资源，需要执行时再执行，可以加速本页面的加载速度</p>
<p>　　prefetch告诉浏览器加载下一页面可能会用到的资源，可以加速下一个页面的加载速度</p>
<p>　　4、资源懒加载与资源预加载</p>
<p>　　资源延迟加载也称为懒加载，延迟加载资源或符合某些条件时才加载某些资源</p>
<p>　　资源预加载是提前加载用户所需的资源，保证良好的用户体验</p>
<p>　　资源懒加载和资源预加载都是一种错峰操作，在浏览器忙碌的时候不做操作，浏览器空间时，再加载资源，优化了网络性能</p>
<h2 id="五、减少重绘回流"><a href="#五、减少重绘回流" class="headerlink" title="五、减少重绘回流"></a>五、减少重绘回流</h2><p>【样式设置】</p>
<p>　　1、避免使用层级较深的选择器，或其他一些复杂的选择器，以提高CSS渲染效率</p>
<p>　　2、避免使用CSS表达式，CSS表达式是动态设置CSS属性的强大但危险方法，它的问题就在于计算频率很快。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次</p>
<p>　　3、元素适当地定义高度或最小高度，否则元素的动态内容载入时，会出现页面元素的晃动或位置，造成回流</p>
<p>　　4、给图片设置尺寸。如果图片不设置尺寸，首次载入时，占据空间会从0到完全出现，上下左右都可能位移，发生回流</p>
<p>　　5、不要使用table布局，因为一个小改动可能会造成整个table重新布局。而且table渲染通常要3倍于同等元素时间</p>
<p>　　6、能够使用CSS实现的效果，尽量使用CSS而不使用JS实现</p>
<p>【渲染层】</p>
<p>　　1、此外，将需要多次重绘的元素独立为render layer渲染层，如设置absolute，可以减少重绘范围</p>
<p>　　2、对于一些进行动画的元素，使用硬件渲染，从而避免重绘和回流</p>
<p>【DOM优化】</p>
<p>　　1、缓存DOM</p>
<pre><code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const div = document.getElementById(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure></code></pre>
<p>　　由于查询DOM比较耗时，在同一个节点无需多次查询的情况下，可以缓存DOM</p>
<p>　　2、减少DOM深度及DOM数量</p>
<p>　　HTML 中标签元素越多，标签的层级越深，浏览器解析DOM并绘制到浏览器中所花的时间就越长，所以应尽可能保持 DOM 元素简洁和层级较少。</p>
<p>　　3、批量操作DOM</p>
<p>　　由于DOM操作比较耗时，且可能会造成回流，因此要避免频繁操作DOM，可以批量操作DOM，先用字符串拼接完毕，再用innerHTML更新DOM</p>
<p>　　4、批量操作CSS样式</p>
<p>　　通过切换class或者使用元素的style.csstext属性去批量操作元素样式</p>
<p>　　5、在内存中操作DOM</p>
<p>　　使用DocumentFragment对象，让DOM操作发生在内存中，而不是页面上</p>
<p>　　6、DOM元素离线更新</p>
<p>　　对DOM进行相关操作时，例、appendChild等都可以使用Document Fragment对象进行离线操作，带元素“组装”完成后再一次插入页面，或者使用display:none 对元素隐藏，在元素“消失”后进行相关操作</p>
<p>　　7、DOM读写分离</p>
<p>　　浏览器具有惰性渲染机制，连接多次修改DOM可能只触发浏览器的一次渲染。而如果修改DOM后，立即读取DOM。为了保证读取到正确的DOM值，会触发浏览器的一次渲染。因此，修改DOM的操作要与访问DOM分开进行</p>
<p>　　8、事件代理</p>
<p>　　事件代理是指将事件监听器注册在父级元素上，由于子元素的事件会通过事件冒泡的方式向上传播到父节点，因此，可以由父节点的监听函数统一处理多个子元素的事件</p>
<p>　　利用事件代理，可以减少内存使用，提高性能及降低代码复杂度</p>
<p>　　9、防抖和节流</p>
<p>　　使用函数节流（throttle）或函数去抖（debounce），限制某一个方法的频繁触发</p>
<p>　　10、及时清理环境</p>
<p>　　及时消除对象引用，清除定时器，清除事件监听器，创建最小作用域变量，可以及时回收内存</p>
<h2 id="六、性能更好的API"><a href="#六、性能更好的API" class="headerlink" title="六、性能更好的API"></a>六、性能更好的API</h2><p>1、用对选择器</p>
<p>选择器的性能排序如下所示，尽量选择性能更好的选择器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">id选择器（<span class="comment">#myid）</span></span><br><span class="line">类选择器（.myclassname）</span><br><span class="line">标签选择器（div,h1,p）</span><br><span class="line">相邻选择器（h1+p）</span><br><span class="line">子选择器（ul &gt; li）</span><br><span class="line">后代选择器（li a）</span><br><span class="line">通配符选择器（*）</span><br><span class="line">属性选择器（a[rel=<span class="string">&quot;external&quot;</span>]）</span><br><span class="line">伪类选择器（a:hover,li:nth-child）</span><br></pre></td></tr></table></figure>
<p>2、使用requestAnimationFrame来替代setTimeout和setInterval</p>
<p>　　希望在每一帧刚开始的时候对页面进行更改，目前只有使用 requestAnimationFrame 能够保证这一点。使用 setTimeout 或者 setInterval 来触发更新页面的函数，该函数可能在一帧的中间或者结束的时间点上调用，进而导致该帧后面需要进行的事情没有完成，引发丢帧</p>
<p>3、使用IntersectionObserver来实现图片可视区域的懒加载</p>
<p>　　传统的做法中，需要使用scroll事件，并调用getBoundingClientRect方法，来实现可视区域的判断，即使使用了函数节流，也会造成页面回流。使用IntersectionObserver，则没有上述问题</p>
<p>4、使用web worker</p>
<p>　　客户端javascript一个基本的特性是单线程：比如，浏览器无法同时运行两个事件处理程序，它也无法在一个事件处理程序运行的时候触发一个计时器。Web Worker是HTML5提供的一个javascript多线程解决方案，可以将一些大计算量的代码交由web Worker运行，从而避免阻塞用户界面，在执行复杂计算和数据处理时，这个API非常有用</p>
<p>但是，使用一些新的API的同时，也要注意其浏览器兼容性</p>
<h2 id="七、webpack优化"><a href="#七、webpack优化" class="headerlink" title="七、webpack优化"></a>七、webpack优化</h2><p>【打包公共代码】</p>
<p>　　使用CommonsChunkPlugin插件，将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这会带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件</p>
<p>　　webpack 4 将移除 CommonsChunkPlugin, 取而代之的是两个新的配置项 optimization.splitChunks 和 optimization.runtimeChunk</p>
<p>　　通过设置 optimization.splitChunks.chunks: “all” 来启动默认的代码分割配置项</p>
<p>【动态导入和按需加载】</p>
<p>　　webpack提供了两种技术通过模块的内联函数调用来分离代码，优先选择的方式是，使用符合 ECMAScript 提案 的 import() 语法。第二种，则是使用 webpack 特定的 require.ensure</p>
<p>【剔除无用代码】</p>
<p>　　tree shaking 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块系统中的静态结构特性，例如 import 和 export。这个术语和概念实际上是兴起于 ES2015 模块打包工具 rollup</p>
<p>　　JS的tree shaking主要通过uglifyjs插件来完成，CSS的tree shaking主要通过purify CSS来实现的</p>
<p>【长缓存优化】</p>
<p>　　1、将hash替换为chunkhash，这样当chunk不变时，缓存依然有效</p>
<p>　　2、使用Name而不是id</p>
<p>　　每个 module.id 会基于默认的解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变</p>
<p>　　下面来使用两个插件解决这个问题。第一个插件是 NamedModulesPlugin，将使用模块的路径，而不是数字标识符。虽然此插件有助于在开发过程中输出结果的可读性，然而执行时间会长一些。第二个选择是使用 HashedModuleIdsPlugin，推荐用于生产环境构建</p>
<p>【公用代码内联】</p>
<p>　　使用html-webpack-inline-chunk-plugin插件将mainfest.js内联到html文件中</p>
]]></content>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端样式导入的方式有哪些？</title>
    <url>/2020/12/07/%E5%89%8D%E7%AB%AF%E6%A0%B7%E5%BC%8F%E5%AF%BC%E5%85%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    <content><![CDATA[<h4 id="样式导入方式"><a href="#样式导入方式" class="headerlink" title="样式导入方式"></a>样式导入方式</h4><ul>
<li>link</li>
<li>import</li>
</ul>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li>link的使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;index.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>import的使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line"> @<span class="keyword">import</span> <span class="string">&quot;index.css&quot;</span>;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4></li>
<li><p>link除了引用样式文件，还可以引用图片等资源文件，而import只引用样式文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;shortcut icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;icon&quot;</span> sizes=<span class="string">&quot;any&quot;</span> mask href=<span class="string">&quot;//www.baidu.com/img/baidu.svg&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;search&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;application/opensearchdescription+xml&quot;</span> href=<span class="string">&quot;/content-search.xml&quot;</span> title=<span class="string">&quot;百度搜索&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>兼容性不同，link不存在兼容性的问题，import在IE5以上支持，是css2.1新增的</p>
</li>
<li><p>在样式表文件可以使用import导入其它的样式表文件，而link不可以</p>
</li>
<li><p>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>
</li>
<li><p>link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>
</li>
</ul>
<h4 id="加分项"><a href="#加分项" class="headerlink" title="加分项"></a>加分项</h4><p>  import的写法比较多<br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;style.css&#x27;</span> <span class="comment">//Windows IE4/ NS4, Mac OS X IE5, Macintosh IE4/IE5/NS4不识别</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;style.css&quot;</span> <span class="comment">//Windows IE4/ NS4, Macintosh IE4/NS4不识别</span></span><br><span class="line">@<span class="keyword">import</span> url(style.css) <span class="comment">//Windows NS4, Macintosh NS4不识别</span></span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">&#x27;style.css&#x27;</span>) <span class="comment">//Windows NS4, Mac OS X IE5, Macintosh IE4/IE5/NS4不识别</span></span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">&quot;style.css&quot;</span>) <span class="comment">//Windows NS4, Macintosh NS4不识别</span></span><br></pre></td></tr></table></figure><br>  推荐使用 @import url(index.css);</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>变量提升必须注意的问题</title>
    <url>/2020/08/02/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%BF%85%E9%A1%BB%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>在使用一个变量的时候，我们必须先声明一个变量，我们共有 <code>var</code>，<code>let</code>，<code>const</code> 这三个关键字可选择，具体使用哪个关键字，那就要根据业务场景来使用。声明一个变量可以赋值为任何数据类型的，因为JS的松散性，然后要注意的是声明变量的时候可以简写。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> a = 10, b = 20;</span><br></pre></td></tr></table></figure>
<h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>我们在使用变量或函数的时候，理解什么时候被初始化值的是至关重要。变量提升是指在声明一个变量之前就使用了变量，在全局作用域中，只有使用<code>var</code>关键字声明的变量才会变量提升，变量提升的时候浏览器只知道有这么一个变量，但你下面定义的值还没有赋值给这个变量，这时候变量的值是<code>undefined</code>的，等到浏览器执行到下面的代码的时候才是一个赋值的过程。所以变量提升的时候没有初始化值。用<code>var</code>声明变量的时候回给window增加一个相同变量名的属性，所以你也可以通过属性名的方式获取这个变量的值，当没有使用任何关键字声明时，只是给一个变量赋值时，变量也相当于给window增加一个相同变量名的属性。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">console.log(a); // -&gt; undefined</span><br><span class="line">var a = 10;</span><br><span class="line">console.log(a); // -&gt; 10</span><br><span class="line">console.log(window.a); // -&gt; 10</span><br><span class="line"></span><br><span class="line">b = 10;</span><br><span class="line">console.log(window.b); // -&gt; 10</span><br></pre></td></tr></table></figure>
<h4 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h4><p>定义一个函数可以使用函数声明和函数表达式，这两种方式在提升的时候也是有区别的，函数声明会提升到作用域的顶部，在提升的时候会分配一个内存空间，变量指向这个函数的内存空间，所以在定义一个函数之前是可以执行这个函数的，函数声明的方式定义函数会提升。而函数表达式就跟变量提升，仅仅只是声明，并没有给其赋值。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fn1() // -&gt; <span class="string">&quot;函数声明&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;函数声明&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn2() // -&gt; <span class="string">&quot;fn2 is not a function&quot;</span></span><br><span class="line">var fn2 = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(<span class="string">&quot;函数表达式&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h4><p>用<code>var</code>可以重复声明同一个变量，如果重复声明了，就相当于给变量赋值一样，用<code>let</code>和<code>const</code>在同一个作用域中是不可以重复声明同一个变量的，如果重复声明了会报错。关于函数表达式，如果重复的定义相同函数名的函数，后面的会覆盖前面的函数，因为JavaScript没有重载。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var a = 100;</span><br><span class="line">console.log(a); // -&gt; 100</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;第一个fn函数&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;第二个fn函数&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(fn()) // -&gt; <span class="string">&quot;第二个fn函数&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>1、在块级作用域中（如<code>if</code>，<code>for</code>），<code>var</code>声明变量<code>function</code>定义函数的时候，他们都是只声明但还未初始化值。2、<code>return</code>语句下面的语句也是会提升的，变量是只提前声明，函数是声明跟初始化值一起完成。3、<code>return</code>本身这条语句不会提升。4、自执行函数不会提升。5、回调函数不会提升。</p>
<h5 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">b</span></span>() &#123;</span><br><span class="line">  a = 10;</span><br><span class="line">  <span class="built_in">return</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>
<p>答案：1</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">bar</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> 3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> bar();</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">bar</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> 8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(foo());</span><br></pre></td></tr></table></figure>
<p>答案：8</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">parent</span></span>() &#123;</span><br><span class="line">    var hoisted = <span class="string">&quot;I&#x27;m a variable&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">hoisted</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;I&#x27;m a function&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> hoisted(); </span><br><span class="line">&#125;</span><br><span class="line">console.log(parent());</span><br></pre></td></tr></table></figure>
<p>答案：“TypeError: hoisted is not a function”</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">alert(foo());</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>() &#123;</span><br><span class="line">  var bar = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 3;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">return</span> bar();</span><br><span class="line">  var bar = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 8;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案：3</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var myVar = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;Original value was: &#x27;</span> + myVar);</span><br><span class="line">  var myVar = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">  console.log(<span class="string">&#x27;New value is: &#x27;</span> + myVar);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>答案：“Original value was: undefined”, “New value is: bar”</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度和空间复杂度如何计算？</title>
    <url>/2020/08/02/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="时间复杂度和空间复杂度如何计算"><a href="#时间复杂度和空间复杂度如何计算" class="headerlink" title="时间复杂度和空间复杂度如何计算"></a>时间复杂度和空间复杂度如何计算</h3><h2 id="推导算法：大O推导法"><a href="#推导算法：大O推导法" class="headerlink" title="推导算法：大O推导法"></a>推导算法：大O推导法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、用常数1取代运行时间中的所有加法常数</span><br><span class="line">2、在修改后的运行次数函数中，只保留最高阶项 </span><br><span class="line">3、如果最高阶项存在且不是1，那么我们就去除于这个项相乘的常数。</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n}=0(f(n))。它表示随问题规模n的增大，算法执行时间的埔长率和 f(n)的埔长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f( n)是问题规横n的某个函数。</p>
<h2 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    int i=0;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">共执行了4次，所以时间复杂度为O(4);根据大O推导法，略去常数，所以此函数的时间复杂度为O(1);</span><br><span class="line">*/</span><br><span class="line">//假如func变成如下结构</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    int i=0;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次</span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次 </span><br><span class="line">    i++;//执行1次</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">共执行了13次，时间复杂度为O(13);根据大O推导法，略去常数，所以此函数的时间复杂度仍然为O(1);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void func()//时间复杂度为O(1)的函数</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;大O推导法&quot;</span>);//执行1次</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">在main中，func共被执行了n次，所以main的时间复杂度为O(n);</span><br><span class="line">*/</span><br><span class="line">//加入main函数被修改成如下</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        func();</span><br><span class="line">        func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">在main中，func共被执行了2n次，main的时间复杂度为O(2n);根据大O推导法，略去常数系数，所以main的时间复杂度仍为为O(n);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(int i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        func();</span><br><span class="line">        i=2i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void func()//时间复杂度为O(1)的函数</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;大O推导法&quot;</span>);//执行1次</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">在main中，</span><br><span class="line">因为i每次被乘2，所以，执行的算法为 2的几次相乘 大于 n，即 2^x&gt;n,--&gt; x= log2n  ,  在推导对数时间复杂度时，一般都是以10作为对数的底数。 func共被执行了logn次，所以main的时间复杂度为O(logn);</span><br></pre></td></tr></table></figure>
<h2 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(int i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(int j=1;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void func()//时间复杂度为O(1)的函数</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;大O推导法&quot;</span>);//执行1次</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">在main中， func()共被执行了n^2,所以main的时间复杂度为O(n^2);</span><br><span class="line">*/</span><br><span class="line">//假如main被修改成 如下</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(int i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(int j=i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">那么， func() 执行的次数为 n+n-1+n-2+……--&gt; n(n+1)/2  =  n2/2 + n/2   根据大O推导方法，保留最高阶项，n2/2 ，然后去掉这个项相乘的常数，1/2， 所以main的时间复杂度为O(n2)</span><br></pre></td></tr></table></figure>
<p><strong>小结</strong></p>
<p><img src="https://s1.ax1x.com/2020/08/02/atAjXt.png" alt="atAjXt.png"></p>
<p>时间复杂度所耗费的时间是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt;O(2n) &lt; O(n!) &lt;O(nn)</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://www.cnblogs.com/fanchangfa/p/3868696.html" >参考<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>百度百科：空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。<br>算法类似于时间复杂度，只是计算的不是运行次数，而是在运行过程中临时变量被运用次数。</p>
<p><a class="link"   href="https://www.cnblogs.com/irenebbkiss/p/4243715.html" >参考<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>揭秘简单请求和复杂请求</title>
    <url>/2020/12/15/%E6%8F%AD%E7%A7%98%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%92%8C%E5%A4%8D%E6%9D%82%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>开发网站时经常会用到跨域资源共享（简称cors，后面使用简称）来解决跨域问题，但是在使用cors的时候，http请求会被划分为两类，简单请求和复杂请求，而这两种请求的区别主要在于是否会触发cors预检请求。</p>
<p>首先我们要明白cors的原理（引自MDN）：</p>
<blockquote>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <code>GET</code> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <code>POST</code> 请求），浏览器必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）</p>
</blockquote>
<p>从上面的文字中我们得到如下信息：</p>
<p>1、跨域资源共享标准新增了一组 HTTP 首部字段，服务器通过这些字段来控制浏览器有权访问哪些资源。</p>
<p>2、为了安全起见请求方式分为两类，一类不会预先发送options请求，一些会预先发送options请求。</p>
<p>3、 <code>GET</code> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <code>POST</code> 请求会触发options请求。</p>
<p>4、服务器验证OPTIONS完成后才会允许发送实际的http请求。</p>
<p>不会触发http预检请求的便是简单请求，能够触发http预检请求的便是复杂请求。</p>
<p>那么有哪些简单请求呢？以下是来自MDN官方引用：</p>
<p>1、使用下列方法之一：</p>
<p>GET、</p>
<p>POST、</p>
<p>HEAD。</p>
<p>2、不得人为设置该集合之外的其他首部字段。该集合为：</p>
<p>Accept</p>
<p>Accept-Language</p>
<p>Content-Language</p>
<p>Content-Type </p>
<p>3、Content-Type 的值仅限于下列三者之一：</p>
<p>text/plain</p>
<p>multipart/form-data</p>
<p>application/x-www-form-urlencoded</p>
<p>4、请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问</p>
<p>5、请求中没有使用 ReadableStream 对象</p>
<p>那什么是复杂请求呢，除了简单请求都是复杂请求。</p>
<p>简单请求的发送从代码上来看和普通的XHR没太大区别，但是HTTP头当中要求总是包含一个域（Origin）的信息。该域包含协议名、地址以及一个可选的端口。不过这一项实际上由浏览器代为发送，并不是开发者代码可以触及到的。</p>
<p>简单请求的部分响应头及解释如下：</p>
<blockquote>
<p>Access-Control-Allow-Origin（必含）- 不可省略，否则请求按失败处理。该项控制数据的可见范围，如果希望数据对任何人都可见，可以填写”*”。<br>Access-Control-Allow-Credentials（可选） – 该项标志着请求当中是否包含cookies信息，只有一个可选值：true（必为小写）。如果不包含cookies，请略去该项，而不是填写false。这一项与XmlHttpRequest2对象当中的withCredentials属性应保持一致，即withCredentials为true时该项也为true；withCredentials为false时，省略该项不写。反之则导致请求失败。<br>Access-Control-Expose-Headers（可选） – 该项确定XmlHttpRequest2对象当中getResponseHeader()方法所能获得的额外信息。通常情况下，getResponseHeader()方法只能获得如下的信息：<br>Cache-Control<br>Content-Language<br>Content-Type<br>Expires<br>Last-Modified<br>Pragma<br>当你需要访问额外的信息时，就需要在这一项当中填写并以逗号进行分隔</p>
</blockquote>
<p>如果仅仅是简单请求，那么即便不用CORS也没有什么大不了，但CORS的复杂请求就令CORS显得更加有用了。简单来说，任何不满足上述简单请求要求的请求，都属于复杂请求。比如说你需要发送PUT、DELETE等HTTP动作，或者发送Content-Type: application/json的内容。</p>
<p>复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种”预请求”，此时作为服务端，也需要返回”预回应”作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。</p>
<p>预请求以OPTIONS形式发送，当中同样包含域，并且还包含了两项CORS特有的内容</p>
<blockquote>
<p>Access-Control-Request-Method – 该项内容是实际请求的种类，可以是GET、POST之类的简单请求，也可以是PUT、DELETE等等。<br>Access-Control-Request-Headers – 该项是一个以逗号分隔的列表，当中是复杂请求所使用的头部。</p>
</blockquote>
<p>显而易见，这个预请求实际上就是在为之后的实际请求发送一个权限请求，在预回应返回的内容当中，服务端应当对这两项进行回复，以让浏览器确定请求是否能够成功完成。</p>
<p>复杂请求的部分响应头及解释如下：</p>
<blockquote>
<p>Access-Control-Allow-Origin（必含） – 和简单请求一样的，必须包含一个域。<br>Access-Control-Allow-Methods（必含） – 这是对预请求当中Access-Control-Request-Method的回复，这一回复将是一个以逗号分隔的列表。尽管客户端或许只请求某一方法，但服务端仍然可以返回所有允许的方法，以便客户端将其缓存。<br>Access-Control-Allow-Headers（当预请求中包含Access-Control-Request-Headers时必须包含） – 这是对预请求当中Access-Control-Request-Headers的回复，和上面一样是以逗号分隔的列表，可以返回所有支持的头部。这里在实际使用中有遇到，所有支持的头部一时可能不能完全写出来，而又不想在这一层做过多的判断，没关系，事实上通过request的header可以直接取到Access-Control-Request-Headers，直接把对应的value设置到Access-Control-Allow-Headers即可。<br>Access-Control-Allow-Credentials（可选） – 和简单请求当中作用相同<br>Access-Control-Max-Age（可选） – 以秒为单位的缓存时间。预请求的的发送并非免费午餐，允许时应当尽可能缓存。</p>
</blockquote>
<p>理论聊完之后，咱们来看一下实践，首先启动两个服务，一个端口为3000,的静态资源服务器，用于请求接口，另一台端口为5000的接口服务器，如图所示：</p>
<p><a href="https://imgchr.com/i/rMNRdP"><img src="https://s3.ax1x.com/2020/12/15/rMNRdP.png" alt="rMNRdP.png"></a></p>
<p>后端接口服务器代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const  express = require(<span class="string">&quot;express&quot;</span>);</span><br><span class="line">const app = express();</span><br><span class="line">const bodyParser = require(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:<span class="literal">false</span>&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">// 实现CORS</span><br><span class="line">app.use(<span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;OPTIONS,GET,POST,PUT,DELETE&#x27;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin,X-Requested-With,Content-Type,Accept,Authorization&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;cache-control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;ETag&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">&quot;/p&quot;</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(5000,()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&quot;5000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>前端请求资源脚本代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;http://localhost:5000/p&quot;</span>,&#123;name:<span class="string">&quot;zs&quot;</span>,age:<span class="string">&quot;18&quot;</span>&#125;).<span class="keyword">then</span>((data)=&gt;&#123;</span><br><span class="line">    console.log(data.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我们用axios这个http请求库发送了一个post请求，axios发送post请求默认会把数据转化为json格式，并且会默认设置请求头：Content-Type：application/json，很显然这是一个复杂请求，这样的话，会触发options请求。</p>
<p>我们分别启动两个服务，并打开浏览器，访问页面，加载请求接口脚本，观察network如图：</p>
<p><a href="https://imgchr.com/i/rMN7ss"><img src="https://s3.ax1x.com/2020/12/15/rMN7ss.jpg" alt="rMN7ss.jpg"></a></p>
<p>我们看到，代码中命名只发送了一次异步请求为什么显示两次呢？详细截图如下：</p>
<p><a href="https://imgchr.com/i/rMUpQJ"><img src="https://s3.ax1x.com/2020/12/15/rMUpQJ.jpg" alt="rMUpQJ.jpg"></a><br><a href="https://imgchr.com/i/rMUEFK"><img src="https://s3.ax1x.com/2020/12/15/rMUEFK.jpg" alt="rMUEFK.jpg"></a></p>
<p>我们看到确实发送了两次请求一次为OPTIONS一次为POST，而我们代码中并没有处理对OPTIONS请求的响应处理，所以上面服务端代码是不合理的，综合考虑，OPTIONS请求并会对实际http请求差生影响，所以我们统一的对OPTIONS请求返回204，服务端负责支持CORS的中间件修正代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;OPTIONS,GET,POST,PUT,DELETE&#x27;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin,X-Requested-With,Content-Type,Accept,Authorization&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;cache-control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;ETag&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    //header头信息设置结束后，结束程序往下执行，返回</span><br><span class="line">    <span class="keyword">if</span>(req.method.toLocaleLowerCase() === <span class="string">&#x27;options&#x27;</span>)&#123;</span><br><span class="line">        res.status(204);</span><br><span class="line">        <span class="built_in">return</span> res.json(&#123;&#125;);   //直接返回空数据，结束此次请求</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们在中间件中判断请求方式，如果请求方式为OPTIONS返回状态码204,并返回空信息。</p>
<p>限于篇幅文章到此就该结束了，当然了还有好多文档没有测试希望大家看完文章亲手测试一下。</p>
<p>如果我们将请求脚本改成如下代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;http://localhost:5000/p&quot;</span>,<span class="string">&quot;name=zs&amp;age=18&quot;</span>,&#123;headers:&#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">&#125;&#125;).<span class="keyword">then</span>((data)=&gt;&#123;</span><br><span class="line">    console.log(data.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>或者又改成如下代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;http://localhost:5000/p&quot;</span>,<span class="string">&quot;name=zs&amp;age=18&quot;</span>,&#123;headers:&#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clm&quot;</span>:<span class="string">&quot;234&quot;</span></span><br><span class="line">&#125;&#125;).<span class="keyword">then</span>((data)=&gt;&#123;</span><br><span class="line">    console.log(data.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上两次请求的netmork会是什么样的呢？</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>帮你彻底搞懂JS中的prototype、__proto__与constructor(图解)</title>
    <url>/2020/08/02/%E5%B8%AE%E4%BD%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82JS%E4%B8%AD%E7%9A%84prototype%E3%80%81-proto-%E4%B8%8Econstructor(%E5%9B%BE%E8%A7%A3)/</url>
    <content><![CDATA[<h3 id="可以先看一下最后的总结部分再回过头来完整看完"><a href="#可以先看一下最后的总结部分再回过头来完整看完" class="headerlink" title="可以先看一下最后的总结部分再回过头来完整看完"></a>可以先看一下最后的总结部分再回过头来完整看完</h3><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>作为一名前端工程师，必须搞懂JS中的<code>prototype</code>、<code>__proto__</code>与<code>constructor</code>属性，相信很多初学者对这些属性存在许多困惑，容易把它们混淆，本文旨在帮助大家理清它们之间的关系并彻底搞懂它们。这里说明一点，<code>__proto__</code>属性的两边是各由两个下划线构成（这里为了方便大家看清，在两下划线之间加入了一个空格：<code>_ _proto_ _</code>，读作<code>“dunder proto”</code>，<code>“double underscore proto”</code>的缩写），实际上，该属性在ES标准定义中的名字应该是<code>[[Prototype]]</code>，具体实现是由浏览器代理自己实现，谷歌浏览器的实现就是将<code>[[Prototype]]</code>命名为<code>__proto__</code>，大家清楚这个标准定义与具体实现的区别即可（名字有所差异，功能是一样的），可以通过该方式检测引擎是否支持这个属性：<code>Object.getPrototypeOf(&#123;__proto__: null&#125;) === null</code>。本文基于谷歌浏览器（版本 72.0.3626.121）的实验结果所得。<br>   现在正式开始！ 让我们从如下一个简单的例子展开讨论，并配以相关的图帮助理解：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Foo</span></span>() &#123;...&#125;;</span><br><span class="line"><span class="built_in">let</span> f1 = new Foo();</span><br></pre></td></tr></table></figure>
<p>以上代码表示创建一个构造函数<code>Foo()</code>，并用<code>new</code>关键字实例化该构造函数得到一个实例化对象<code>f1</code>。这里稍微补充一下new操作符将函数作为构造器进行调用时的过程：<code>函数被调用，然后新创建一个对象，并且成了函数的上下文（也就是此时函数内部的this是指向该新创建的对象，这意味着我们可以在构造器函数内部通过this参数初始化值），最后返回该新对象的引用，</code>详细请看：<a class="link"   href="https://blog.csdn.net/cc18868876837/article/details/103149502" >详解JavaScript中的new操作符<i class="fas fa-external-link-alt"></i></a>。虽然是简简单单的两行代码，然而它们背后的关系却是错综复杂的，如下图所示：<br><img src="https://s1.ax1x.com/2020/08/02/aYLQsA.png" alt="aYLQsA.png"></p>
<p>看到这图别怕，让我们一步步剖析，彻底搞懂它们！<br>  <strong>图的说明</strong>：右下角为图例，红色箭头表示<code>__proto__</code>属性指向、绿色箭头表示<code>prototype</code>属性的指向、棕色实线箭头表示<code>本身具有的constructor属性</code>的指向，棕色虚线箭头表示<code>继承而来的constructor属性</code>的指向；蓝色方块表示对象，浅绿色方块表示函数（<code>这里为了更好看清，Foo()仅代表是函数，并不是指执行函数Foo后得到的结果，图中的其他函数同理</code>）。图的中间部分即为它们之间的联系，图的最左边即为例子代码。</p>
<h2 id="2-proto-属性"><a href="#2-proto-属性" class="headerlink" title="2. _ _ proto _ _ 属性"></a>2. _ _ proto _ _ 属性</h2><p>  首先，我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是<code>对象</code>所独有的；② <code>prototype</code>属性是<code>函数</code>所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性，这点是致使我们产生困惑的很大原因之一。上图有点复杂，我们把它按照属性分别拆开，然后进行分析：</p>
<p> <img src="https://s1.ax1x.com/2020/08/02/aYLEa6.png" alt="aYLEa6.png"></p>
<p>  第一，这里我们仅留下 <code>__proto__ </code>属性，它是<code>对象所独有的</code>，可以看到<code>__proto__</code>属性都是由<code>一个对象指向一个对象</code>，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的<code>作用</code>就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<code>__proto__</code>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端null（可以理解为原始人。。。），再往上找就相当于在<code>null</code>上取值，会报错（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此结束，<code>null</code>为原型链的终点），由以上这种通过<code>__proto__</code>属性来连接对象直到<code>null</code>的一条链即为我们所谓的<code>原型链</code>。<br>  其实我们平时调用的字符串方法、数组方法、对象方法、函数方法等都是靠<code>__proto__</code>继承而来的。</p>
<h2 id="3-prototype属性"><a href="#3-prototype属性" class="headerlink" title="3. prototype属性"></a>3. prototype属性</h2><p>第二，接下来我们看 <code>prototype </code>属性：<br><img src="https://s1.ax1x.com/2020/08/02/aYLAVx.png" alt="aYLAVx.png"></p>
<p><code>prototype</code>属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是<code>函数所独有的</code>，它是从<code>一个函数指向一个对象</code>。它的含义是<code>函数的原型对象</code>，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：<code>f1.__proto__ === Foo.prototype</code>，它们两个完全一样。那<code>prototype</code>属性的作用又是什么呢？它的<code>作用</code>就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。<code>任何函数在创建的时候，其实会默认同时创建该函数的prototype对象。</code></p>
<h2 id="4-constructor属性"><a href="#4-constructor属性" class="headerlink" title="4. constructor属性"></a>4. constructor属性</h2><p> 最后，我们来看一下 <code>constructor</code> 属性：<br><img src="https://s1.ax1x.com/2020/08/02/aYLVIK.png" alt="aYLVIK.png"></p>
<p><code>constructor</code>属性也是<code>对象才拥有的</code>，它是从<code>一个对象指向一个函数</code>，含义就是<code>指向该对象的构造函数</code>，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合<code>__proto__</code>属性查看会更清楚点，如下图所示），从上图中可以看出<code>Function</code>这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以<code>constructor</code>属性的终点就是<code>Function</code>这个函数。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLFq1.png" alt="aYLFq1.png"></p>
<p>感谢网友的指出，这里解释一下上段中“<code>每个对象都有构造函数</code>”这句话。这里的意思是每个对象都可以找到其对应的constructor，因为创建对象的前提是需要有constructor，而这个constructor可能是对象自己本身显式定义的或者通过<code>__proto__</code>在原型链中找到的。<code>而单从constructor这个属性来讲，只有prototype对象才有</code>。每个函数在创建的时候，JS会同时创建一个该函数对应的prototype对象，而<code>函数创建的对象.__proto__ === 该函数.prototype，该函数.prototype.constructor===该函数本身</code>，故通过函数创建的对象即使自己没有constructor属性，它也能通过<code>__proto__</code>找到对应的constructor，所以任何对象最终都可以找到其构造函数（null如果当成对象的话，将null除外）。如下：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYLnRe.png" alt="aYLnRe.png"></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>** 总结一下：**</p>
<p>1、我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是对象所独有的；② <code>prototype</code>属性是<code>函数</code>所独有的，因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。<br>2、<code>__proto__</code>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（父对象）里找，一直找，直到<code>__proto__</code>属性的终点<code>null</code>，再往上找就相当于在null上取值，会报错。通过<code>__proto__</code>属性将对象连接起来的这条链路即<code>我们所谓的原型链</code>。<br>3、<code>prototype</code>属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，同时，在实例化的时候(let f1 = new Foo() )，prototype上的属性会作为原型对象赋值给实例，即<code>f1.__proto__ === Foo.prototype</code>。<br>4、<code>constructor</code>属性的含义就是<code>指向该对象的构造函数</code>，所有函数（此时看成对象了）最终的构造函数都指向<code>Function</code>。</p>
<p>参考文章：<br><a class="link"   href="https://www.cnblogs.com/xiaohuochai/p/5721552.html" >https://www.cnblogs.com/xiaohuochai/p/5721552.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/Narcotic/p/6899088.html" >https://www.cnblogs.com/Narcotic/p/6899088.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈js防抖和节流</title>
    <url>/2020/08/02/%E6%B5%85%E8%B0%88js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>防抖和节流严格算起来应该属于性能优化的知识，但实际上遇到的频率相当高，处理不当或者放任不管就容易引起浏览器卡死。所以还是很有必要早点掌握的。（信我，你看完肯定就懂了）</p>
<h2 id="从滚动条监听的例子说起"><a href="#从滚动条监听的例子说起" class="headerlink" title="从滚动条监听的例子说起"></a>从滚动条监听的例子说起</h2><p>先说一个常见的功能，很多网站会提供这么一个按钮：用于返回顶部。<br><img src="https://s1.ax1x.com/2020/08/02/aYsa7t.png" alt="aYsa7t.png"></p>
<p>这个按钮只会在滚动到距离顶部一定位置之后才出现，那么我们现在抽象出这个功能需求– <strong>监听浏览器滚动事件，返回当前滚条与顶部的距离</strong></p>
<p>这个需求很简单，直接写:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showTop</span></span>  () &#123;</span><br><span class="line">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class="line">　　console.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll  = showTop</span><br></pre></td></tr></table></figure>
<p>但是！<br><img src="https://s1.ax1x.com/2020/08/02/aYs0tf.jpg" alt="aYs0tf.jpg"></p>
<p>在运行的时候会发现存在一个问题：<strong>这个函数的默认执行频率，太！高！了！</strong>。 高到什么程度呢？以chrome为例，我们可以点击选中一个页面的滚动条，然后点击一次键盘的【向下方向键】，会发现函数执行了<strong>8-9</strong>次！</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsr9S.png" alt="aYsr9S.png"></p>
<p>然而实际上我们并不需要如此高频的反馈，毕竟浏览器的性能是有限的，不应该浪费在这里，所以接着讨论如何优化这种场景。</p>
<h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><p>基于上述场景，首先提出第一种思路：<strong>在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms</strong>，然后：</p>
<ul>
<li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li>
<li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li>
</ul>
<p><strong>效果：</strong>如果短时间内大量触发同一事件，只会执行一次函数。</p>
<p><strong>实现：</strong>既然前面都提到了计时，那实现的关键就在于<code>setTimeOut</code>这个函数，由于还需要一个变量来保存计时，考虑维护全局纯净，可以借助闭包来实现：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* fn [<span class="keyword">function</span>] 需要防抖的函数</span><br><span class="line">* delay [number] 毫秒，防抖期限值</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">function</span> debounce(fn,delay)&#123;</span><br><span class="line">    <span class="built_in">let</span> timer = null //借助闭包</span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            clearTimeout(timer) //进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span><br><span class="line">            timer = setTimeOut(fn,delay) </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timer = setTimeOut(fn,delay) // 进入该分支说明当前并没有在计时，那么就开始一个计时</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然 上述代码是为了贴合思路，方便理解（这么贴心不给个赞咩？），写完会发现其实 <code>time = setTimeOut(fn,delay)</code>是一定会执行的，所以可以稍微简化下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/*****************************简化后的分割线 ******************************/</span><br><span class="line"><span class="keyword">function</span> debounce(fn,delay)&#123;</span><br><span class="line">    <span class="built_in">let</span> timer = null //借助闭包</span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            clearTimeout(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(fn,delay) // 简化写法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 然后是旧代码</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showTop</span></span>  () &#123;</span><br><span class="line">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class="line">　　console.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = debounce(showTop,1000) // 为了方便观察效果我们取个大点的间断值，实际使用根据需要来配置</span><br></pre></td></tr></table></figure>
<p>此时会发现，必须在停止滚动1秒以后，才会打印出滚动条位置。</p>
<p>到这里，已经把<strong>防抖</strong>实现了，现在给出定义：</p>
<ul>
<li>对于<strong>短时间内连续触发</strong>的事件（上面的滚动事件），<strong>防抖的含义就是让某个时间期限（如上面的1000毫秒）内，事件处理函数只执行一次。</strong></li>
</ul>
<h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h2><p>继续思考，使用上面的防抖方案来处理问题的结果是：</p>
<ul>
<li>如果在限定时间段内，不断触发滚动事件（比如某个用户闲着无聊，按住滚动不断的拖来拖去），只要不停止触发，理论上就永远不会输出当前距离顶部的距离。</li>
</ul>
<p><strong>但是如果产品同学的期望处理方案是：即使用户不断拖动滚动条，也能在某个时间间隔之后给出反馈呢？</strong>（此处暂且不论哪种方案更合适，既然产品爸爸说话了我们就先考虑怎么实现）</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYss1g.jpg" alt="aYss1g.jpg"></p>
<p>其实很简单：我们可以设计一种<strong>类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活</strong>（类似于技能冷却时间）。</p>
<p><strong>效果：</strong>如果短时间内大量触发同一事件，那么<strong>在函数执行一次之后，该函数在指定的时间期限内不再工作</strong>，直至过了这段时间才重新生效。</p>
<p><strong>实现</strong> 这里借助<code>setTimeout</code>来做一个简单的实现，加上一个状态位<code>valid</code>来表示当前函数是否处于工作状态：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> throttle(fn,delay)&#123;</span><br><span class="line">    <span class="built_in">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           //休息时间 暂不接客</span><br><span class="line">           <span class="built_in">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">       // 工作时间，执行函数并且在间隔期内把状态位设为无效</span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 请注意，节流函数并不止上面这种实现方案,</span><br><span class="line">   例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。</span><br><span class="line">   也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">// 以下照旧</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showTop</span></span>  () &#123;</span><br><span class="line">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class="line">　　console.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = throttle(showTop,1000) </span><br></pre></td></tr></table></figure>
<p>运行以上代码的结果是：</p>
<ul>
<li><p>如果一直拖着滚动条进行滚动，那么会以1s的时间间隔，持续输出当前位置和顶部的距离</p>
<h2 id="其他应用场景举例"><a href="#其他应用场景举例" class="headerlink" title="其他应用场景举例"></a>其他应用场景举例</h2><p>讲完了这两个技巧，下面介绍一下平时开发中常遇到的场景：</p>
<p>1、搜索框input事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者实现输入间隔大于某个值（如500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。<br>2、页面resize事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行dom渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况）</p>
<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><p>上述内容基于防抖和节流的核心思路设计了简单的实现算法，但是不代表实际的库（例如undercore js）的源码就直接是这样的，最起码的可以看出，在上述代码实现中，因为showTop本身的很简单，无需考虑作用域和参数传递，所以连apply都没有用到，实际上肯定还要考虑传递argument以及上下文环境（毕竟apply需要用到this对象）。这里的相关知识在本专栏《柯里化》和《this对象》的文章里也有提到。本文依然坚持突出核心代码，尽可能剥离无关功能点的思路行文因此不做赘述。</p>
<h1 id="结合参看-https-www-cnblogs-com-goloving-p-8672361-html"><a href="#结合参看-https-www-cnblogs-com-goloving-p-8672361-html" class="headerlink" title="结合参看 https://www.cnblogs.com/goloving/p/8672361.html"></a>结合参看 <a class="link"   href="https://www.cnblogs.com/goloving/p/8672361.html" >https://www.cnblogs.com/goloving/p/8672361.html<i class="fas fa-external-link-alt"></i></a></h1></li>
</ul>
]]></content>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解css之line-height</title>
    <url>/2020/12/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3css%E4%B9%8Bline-height/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>行高，顾名思义是一行文字的高度，而从规范上来说则是两行文字基线之间的距离。行高是作用在每一个行框盒子(line-box)上的，而行框盒子则是由内联盒子组成，因此，行高与内联元素可以说是非常紧密，行高直接决定了内联元素的高度（注意：这里的内联元素不包括替换元素）；对于块级元素和替换元素，行高是无法决定最终高度的，只能决定行框盒子的最小高度。</p>
<h3 id="x、x-height以及ex"><a href="#x、x-height以及ex" class="headerlink" title="x、x-height以及ex"></a>x、x-height以及ex</h3><p>字母x在css里面扮演着一个很重要的角色，因为字母x的下边缘就是基线所在的位置。而x-height指的就是字母x的高度，ex是一个尺寸单位，其大小是相对字母x的来计算的，即1ex就表示1个字母x的高度。如下图所示：</p>
<p><a href="https://imgchr.com/i/rbXOpT"><img src="https://s3.ax1x.com/2020/12/29/rbXOpT.png" alt="rbXOpT.png"></a></p>
<p>我们在平时的开发中很少用到ex，因为ex是个相对单位。对于相对的东西，我们总是感觉很难控制，但这并不表明ex就一点用处都没有。我们可以利用ex就是一个x-height的特性来实现图标与文字的垂直居中，这样如论字体大小如何变化，都不会影响垂直居中的效果。代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.icon-arrow &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 1ex;</span><br><span class="line">    background: url(down.png) no-repeat center;</span><br><span class="line">    background-size: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;我是一段文本&lt;/span&gt;</span><br><span class="line">    &lt;i class=<span class="string">&quot;icon-arrow&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><a href="https://imgchr.com/i/rbjOUI"><img src="https://s3.ax1x.com/2020/12/29/rbjOUI.png" alt="rbjOUI.png"></a></p>
<h4 id="line-height的属性值"><a href="#line-height的属性值" class="headerlink" title="line-height的属性值"></a>line-height的属性值</h4><ul>
<li>normal</li>
<li>数字</li>
<li>长度</li>
<li>百分比<h4 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h4>normal为line-height的默认值，但并不是一个固定的值，而是会受font-family的影响，对于“微软雅黑”，其值为1.32；而对于“宋体”，其值为1.141。由于不同操作系统，不同浏览器所使用的字体不一样，所以最终line-height的具体值会不一样，因此这个属性作用不大。</li>
</ul>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>我们可以设置line-height: 1.5。其意思是说line-height的最终大小为 1.5* font-size，一般建议使用该值来设置line-height。</p>
<h4 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h4><p>长度用的最多的就是px与em，em跟数字一样，都是相对于font-size来计算的。</p>
<h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><p>百分比也是相对于font-size来计算的。</p>
<p>相信细心的小伙伴已经发现了，数字，em以及百分比都是相对于font-size来计算的，既然这样，为什么还要多此一举设置另外两个属性呢。原因就在于它们的继承方式是不一样的。对于数字，父元素设置了1.5，则子元素也是会继承1.5。但如果父元素设置的是1.5em，假设父元素font-size是20px，则父元素line-height是30px，同时子元素的line-height也是30px，也就是说子元素继承的是父元素计算后的line-height值。因此，这也是为什么上面推荐使用数字而不是em或百分比的原因了。</p>
<h4 id="行距与半行距"><a href="#行距与半行距" class="headerlink" title="行距与半行距"></a>行距与半行距</h4><p>很多开发人员开还原设计图的时候，往往没有考虑到行距的影响，因此开发出来的页面很多时候都与设计图不符合，总会差那么几个像素。那么什么是行距呢，我们可以想象一下在文字排版的时候，如果行与行之间的间距为0，则文字是会紧紧贴在一起的，因此，行距就是用来协助排版的。行距的计算为：line-height - em-box，em-box指的是1em的大小，因此行距可以表示为：line-height - font-size，假设line-height为1.5，font-size为20，则行距为：<br>1.5*20 - 20 = 10，则最终行距为10，而这个行距会平均作用于文字的上边和下边。但em-box我们是无法感知这个盒子在哪的，而内容区域我们则可以理解为我们选中文字后的背景色所在区域，而当字体是宋体的时候，内容区域和em-box是等高的，因此我们可以利用此揪出ex-box的藏身之处。如下图所示：<br><a href="https://imgchr.com/i/rbvhZj"><img src="https://s3.ax1x.com/2020/12/29/rbvhZj.png" alt="rbvhZj.png"></a></p>
<p>正是因为行距的存在，我们给元素设置margin值时，要减去相应的半行距值，这样才能比较精确地还原设计图。</p>
<h4 id="line-height的应用"><a href="#line-height的应用" class="headerlink" title="line-height的应用"></a>line-height的应用</h4><p>大部分时候，我们设置line-height，都是为了垂直居中对齐。但这里的居中，只能说是近似居中，从上面的图可以看出：行距是上下均分的，但是内容区域不是，一般来说，文字都是偏下的。我们平时设置字体一般都是12-20像素，这么小的像素值，给出line-height值后，由于上下相差不大，因此感觉上是垂直居中的。line-height除了可以作为单行文本的居中对齐外，多行文本也是可以的，代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    line-height: 400px;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.text &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    line-height: 1.3;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;p class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;text&quot;</span>&gt;这是一段很长很长的文字，这是一段很长很长的文字，这是一段很长很长的文字，这是一段很长很长的文字，这是一段很长很长的文字&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><a href="https://imgchr.com/i/rbxkOe"><img src="https://s3.ax1x.com/2020/12/29/rbxkOe.png" alt="rbxkOe.png"></a></p>
<p>前面的文章有说过，每一个行框盒子前面都有一个看不见的，规范称之为“strut”的东西。我们给.box设置了line-height为400px，则这个“strut”的line-height也会继承为400px。然后我们给.text设置inline-block，这样我们就可以重置.box设置的line-height，又因为ineline-block保持了内联特性，因此我们可以设置vertical-align以及产生“strut”，从而实现近似垂直居中对齐。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>介绍了字母x在css中的地位以及ex的应用</li>
<li>line-height各种不同的属性值以及数字、em和百分比的不同之处</li>
<li>行距在line-height的作用</li>
<li>line-height实现单行垂直居中和多行垂直居中</li>
</ul>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解css之vertical-align</title>
    <url>/2020/12/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3css%E4%B9%8Bvertical-align/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>vertical-align用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。也就是说，对于块级元素，vertical-align是不起作用的。</p>
<h3 id="vertical-align的各类属性值"><a href="#vertical-align的各类属性值" class="headerlink" title="vertical-align的各类属性值"></a>vertical-align的各类属性值</h3><p>vertical-align的属性值可以归为以下4类：</p>
<ul>
<li>线类，如 baseline、top、middle、bottom；</li>
<li>文本类，如 text-top、text-bottom；</li>
<li>上标下标类，如 sub、super；</li>
<li>数值百分比类，如 10px、1em、5%；</li>
</ul>
<h4 id="线类"><a href="#线类" class="headerlink" title="线类"></a>线类</h4><p>baseline，baseline为vertical-align的默认值，其意思是指基线对齐，所谓基线，指的是字母x的下边缘，具体可看<a href="">深入理解css之line-height</a>有讲解到，不懂的小伙伴建议先看看这篇文章。我们来看个例子，代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;text&quot;</span>&gt;文本&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下： </p>
<p><a href="https://imgchr.com/i/rHxDKg"><img src="https://s3.ax1x.com/2020/12/29/rHxDKg.png" alt="rHxDKg.png"></a></p>
<p>由于baseline是默认值，所以可以不用写。.box的line-height为100px，这其实是给“strut”设置的（不懂strut概念的可以看看<a href="">深入理解css盒子模型</a>，简单点说就是每一个行框盒子都有一个看不见的节点，该节点继承了line-height），因此.text对齐于该节点的基线（可以想象成这个看不见的节点有一个字母x，而.text就是跟这个字母x的下边缘对齐）</p>
<p>关于baseline，有一个需要注意的地方就是inline-block元素，如果一个inline-block元素，里面没有内联元素，或者overflow不是visible，则该元素的基线是其margin底边缘；否则其基线就是元素里面最后一行内联元素的基线。例子如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.text &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;text&quot;</span>&gt;文本&lt;/span&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;text&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><a href="https://imgchr.com/i/rHz1J0"><img src="https://s3.ax1x.com/2020/12/29/rHz1J0.png" alt="rHz1J0.png"></a></p>
<p>top，对于内联元素，指的是元素的顶部和当前行框盒子的顶部对齐；对于table-cell元素，指的是元素的顶padding边缘和表格行的顶部对齐。例子如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">&#125;</span><br><span class="line">.top &#123;</span><br><span class="line">    line-height: normal;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;top&quot;</span>&gt;文本&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><a href="https://imgchr.com/i/rbSl0H"><img src="https://s3.ax1x.com/2020/12/29/rbSl0H.png" alt="rbSl0H.png"></a></p>
<p>bottom，跟top类似，将顶部换成底部即可。</p>
<p>middle，这个属性值用得比较多。对于内联元素指的是元素的垂直中心点与行框盒子基线往上1/2x-height处对齐，简单点说就是字母x的中心位置对齐；对于table-cell元素，指的是单元格填充盒子相对于外面的表格行居中对齐。基本上所有字体中，字母x的位置都是偏下一点的，font-size越大偏移越明显，因此，字母x中心的位置不是行框盒子的中心，也就是说vertical-align只能实现近似垂直居中对齐。</p>
<h4 id="文本类"><a href="#文本类" class="headerlink" title="文本类"></a>文本类</h4><p>text-top，指的是盒子的顶部和父级内容区域的顶部对齐。</p>
<p>text-bottom，指的是盒子的底部和父级内容区域的底部对齐。</p>
<p>例子如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.f12 &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">.f16 &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line">.f20 &#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.text-top &#123;</span><br><span class="line">    line-height: normal;</span><br><span class="line">    vertical-align: text-top;</span><br><span class="line">    width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;f12&quot;</span>&gt;12px&lt;/span&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;f16&quot;</span>&gt;16px&lt;/span&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;f20&quot;</span>&gt;20px&lt;/span&gt;</span><br><span class="line">    &lt;img class=<span class="string">&quot;text-top&quot;</span> src=<span class="string">&quot;./card.jpg&quot;</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><a href="https://imgchr.com/i/rbCF0g"><img src="https://s3.ax1x.com/2020/12/29/rbCF0g.png" alt="rbCF0g.png"></a></p>
<p>所谓内容区域，可以看成是鼠标选中文字后高亮的背景色区域，上面的例子中，由于父元素设置的是20px，所以图片的vertical-align设置text-top的时候，就可以看成是跟子元素为20px元素的内容区域顶部对齐。</p>
<h4 id="上标下标类"><a href="#上标下标类" class="headerlink" title="上标下标类"></a>上标下标类</h4><p>上标和下标对应着两个标签super和sub，super在上面，sub在下面，这两个属性值在数学公式和化学表达式中用得比较多，平时我们开发几乎用不到，也没啥好讲的。</p>
<h4 id="数值百分比类"><a href="#数值百分比类" class="headerlink" title="数值百分比类"></a>数值百分比类</h4><p>vertical-align是支持数值的，并且兼容性也非常好，但大部分开发人员却不知道vertical-align支持数值。对于数值，正值表示由基线往上偏移，负值表示由基线往下偏移。而百分比则是基于line-height来计算的，百分比用得比较少，因为line-height一般都是开发人员给出的，这时候数值就可以精确定位元素，不需要再使用百分比再去计算一遍。使用数值的代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.num &#123;</span><br><span class="line">    line-height: normal;</span><br><span class="line">    vertical-align: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">&quot;num&quot;</span>&gt;文本&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><a href="https://imgchr.com/i/rbPEDO"><img src="https://s3.ax1x.com/2020/12/29/rbPEDO.png" alt="rbPEDO.png"></a></p>
<h4 id="vertical-align起作用的前提"><a href="#vertical-align起作用的前提" class="headerlink" title="vertical-align起作用的前提"></a>vertical-align起作用的前提</h4><p>vertical-align起作用是有前提条件的，这个前提条件就是：只能应用于内联元素以及display值为table-cell的元素。在css中，有些css属性是会改变元素的display值的，例如float和position: absolute，一旦设置了这两个属性之一，元素的display值就是变为block，因此，vertical-align也就失去了作用。下面这段代码这样写就是错的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">     <span class="built_in">float</span>: left;</span><br><span class="line">     vertical-align: middle; /* 错误，该行代码无效 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，更多人遇到的是以下这种无效的情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.box &gt; img &#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;img  src=<span class="string">&quot;1.jpg&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>其实，不是vertical-align无效，而是前面所说的“strut”的影响，由于.box没有设置line-height，所以“strut”的line-height就非常小，比图片的高度小很多，vertical-align: middle没法发挥作用。这时给.box一个比较高的line-height，就会看到vertical-align起作用了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="vertical-align与line-height的关系"><a href="#vertical-align与line-height的关系" class="headerlink" title="vertical-align与line-height的关系"></a>vertical-align与line-height的关系</h4><p>前面讲了，vertical-align的百分比值是根据line-height来计算的。但实质上，只要是内联元素，这两个元素都会同时在起作用。如下例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    line-height: 32px;</span><br><span class="line">&#125;</span><br><span class="line">.box &gt; span &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;文本&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rbkp5Q"><img src="https://s3.ax1x.com/2020/12/29/rbkp5Q.png" alt="rbkp5Q.png"></a></p>
<p>从代码上看，好像.box的高度会是32px，但实质上.box的高度会比32px还要高。原因是”strut”继承了line-height: 32px，span也继承了line-height: 32px，但两者的font-size不一样，这就导致了”strut”的font-size比较小，而span的font-size比较大，也就是说它们的基线不在同一位置上，”strut”偏上一点，而span默认又是基线对齐，为此，span总体会往上移以便跟”strut”基线对齐，.box元素就是这样被撑高了。而解决方案可以有以下几种：</p>
<ul>
<li>span元素不使用基线对齐，可以改为top对齐</li>
<li>span元素块状化</li>
<li>line-height设置为0</li>
<li>font-size设置为0</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>讲解了vertical-align的各类属性值及其效果</li>
<li>vertical-align起作用的前提是内联元素</li>
<li>vertical-align与line-height都是同时作用在内联元素上的</li>
</ul>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法总结</title>
    <url>/2021/01/04/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 用任意一种语言实现一个函数，判断一个给定整数数组中是否存在某两个元素之和恰好等于一个给定值 k，</span><br><span class="line"> 存在则返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span>。该函数的输入参数有两个，第一个参数为整数数组 nums，第二个参数为整数 k，返回值为布尔值。</span><br><span class="line"> 可以参考以下签名，写出实现。【请不要使用排序！要求时间复杂度为 O(n)，n 为数组长度】</span><br><span class="line"></span><br><span class="line">// JavaScript</span><br><span class="line">var checkTwoSum = <span class="keyword">function</span>(nums, k) &#123;</span><br><span class="line">    var temp = [];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">      var dif = k-nums[i];</span><br><span class="line">      <span class="keyword">if</span>(temp[dif] != undefined)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-手动实现一种时间复杂度为-O-n-log-n-的排序算法，可用任意语言实现，也可以只写出伪代码。"><a href="#2-手动实现一种时间复杂度为-O-n-log-n-的排序算法，可用任意语言实现，也可以只写出伪代码。" class="headerlink" title="2. 手动实现一种时间复杂度为 O(n log n) 的排序算法，可用任意语言实现，也可以只写出伪代码。"></a>2. 手动实现一种时间复杂度为 O(n log n) 的排序算法，可用任意语言实现，也可以只写出伪代码。</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分法</span><br><span class="line"> * @param &#123;number[]&#125; nums1</span><br><span class="line"> * @param &#123;number[]&#125; nums2</span><br><span class="line"> * @<span class="built_in">return</span> &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"> var intersection = <span class="keyword">function</span>(nums1, nums2) &#123;</span><br><span class="line">    <span class="built_in">let</span> res = new Set();</span><br><span class="line">    nums2 = nums2.sort((a,b) =&gt; a - b);</span><br><span class="line">    <span class="built_in">let</span> binarySearch = (arr,val) =&gt; &#123;</span><br><span class="line">        <span class="built_in">let</span> left = 0;</span><br><span class="line">        <span class="built_in">let</span> right = arr.length - 1;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="built_in">let</span> mid = (left + right) &gt;&gt; 1;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] === val)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; val)&#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i = 0;i &lt; nums1.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(binarySearch(nums2,nums1[i]))&#123;</span><br><span class="line">            res.add(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> [...res];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端Web页面适配方案</title>
    <url>/2020/08/02/%E7%A7%BB%E5%8A%A8%E7%AB%AFWeb%E9%A1%B5%E9%9D%A2%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><a class="link"   href="https://segmentfault.com/a/1190000008767416" >移动端Web页面适配方案<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>详解git-pull和git-fetch的区别</title>
    <url>/2020/08/02/%E8%AF%A6%E8%A7%A3git-pull%E5%92%8Cgit-fetch%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="详解git-pull和git-fetch的区别"><a href="#详解git-pull和git-fetch的区别" class="headerlink" title="详解git pull和git fetch的区别"></a>详解git pull和git fetch的区别</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><strong>在我们使用git的时候用的更新代码是git fetch，git pull这两条指令。但是有没有小伙伴去思考过这两者的区别呢？有经验的人总是说最好用git fetch+git merge，不建议用git pull。也有人说git pull=git fetch+git merge，真的是这样吗？为什么呢？既然如此为什么git还要提供这两种方式呢？</strong></p>
<h4 id="1、相同点"><a href="#1、相同点" class="headerlink" title="1、相同点"></a>1、相同点</h4><ul>
<li><p>首先在作用上他们的功能是大致相同的，都是起到了更新代码的作用。</p>
<h4 id="2、不同点"><a href="#2、不同点" class="headerlink" title="2、不同点"></a>2、不同点</h4></li>
</ul>
<p>  <strong>先补充一些git里面相关的一些知识：</strong></p>
<ul>
<li><p>首先我们要说简单说git的运行机制。git分为本地仓库和远程仓库，我们一般情况都是写完代码，commit到本地仓库（生成本地仓的commit ID，代表当前提交代码的版本号），然后push到远程仓库（记录这个版本号），这个流程大家都熟悉。</p>
</li>
<li><p>我们本地的git文件夹里面对应也存储了git本地仓库master分支的commit ID 和 跟踪的远程分支orign/master的commit ID（可以有多个远程仓库）。那什么是跟踪的远程分支呢，打开git文件夹可以看到如下文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git/refs/head/[本地分支]</span><br><span class="line">git/refs/remotes/[正在跟踪的分支]</span><br></pre></td></tr></table></figure></li>
<li><p>其中head就是本地分支，remotes是跟踪的远程分支，这个类型的分支在某种类型上是十分相似的，他们都是表示提交的SHA1校验和（就是commitID）。</p>
</li>
<li><p>但是，不管他们是如何的相似，他们还是有一个重大的区别：</p>
</li>
<li><p>更改远端跟踪分支只能用git fetch，或者是git push后作为副产品（side-effect）来改变。我们无法直接对远程跟踪分支操作，我们必须先切回本地分支然后创建一个新的commit提交。</p>
</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsNnA.png" alt="aYsNnA.png"></p>
<ul>
<li>首先假设我们本地仓库的 master 分支上 commit ID =1 ，orign/mastter中的commit ID =1 ;这时候远程仓库有人更新了github ogirn库中master分支上的代码，新的代码版本号commit ID =2 ,那么在github上 orign/master的commitID=2，然后我们要更新代码。</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsU0I.png" alt="aYsU0I.png"></p>
<h4 id="1、git-fetch"><a href="#1、git-fetch" class="headerlink" title="1、git fetch"></a>1、git fetch</h4><ul>
<li><strong>使用git fetch更新代码，本地的库中master的commitID不变，还是等于1。但是与git上面关联的那个orign/master的commit ID变成了2。</strong> 这时候我们本地相当于存储了两个代码的版本号，我们还要通过merge去合并这两个不同的代码版本，如果这两个版本都修改了同一处的代码，这时候merge就会出现冲突，然后我们解决冲突之后就生成了一个新的代码版本。</li>
<li><strong>这时候本地的代码版本可能就变成了commit ID=3，即生成了一个新的代码版本。</strong></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/aYswAP.png" alt="aYswAP.png"></p>
<ul>
<li><p><strong>相当于fetch的时候本地的master没有变化，但是与远程仓关联的那个版本号被更新了，我们接下来就是在本地合并这两个版本号的代码。</strong></p>
<h4 id="2、git-pull"><a href="#2、git-pull" class="headerlink" title="2、git pull"></a>2、git pull</h4></li>
<li><p>是用git pull更新代码的话就比较简单暴力了，看下图。</p>
</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/02/aYsBh8.png" alt="aYsBh8.png"></p>
<p> <strong>使用git pull的会将本地的代码更新至远程仓库里面最新的代码版本</strong></p>
<h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><ul>
<li><p>由此可见，git pull看起来像git fetch+get merge，但是根据commit ID来看的话，他们实际的实现原理是不一样的。</p>
</li>
<li><p>这里借用之前文献看到的一句话：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> 不要用git pull，用git fetch和git merge代替它。</span><br><span class="line"></span><br><span class="line">git pull的问题是它把过程的细节都隐藏了起来，以至于你不用去了解git中各种类型分支的区别和使用方法。当然，多数时候这是没问题的，但一旦代码有问题，你很难找到出错的地方。看起来git pull的用法会使你吃惊，简单看一下git的使用文档应该就能说服你。</span><br><span class="line"></span><br><span class="line">将下载（fetch）和合并（merge）放到一个命令里的另外一个弊端是，你的本地工作目录在未经确认的情况下就会被远程分支更新。当然，除非你关闭所有的安全选项，否则git pull在你本地工作目录还不至于造成不可挽回的损失，但很多时候我们宁愿做的慢一些，也不愿意返工重来。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决JavaScript中0.1+0.2不等于0.3的问题</title>
    <url>/2020/08/24/%E8%A7%A3%E5%86%B3JavaScript%E4%B8%AD0-1-0-2%E4%B8%8D%E7%AD%89%E4%BA%8E0-3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>此问题主要是考察对JavaScript的理解层度。</p>
<p>在正常的数学逻辑思维中，0.1+0.2=0.3这个逻辑是正确的，但是在JavaScript中0.1+0.2！==0.3。</p>
<p>在JavaScript中的二进制的浮点数0.1和0.2并不是十分精确，在他们相加的结果并非正好等于0.3，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为false。</p>
<p><strong>解决办法：</strong></p>
<p>设置一个误差范围值，通常称为”机器精度“，而对于Javascript来说，这个值通常是2^-52,而在ES6中，已经为我们提供了这样一个<br>属性：Number.EPSILON，而这个值正等于2^-52。这个值非常非常小，在底层计算机已经帮我们运算好，并且无限接近0，但不等于0,。这个时候我们只要判断(0.1+0.2)-0.3小于Number.EPSILON，在这个误差的范围内就可以判定0.1+0.2===0.3为true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersequal</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a-b)&lt;<span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> a=<span class="number">0.1</span>+<span class="number">0.2</span>， b=<span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numbersequal(a,b)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>完美的兼容写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//解决兼容性问题</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>.EPSILON?<span class="built_in">Number</span>.EPSILON:<span class="built_in">Math</span>.pow(<span class="number">2</span>,-<span class="number">52</span>);</span><br><span class="line">      &#125;)();</span><br><span class="line"><span class="comment">//上面是一个自调用函数，当JS文件刚加载到内存中，就会去判断并返回一个结果，相比if(!Number.EPSILON)&#123;</span></span><br><span class="line">  <span class="comment">//   Number.EPSILON=Math.pow(2,-52);</span></span><br><span class="line">  <span class="comment">//&#125;这种代码更节约性能，也更美观。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersequal</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a-b)&lt;<span class="built_in">Number</span>.EPSILON;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//接下来再判断   </span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">0.1</span>+<span class="number">0.2</span>, b=<span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numbersequal(a,b)); <span class="comment">//这里就为true了</span></span><br></pre></td></tr></table></figure>
<p>这个是二进制浮点数最大的问题（不仅JavaScript，所有遵循IEEE 754规范的语言都是如此）。</p>
<p>　　注意：有人认为，JavaScript应该采用一种可以精确呈现数字的实现方式。一直以来出现过很多替代方案，只是都没能成为标准，以后大概也不会。这个问题看似简单，实则不然，否则早就解决了。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈对闭包的理解</title>
    <url>/2020/09/28/%E8%B0%88%E8%B0%88%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><p>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包常用的方式是在一个函数中创建另一个函数，通过另一个函数访问这个函数的局部变量</p>
<h4 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h4><ul>
<li>函数嵌套函数</li>
<li>在函数内部可以引用外部的参数和变量</li>
<li>参数和变量不会以垃圾回收机制回收</li>
</ul>
<h4 id="3、优点"><a href="#3、优点" class="headerlink" title="3、优点"></a>3、优点</h4><ul>
<li>设计私有的方法和变量</li>
<li>利用闭包可以读取函数内部的变量，变量在函数外部不能直接读取到，从而达到保护变量安全的作用。因为私有方法在函数内部都能被访问到，从而实现了私有属性和方法的共享。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//私有属性</span></span><br><span class="line"><span class="keyword">var</span> privateCounter = <span class="number">0</span>; </span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123; </span><br><span class="line">    privateCounter += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    changeBy(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    changeBy(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(privateCounter); <span class="comment">//privateCounter is not defined </span></span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 0</span></span><br><span class="line">Counter.increment();</span><br><span class="line">Counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 2</span></span><br><span class="line">Counter.decrement();</span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
在jQuery框架的私有方法和变量也是这么设计的<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jQuery.fn.init();</span><br><span class="line">&#125;</span><br><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;  <span class="comment">//this指向jQuery.prototype</span></span><br><span class="line">    &#125;,</span><br><span class="line">    length: <span class="number">1</span>,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log($().size()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
<li>将处理结果缓存<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(vari=<span class="number">0</span>,l=<span class="built_in">arguments</span>.length;i&lt;l;i++)&#123;</span><br><span class="line">            a = a*<span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;    </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args] = calculate.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h4 id="4、缺点"><a href="#4、缺点" class="headerlink" title="4、缺点"></a>4、缺点</h4></li>
<li>闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在JavaScript中，函数即闭包，只有函数才会产生作用域。</li>
<li>当返回的函数为匿名函数时，注意匿名函数中的this指的是window对象。</li>
</ul>
<h4 id="5、什么是内存泄漏？"><a href="#5、什么是内存泄漏？" class="headerlink" title="5、什么是内存泄漏？"></a>5、什么是内存泄漏？</h4><p>内存泄漏（Memory Leak）是指不再用到的内存，没有及时释放。</p>
<h4 id="6、JavaScript垃圾回收机制原理"><a href="#6、JavaScript垃圾回收机制原理" class="headerlink" title="6、JavaScript垃圾回收机制原理"></a>6、JavaScript垃圾回收机制原理</h4><p>解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。<br>现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。</p>
<blockquote>
<p>标记清除：</p>
</blockquote>
<p>js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在一个函数中声明一个变量，就将这个变量标记为”进入环境”，从逻辑上讲，永远不能释放进入环境变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为”离开环境”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;    <span class="comment">//被标记&quot;进入环境&quot;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&quot;hello&quot;</span>;    <span class="comment">//被标记&quot;进入环境&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">test();    <span class="comment">//执行完毕后之后，a和b又被标记&quot;离开环境&quot;，被回收</span></span><br></pre></td></tr></table></figure>
<p>垃圾回收机制在运行的时候会给存储再内存中的所有变量都加上标记（可以是任何标记方式），然后，它会去掉处在环境中的变量及被环境中的变量引用的变量标记（闭包）。而在此之后剩下的带有标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后垃圾回收机制到下一个周期运行时，将释放这些变量的内存，回收它们所占用的空间。</p>
<p>到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</p>
<blockquote>
<p>引用计数：</p>
</blockquote>
<p>语言引擎有一张”引用表”，保存了内存里面所有资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。</p>
<p><a href="https://imgchr.com/i/Bz6jVe"><img src="https://s3.ax1x.com/2020/11/12/Bz6jVe.png" alt="Bz6jVe.png"></a></p>
<p>上图中，左下角的两个值，没有任何引用，所以可以释放。</p>
<p>如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const arr = [1,2,3,4];</span><br><span class="line">console.log(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上面的代码中，数组[1,2,3,4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它是会持续占用内存。<br>如果增加一行代码，解除arr对[1,2,3,4]引用，这块内存就可以被垃圾回收机制释放了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> arr = [1,2,3,4];</span><br><span class="line">console.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">arr = null;</span><br></pre></td></tr></table></figure>
<p>上面代码中，arr重置为null，就解除了对[1，2，3，4]的引用，引用次数变成了0，内存就可以释放出来了。</p>
<p>因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就必须手动解除引用</p>
<h4 id="7、内存泄漏的识别方法"><a href="#7、内存泄漏的识别方法" class="headerlink" title="7、内存泄漏的识别方法"></a>7、内存泄漏的识别方法</h4><p>怎样可以观察到内存泄漏呢？</p>
<p>如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。</p>
<ul>
<li>1、浏览器<br>Chrome 浏览器查看内存占用，按照以下步骤操作。</li>
</ul>
<p><a href="https://imgchr.com/i/BzcrZD"><img src="https://s3.ax1x.com/2020/11/12/BzcrZD.png" alt="BzcrZD.png"></a></p>
<blockquote>
<p>1、打开开发者工具，选择 Timeline 面板<br> 2、在顶部的Capture字段里面勾选 Memory<br> 3、点击左上角的录制按钮。<br> 4、在页面上进行各种操作，模拟用户的使用情况。<br> 5、一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。</p>
</blockquote>
<p> 如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。</p>
<p><a href="https://imgchr.com/i/BzgPY9"><img src="https://s3.ax1x.com/2020/11/12/BzgPY9.png" alt="BzgPY9.png"></a></p>
<p>反之，就是内存泄漏了。<br><a href="https://imgchr.com/i/BzgMYd"><img src="https://s3.ax1x.com/2020/11/12/BzgMYd.png" alt="BzgMYd.png"></a></p>
<ul>
<li>2、命令行<br>命令行可以使用 Node 提供的<a class="link"   href="https://nodejs.org/api/process.html#process_process_memoryusage" >process.memoryUsage<i class="fas fa-external-link-alt"></i></a>方法。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">console.log(process.memoryUsage());</span><br><span class="line">// &#123; rss: 27709440,</span><br><span class="line">//  heapTotal: 5685248,</span><br><span class="line">//  heapUsed: 3449392,</span><br><span class="line">//  external: 8772 &#125;</span><br></pre></td></tr></table></figure>
<p>process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下。</p>
<p> <a href="https://imgchr.com/i/Bzg4pR"><img src="https://s3.ax1x.com/2020/11/12/Bzg4pR.png" alt="Bzg4pR.png"></a></p>
<blockquote>
<p>1、rss（resident set size）：所有内存占用，包括指令区和堆栈。<br>   2、heapTotal：”堆”占用的内存，包括用到的和没用到的。<br>   3、heapUsed：用到的堆的部分。<br>   4、external： V8 引擎内部的 C++ 对象占用的内存。</p>
</blockquote>
<p>判断内存泄漏，以heapUsed字段为准。</p>
<h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>前面说过，及时清除引用非常重要。但是，你不可能记得那么多，有时候一疏忽就忘了，所以才有那么多内存泄漏。</p>
<p>最好能有一种方法，在新建引用的时候就声明，哪些引用必须手动清除，哪些引用可以忽略不计，当其他引用消失以后，垃圾回收机制就可以释放内存。这样就能大大减轻程序员的负担，你只要清除主要引用就可以了。</p>
<p>ES6 考虑到了这一点，推出了两种新的数据结构：WeakSet 和 WeakMap。它们对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个”Weak”，表示这是弱引用。</p>
<p>下面以 WeakMap 为例，看看它是怎么解决内存泄漏的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const wm = new WeakMap();</span><br><span class="line"> </span><br><span class="line">const element = document.getElementById(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">wm.set(element, <span class="string">&#x27;some information&#x27;</span>);</span><br><span class="line">wm.get(element) // <span class="string">&quot;some information&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。</p>
<p>也就是说，DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。</p>
<p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。</p>
<h3 id="WeakMap-示例"><a href="#WeakMap-示例" class="headerlink" title="WeakMap 示例"></a>WeakMap 示例</h3><p><a class="link"   href="https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292109104" >根据这个思路<i class="fas fa-external-link-alt"></i></a></p>
<p>首先，打开 Node 命令行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ node --expose-gc</span><br></pre></td></tr></table></figure>
<p>上面代码中，–expose-gc参数表示允许手动执行垃圾回收机制。</p>
<p>然后，执行下面的代码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 手动执行一次垃圾回收，保证获取的内存使用状态准确</span><br><span class="line">&gt; global.gc(); </span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">// 查看内存占用的初始状态，heapUsed 为 4M 左右</span><br><span class="line">&gt; process.memoryUsage(); </span><br><span class="line">&#123; rss: 21106688,</span><br><span class="line">  heapTotal: 7376896,</span><br><span class="line">  heapUsed: 4153936,</span><br><span class="line">  external: 9059 &#125;</span><br><span class="line"> </span><br><span class="line">&gt; <span class="built_in">let</span> wm = new WeakMap();</span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">&gt; <span class="built_in">let</span> b = new Object();</span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">&gt; global.gc();</span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">// 此时，heapUsed 仍然为 4M 左右</span><br><span class="line">&gt; process.memoryUsage(); </span><br><span class="line">&#123; rss: 20537344,</span><br><span class="line">  heapTotal: 9474048,</span><br><span class="line">  heapUsed: 3967272,</span><br><span class="line">  external: 8993 &#125;</span><br><span class="line"> </span><br><span class="line">// 在 WeakMap 中添加一个键值对，</span><br><span class="line">// 键名为对象 b，键值为一个 5*1024*1024 的数组  </span><br><span class="line">&gt; wm.set(b, new Array(5*1024*1024));</span><br><span class="line">WeakMap &#123;&#125;</span><br><span class="line"> </span><br><span class="line">// 手动执行一次垃圾回收</span><br><span class="line">&gt; global.gc();</span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">// 此时，heapUsed 为 45M 左右</span><br><span class="line">&gt; process.memoryUsage(); </span><br><span class="line">&#123; rss: 62652416,</span><br><span class="line">  heapTotal: 51437568,</span><br><span class="line">  heapUsed: 45911664,</span><br><span class="line">  external: 8951 &#125;</span><br><span class="line"> </span><br><span class="line">// 解除对象 b 的引用  </span><br><span class="line">&gt; b = null;</span><br><span class="line">null</span><br><span class="line"> </span><br><span class="line">// 再次执行垃圾回收</span><br><span class="line">&gt; global.gc();</span><br><span class="line">undefined</span><br><span class="line"> </span><br><span class="line">// 解除 b 的引用以后，heapUsed 变回 4M 左右</span><br><span class="line">// 说明 WeakMap 中的那个长度为 5*1024*1024 的数组被销毁了</span><br><span class="line">&gt; process.memoryUsage(); </span><br><span class="line">&#123; rss: 20639744,</span><br><span class="line">  heapTotal: 8425472,</span><br><span class="line">  heapUsed: 3979792,</span><br><span class="line">  external: 8956 &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，只要外部的引用消失，WeakMap 内部的引用，就会自动被垃圾回收清除。由此可见，有了它的帮助，解决内存泄漏就会简单很多。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a class="link"   href="http://newhtml.net/v8-garbage-collection/" >更深入一些的讲解<i class="fas fa-external-link-alt"></i></a></p>
<p>没有被引用的对象就是垃圾，就是要被清除。</p>
<p><a class="link"   href="https://www.jianshu.com/p/a8a04fd00c3c" >其他的算法参考这里<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS能力测评经典题总结</title>
    <url>/2020/10/12/JS%E8%83%BD%E5%8A%9B%E6%B5%8B%E8%AF%84%E7%BB%8F%E5%85%B8%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="常用的数组方法和字符串方法"><a href="#常用的数组方法和字符串方法" class="headerlink" title="常用的数组方法和字符串方法:"></a>常用的数组方法和字符串方法:</h4><p><img src="https://s1.ax1x.com/2020/10/14/05NbI1.png"><br><br /><br><img src="https://s1.ax1x.com/2020/10/14/05NHaR.png"></p>
<h4 id="1、查找元素在数组中的位置"><a href="#1、查找元素在数组中的位置" class="headerlink" title="1、查找元素在数组中的位置"></a>1、查找元素在数组中的位置</h4><p><img src="https://s1.ax1x.com/2020/10/14/05N7Z9.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexof</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.indexof)&#123; <span class="comment">//判断浏览器是否支持indexof方法</span></span><br><span class="line">    <span class="keyword">return</span> arr.indexof(item)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] === item)&#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexof</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.indexof)&#123; </span><br><span class="line">    <span class="keyword">return</span> arr.indexof(item)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(arr.indexof(item) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexof(item)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Array.prototype.indexOf</code>:</p>
<p><code>indexof()</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>
<p>语法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arr.indexOf(searchElement) //查找searchElement元素在数组中的第一个位置</span><br><span class="line">arr.indexOf(searchElement[, fromIndex = 0]) //从fromIndex开始查找searchElement元素在数组中的第一个位置</span><br></pre></td></tr></table></figure>
<p>还有另外一个查找字符串的方法<code>String.prototype.indexOf()</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">str.indexOf(searchValue[, fromIndex])</span><br></pre></td></tr></table></figure>
<ul>
<li>searchValue：一个字符串表示被查找的值。</li>
<li>fromIndex（可选）：<br>数字表示开始查找的位置。可以是任意整数，默认值为 <code>0</code>。<br>如果 <code>fromIndex</code> 的值小于 <code>0</code>，或者大于 <code>str.length</code> ，那么查找分别从 <code>0</code> 和<code>str.length</code> 开始。（译者注：  <code>fromIndex</code> 的值小于 0，等同于为空情况； <code>fromIndex</code> 的值大于或等于 <code>str.length</code> ，那么结果会直接返回 -1 。）<br>举个例子，<code>&#39;hello world&#39;.indexOf(&#39;o&#39;, -5)</code> 返回 <code>4</code> ，因为它是从位置<code>0</code>处开始查找，然后 <code>o</code> 在位置4处被找到。另一方面，<code>&#39;hello world&#39;.indexOf(&#39;o&#39;, 11)</code> （或 <code>fromIndex</code> 填入任何大于11的值）将会返回 <code>-1</code> ，因为开始查找的位置<code>11</code>处，已经是这个字符串的结尾了。</li>
</ul>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" >详细可查看MDN<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="2、添加元素-末尾添加"><a href="#2、添加元素-末尾添加" class="headerlink" title="2、添加元素(末尾添加)"></a>2、添加元素(末尾添加)</h4><p><img src="https://s1.ax1x.com/2020/10/14/05WGpF.jpg"></p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" >Array.slice()<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 普通的for循环拷贝+push</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">    resArr.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  resArr.push(item)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 使用concat将传入的数组或非数组值与原数组合并 组成一个新的数组并返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.concat(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 使用slice浅拷贝+push</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = arr.slice(<span class="number">0</span>) <span class="comment">// slice(start, end)浅拷贝数组</span></span><br><span class="line">  newArr.push(item);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四 `...`扩展运算符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = [...arr, item];</span><br><span class="line">  <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、移除数组中的元素-返回原数组"><a href="#3、移除数组中的元素-返回原数组" class="headerlink" title="3、移除数组中的元素(返回原数组)"></a>3、移除数组中的元素(返回原数组)</h4><p><img src="https://s1.ax1x.com/2020/10/14/05W3fU.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 普通for循环+splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeWithoutCopy</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] == item)&#123;</span><br><span class="line">      arr.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 方法一的另外一种写法</span></span><br><span class="line"><span class="comment">//在这里要注意在删除掉一个元素时，要i-，即删除这个元素后，其他的位置往前移</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeWidthoutCopy</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] == item)&#123;</span><br><span class="line">      arr.splice(i, <span class="number">1</span>);</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、移除数组中的元素-返回新的数组-—–-把第3题稍微变一下"><a href="#4、移除数组中的元素-返回新的数组-—–-把第3题稍微变一下" class="headerlink" title="4、移除数组中的元素(返回新的数组) —– 把第3题稍微变一下"></a>4、移除数组中的元素(返回新的数组) —– 把第3题稍微变一下</h4><p><img src="https://s1.ax1x.com/2020/10/14/05oy1f.jpg"></p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" >filter<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 filter过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res != item</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 for循环 + push</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] !== item)&#123;</span><br><span class="line">      resArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三 forEach + push (效率高于for循环)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v !== item)&#123;</span><br><span class="line">      resArr.push(v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四 forEach + push</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr.slice(<span class="number">0</span>);</span><br><span class="line">  resArr.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v == item)&#123;</span><br><span class="line">      resArr.splice(i, <span class="number">1</span>);</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、数组求和"><a href="#5、数组求和" class="headerlink" title="5、数组求和"></a>5、数组求和</h4><p><img src="https://s1.ax1x.com/2020/10/14/05OLzn.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 方法一 普通for循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    res += arr[i]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 forEach循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    array[index] = value;</span><br><span class="line">    res += value</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三 reduce</span></span><br><span class="line">reduce()接收一个函数作为累加器，数组中的每个值(从左至右)开始缩减，最终计算为一个值</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四 eval</span></span><br><span class="line"><span class="comment">// eval()可计算某个字符串，并执行其中的JavaScript代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(arr.join(<span class="string">&#x27;+&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、删除数组中的最后一个元素"><a href="#6、删除数组中的最后一个元素" class="headerlink" title="6、删除数组中的最后一个元素"></a>6、删除数组中的最后一个元素</h4><p><img src="https://s1.ax1x.com/2020/10/15/0TPnkn.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 slice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 concat/slice + pop</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr.concat();</span><br><span class="line">  resArr.pop()</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7、添加元素-开头添加"><a href="#7、添加元素-开头添加" class="headerlink" title="7、添加元素(开头添加)"></a>7、添加元素(开头添加)</h4><p><img src="https://s1.ax1x.com/2020/10/16/0HnxWF.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat/slice/arr.join.split(&#x27;,&#x27;)+unshift</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// let resArr = arr.slice(0)</span></span><br><span class="line">  <span class="comment">// let resArr = arr.concat()</span></span><br><span class="line">  <span class="keyword">let</span> resArr = arr.join().slice(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  resArr.unshift(item)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8、删除数组中的第一个元素"><a href="#8、删除数组中的第一个元素" class="headerlink" title="8、删除数组中的第一个元素"></a>8、删除数组中的第一个元素</h4><p><img src="https://s1.ax1x.com/2020/10/16/0HK5uj.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr.slice(<span class="number">0</span>);</span><br><span class="line">  resArr.shift()</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="9、合并数组"><a href="#9、合并数组" class="headerlink" title="9、合并数组"></a>9、合并数组</h4><p><img src="https://s1.ax1x.com/2020/10/16/0HKW8S.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 concat</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr1.concat(arr2)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 ...扩展运算符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = [...arr1, ...arr2];</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 slice + push.apply()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr1.slice(<span class="number">0</span>);</span><br><span class="line">  [].push.apply(resArr, arr2);</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="10、添加元素-指定位置添加"><a href="#10、添加元素-指定位置添加" class="headerlink" title="10、添加元素(指定位置添加)"></a>10、添加元素(指定位置添加)</h4><p><img src="https://s1.ax1x.com/2020/10/16/0HKfgg.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 先复制前0～index个元素，将item元素插入之后，再拼接index之后的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">arr, item, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr.slice(<span class="number">0</span>, index);</span><br><span class="line">  resArr.push(item)</span><br><span class="line">  resArr = resArr.concat(arr.slice(index))</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 使用splice方法插入(效率更高)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">arr, item, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = arr.slice(<span class="number">0</span>);</span><br><span class="line">  resArr.splice(index, <span class="number">0</span>, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 push.apply + splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">arr, item, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  [].push.apply(resArr, arr)</span><br><span class="line">  resArr.splice(index, <span class="number">0</span>, item)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><p><img src="https://s1.ax1x.com/2020/10/16/0Hhb8I.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 普通for循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resConut = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] === item)&#123;</span><br><span class="line">      resCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 forEach</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resCount = <span class="number">0</span>;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v == item)&#123;</span><br><span class="line">      resCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 filter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v === item</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四 map(效率高于filter)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resCount = <span class="number">0</span></span><br><span class="line">  arr.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v === item)&#123;</span><br><span class="line">      resCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法五 reduce</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr, item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = arr.reduce(<span class="function">(<span class="params">init, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前值等于item，该函数值加1</span></span><br><span class="line">    <span class="keyword">return</span> curr === item ? init + <span class="number">1</span> : init</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查找重复元素"><a href="#查找重复元素" class="headerlink" title="查找重复元素"></a>查找重复元素</h4><p><img src="https://s1.ax1x.com/2020/10/16/0HhvqS.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 for/for in/ + sort先进行排序，然后判断排序的前一个数据是否等于后一个数据，如果是且结果数组没有这个元素</span></span><br><span class="line"><span class="comment">//for 运行时间：1596ms 占用内存：77772k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  arr.sort()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] == arr[i - <span class="number">1</span>] &amp;&amp; resArr.indexof(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">      resArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for in  运行时间：1132ms占用内存：77868k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> resArr = []</span><br><span class="line"> arr.sort()</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr[i] == arr[i - <span class="number">1</span>] &amp;&amp; resArr.indexof(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">     resArr.push(arr[i])</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 forEach利用索引判断是否重复(使用两次)</span></span><br><span class="line"><span class="comment">// 运行时间：1184ms 占用内存：77772k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断原数组是否有重复数据</span></span><br><span class="line">    <span class="comment">// 判断结果数组是否已经具有该数据</span></span><br><span class="line">    <span class="keyword">if</span>(arr.indexof(v) != arr.lastIndexof(v) &amp;&amp; resArr.indexof(v) == -<span class="number">1</span>)&#123;</span><br><span class="line">      resArr.push(v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 reduce先判断数组中元素出现的次数，如果大于1并且结果数组之前无此元素，则将这个元素放在结果数组中</span></span><br><span class="line"><span class="comment">// 运行时间：1129ms 占用内存：77776k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = []</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    b[i] = arr.reduce(<span class="function">(<span class="params">init, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//如果当前置等于item，该函数值加一</span></span><br><span class="line">      <span class="keyword">return</span> curr === arr[i] ? init + <span class="number">1</span> : init;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(b[i] &gt; <span class="number">1</span> &amp;&amp; resArr.indexof(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">      resArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="13、求二次方"><a href="#13、求二次方" class="headerlink" title="13、求二次方"></a>13、求二次方</h4><p><a href="https://imgchr.com/i/0H4SaQ"><img src="https://s1.ax1x.com/2020/10/16/0H4SaQ.jpg" alt="0H4SaQ.jpg"></a><br><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" >为什么用for … in?<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for/forEach/map</span></span><br><span class="line"><span class="comment">// 运行时间：1466ms 占用内存：77772k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    res.push(arr[i]*arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 运行时间：1130ms 占用内存：77772k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    resArr.push(e*e)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时间：1433ms 占用内存：78004k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//let resArr = arr.slice(0);</span></span><br><span class="line">    <span class="keyword">let</span> resArr = arr.map(<span class="function">(<span class="params">e,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e*e;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="14、查找元素位置"><a href="#14、查找元素位置" class="headerlink" title="14、查找元素位置"></a>14、查找元素位置</h4><p><a href="https://imgchr.com/i/0Hhjr8"><img src="https://s1.ax1x.com/2020/10/16/0Hhjr8.png" alt="0Hhjr8.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一  for</span></span><br><span class="line"><span class="comment">//运行时间：1139ms 占用内存：77772k</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAllOccurrences</span>(<span class="params">arr, target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] === target)&#123;</span><br><span class="line">      resArr.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 forEach</span></span><br><span class="line"><span class="comment">// 运行时间：1135ms 占用内存：77776k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAllOccurrences</span>(<span class="params">arr, target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resArr = []</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">v, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v === target)&#123;</span><br><span class="line">      resArr.push(index)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="15、避免全局变量"><a href="#15、避免全局变量" class="headerlink" title="15、避免全局变量"></a>15、避免全局变量</h4><p><a href="https://imgchr.com/i/0HhT5d"><img src="https://s1.ax1x.com/2020/10/16/0HhT5d.jpg" alt="0HhT5d.jpg"></a></p>
<p>原代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globals</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myObject = &#123;</span><br><span class="line">      name : <span class="string">&#x27;Jory&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修复：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globals</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> myObject = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Jory&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="16、正确的函数定义"><a href="#16、正确的函数定义" class="headerlink" title="16、正确的函数定义"></a>16、正确的函数定义</h4><p><a href="https://imgchr.com/i/0HhzVg"><img src="https://s1.ax1x.com/2020/10/16/0HhzVg.png" alt="0HhzVg.png"></a></p>
<p>原代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functions</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;b&#x27;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修复：else中的语句相当于将if中的function重写，因此无论flag为何值，返回的方法始终为重写后的方法。将方法赋值给一个变量，方法就不会被重写，因此才能得到正确的结果。并且只能用var声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functions</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="keyword">var</span> getValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> getValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;b&#x27;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="17、正确的使用-parseInt"><a href="#17、正确的使用-parseInt" class="headerlink" title="17、正确的使用 parseInt"></a>17、正确的使用 parseInt</h4><p><a href="https://imgchr.com/i/0HhLxP"><img src="https://s1.ax1x.com/2020/10/16/0HhLxP.jpg" alt="0HhLxP.jpg"></a></p>
<p>原代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse2Int</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修复：parseInt(string, radix) 函数可解析一个字符串，并返回一个整数。参数 radix 表示要解析的数字的基数。该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，parseInt() 会根据 string 来判断数字的基数。举例，如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。而本题则是要求解析为十进制的整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse2Int</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(num,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>1.只有字符串中的第一个数字会被返回。<br>2.如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。<br>3.如果参数 radix 小于 2 或者大于 36，则 parseInt() 将返回 NaN。</p>
<h4 id="18、完全等同"><a href="#18、完全等同" class="headerlink" title="18、完全等同"></a>18、完全等同</h4><p><a href="https://imgchr.com/i/0HhXKf"><img src="https://s1.ax1x.com/2020/10/16/0HhXKf.jpg" alt="0HhXKf.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">val1, val2</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(val1 === val2)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="19、计时器"><a href="#19、计时器" class="headerlink" title="19、计时器"></a>19、计时器</h4><p><a href="https://imgchr.com/i/0Hhq2t"><img src="https://s1.ax1x.com/2020/10/16/0Hhq2t.jpg" alt="0Hhq2t.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">start, end</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//立即输出第一个值</span></span><br><span class="line">  <span class="built_in">console</span>.log(start++)</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt;= end)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(start++);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">  <span class="comment">// 返回一个对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    cancel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>setInterval(code,millisec) 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。code 是要调用的函数或要执行的代码串，millisec 是周期性执行或调用 code 之间的时间间隔，以毫秒计。setInterval() 方法会不停地调用 code 函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。clearInterval() 方法可取消由 setInterval() 设置的 timeout，其中的参数必须是由 setInterval() 返回的 ID 值。</p>
</blockquote>
<h4 id="20、流程控制"><a href="#20、流程控制" class="headerlink" title="20、流程控制"></a>20、流程控制</h4><p><a href="https://imgchr.com/i/0HhHPA"><img src="https://s1.ax1x.com/2020/10/16/0HhHPA.jpg" alt="0HhHPA.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fizzBuzz</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num%<span class="number">3</span> == <span class="number">0</span> &amp;&amp; num%<span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;fizzbuzz&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;fizz&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num%<span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;buzz&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="literal">null</span> || <span class="keyword">typeof</span> num != <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="21、函数传参"><a href="#21、函数传参" class="headerlink" title="21、函数传参"></a>21、函数传参</h4><p><a href="https://imgchr.com/i/BS4op6"><img src="https://s1.ax1x.com/2020/10/20/BS4op6.png" alt="BS4op6.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 apply/call</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(fn, arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.call(fn, arr[<span class="number">0</span>],arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.call(<span class="built_in">this</span>, arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 使用扩展运算符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(...arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>function.apply(newObj[, argsArray]) </code>方法修改指定函数的调用对象。function是调用对象将被修改的函数，newObj是函数的新调用对象，argsArray是传递给function函数的参数，数组或者arguments对象。</p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" >apply<i class="fas fa-external-link-alt"></i></a> 方法是将传递给函数的参数放入一个数组中，传入参数数组即可。</p>
<p>function.call(newObj[, arg1[, arg2[, [,…argN]]]]) 方法的作用和 apply() 方法类似，只有一个区别，就是 call() 方法接受的是若干个参数的列表，而 apply() 方法接受的是一个包含多个参数的数组。</p>
<h4 id="22、函数上下文"><a href="#22、函数上下文" class="headerlink" title="22、函数上下文"></a>22、函数上下文</h4><p><a href="https://imgchr.com/i/BS4qne"><img src="https://s1.ax1x.com/2020/10/20/BS4qne.jpg" alt="BS4qne.jpg"></a></p>
<p>考察改变this的指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">fn, obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">fn, obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.call(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">fn, obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.bind(obj)()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="23、返回函数"><a href="#23、返回函数" class="headerlink" title="23、返回函数"></a>23、返回函数</h4><p><a href="https://imgchr.com/i/BS4T1K"><img src="https://s1.ax1x.com/2020/10/20/BS4T1K.jpg" alt="BS4T1K.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionFunction</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str +<span class="string">&#x27;,&#x27;</span>+ obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="24、使用闭包"><a href="#24、使用闭包" class="headerlink" title="24、使用闭包"></a>24、使用闭包</h4><p><a href="https://imgchr.com/i/BS4L0H"><img src="https://s1.ax1x.com/2020/10/20/BS4L0H.png" alt="BS4L0H.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClosure</span>(<span class="params">arr, fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    result.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn(i)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="25、二次封装函数"><a href="#25、二次封装函数" class="headerlink" title="25、二次封装函数"></a>25、二次封装函数</h4><p><a href="https://imgchr.com/i/BS4R0J"><img src="https://s1.ax1x.com/2020/10/20/BS4R0J.png" alt="BS4R0J.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">fn, str1, str2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> result = <span class="function"><span class="keyword">function</span>(<span class="params">str3</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(str1, str2, str3)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="26、使用arguments"><a href="#26、使用arguments" class="headerlink" title="26、使用arguments"></a>26、使用arguments</h4><p><a href="https://imgchr.com/i/BS4ylT"><img src="https://s1.ax1x.com/2020/10/20/BS4ylT.jpg" alt="BS4ylT.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 eval</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useArguments</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.call(<span class="built_in">arguments</span>) <span class="comment">//把arguments类数组转化为数组</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(arr.join(<span class="string">&#x27;+&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：reduce+call组合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useArguments</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">Array</span>.prototype.reduce.call(<span class="built_in">arguments</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="27、使用-apply-调用函数"><a href="#27、使用-apply-调用函数" class="headerlink" title="27、使用 apply 调用函数"></a>27、使用 apply 调用函数</h4><p><a href="https://imgchr.com/i/BleNcQ"><img src="https://s1.ax1x.com/2020/10/27/BleNcQ.png" alt="BleNcQ.png"></a></p>
<p>同21题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://blog.csdn.net/weixin_44046951/article/details/105383536" >[].slice.call(arguments, 1)<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="28、二次封装函数"><a href="#28、二次封装函数" class="headerlink" title="28、二次封装函数"></a>28、二次封装函数</h4><p><a href="https://imgchr.com/i/BS42m4"><img src="https://s1.ax1x.com/2020/10/20/BS42m4.jpg" alt="BS42m4.jpg"></a></p>
<p>与25题的要求区别: 入门级别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialUsingArguments</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//先获取p函数第一个参数之后的全部参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//声明result函数</span></span><br><span class="line">  <span class="keyword">return</span> result = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//使用concat合并两个或多个数组中的元素</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, args.concat([].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="29、柯里化"><a href="#29、柯里化" class="headerlink" title="29、柯里化"></a>29、柯里化</h4><p><a href="https://imgchr.com/i/BS466U"><img src="https://s1.ax1x.com/2020/10/20/BS466U.jpg" alt="BS466U.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curryIt</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> result = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    args.push(arg);</span><br><span class="line">    <span class="keyword">if</span>(args.length &lt; fn.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="30、或运算"><a href="#30、或运算" class="headerlink" title="30、或运算"></a>30、或运算</h4><p><a href="https://imgchr.com/i/BS44t1"><img src="https://s1.ax1x.com/2020/10/20/BS44t1.jpg" alt="BS44t1.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">or</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a || b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="31、且运算"><a href="#31、且运算" class="headerlink" title="31、且运算"></a>31、且运算</h4><p><a href="https://imgchr.com/i/B8ykDS"><img src="https://s1.ax1x.com/2020/10/29/B8ykDS.jpg" alt="B8ykDS.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">and</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  (a &amp;&amp; b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="32、模块"><a href="#32、模块" class="headerlink" title="32、模块"></a>32、模块</h4><p><a href="https://imgchr.com/i/BS4cXF"><img src="https://s1.ax1x.com/2020/10/20/BS4cXF.png" alt="BS4cXF.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createModule</span>(<span class="params">str1, str2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    greeting: str1,</span><br><span class="line">    name: str2,</span><br><span class="line">    sayIt: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> obj.greeting + <span class="string">&#x27;&#x27;</span> + obj.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="33、二进制转换-十进制转二进制"><a href="#33、二进制转换-十进制转二进制" class="headerlink" title="33、二进制转换(十进制转二进制)"></a>33、二进制转换(十进制转二进制)</h4><p><a href="https://imgchr.com/i/BS4O7d"><img src="https://s1.ax1x.com/2020/10/20/BS4O7d.png" alt="BS4O7d.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">valueAtBit</span>(<span class="params">num, bit</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = num.toString(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> res[res.length - bit]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NumberObject.toString(radix) </code>可以把一个Number对象转换为一个字符串，并返回数字的字符串表示。radix 表示数字的基数，为 2 ~ 36 之间的整数。若省略该参数，则默认使用基数 10。例如，当 radix 为 2 时，NumberObject 会被转换为二进制值表示的字符串。</p>
<blockquote>
<p>当调用该方法的对象不是 Number 时抛出 TypeError 异常。</p>
</blockquote>
<p>通过num.toString(2)能直接将num转换为2进制数格式的字符串，利用下标就能将对应值取出来。题目返回的数字是从右往左，因此下标为倒数。</p>
<h4 id="34、二进制转换-二进制转十进制"><a href="#34、二进制转换-二进制转十进制" class="headerlink" title="34、二进制转换(二进制转十进制)"></a>34、二进制转换(二进制转十进制)</h4><p><a href="https://imgchr.com/i/BS4hkR"><img src="https://s1.ax1x.com/2020/10/20/BS4hkR.jpg" alt="BS4hkR.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base10</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="35、二进制转换-十进制转8位二进制"><a href="#35、二进制转换-十进制转8位二进制" class="headerlink" title="35、二进制转换(十进制转8位二进制)"></a>35、二进制转换(十进制转8位二进制)</h4><p><a href="https://imgchr.com/i/BS4HXD"><img src="https://s1.ax1x.com/2020/10/20/BS4HXD.jpg" alt="BS4HXD.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToBinary</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = num.toString(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">while</span>(res.length &lt; <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> + res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="36、乘法"><a href="#36、乘法" class="headerlink" title="36、乘法"></a>36、乘法</h4><p><a href="https://imgchr.com/i/B86oy6"><img src="https://s1.ax1x.com/2020/10/29/B86oy6.png" alt="B86oy6.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 先将数字转换为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str1 = a.toString();</span><br><span class="line">  <span class="keyword">let</span> str2 = b.toString();</span><br><span class="line">  <span class="comment">// 获取两个数的小数位数</span></span><br><span class="line">  <span class="keyword">let</span> lenA = (str1.indexOf(<span class="string">&#x27;.&#x27;</span>) == -<span class="number">1</span>) ? <span class="number">0</span> : (str1.length - str1.indexOf(<span class="string">&#x27;.&#x27;</span>) - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> lenB = (str2.indexOf(<span class="string">&#x27;.&#x27;</span>) == -<span class="number">1</span>) ? <span class="number">0</span> : (str2.length - str2.indexOf(<span class="string">&#x27;.&#x27;</span>) - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 比较两数的精度/位数，精度大的作为结果数精度</span></span><br><span class="line">  <span class="keyword">let</span> len = <span class="built_in">Math</span>.max(lenA,lenB);</span><br><span class="line">  <span class="comment">// 运算结果</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">parseFloat</span>(a*b).toFixed(len)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>toFixed(num):<code>toFixed()</code> 方法可把 Number 四舍五入为指定小数位数的数字; 参数num: 代表小数位数；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5.56789</span>; num.toFixed(<span class="number">2</span>); ==&gt;<span class="number">5.57</span></span><br></pre></td></tr></table></figure>
<ul>
<li>parseFloat(string): <code>parseFloat()</code>函数可解析一个字符串，并返回一个浮点数；参数 string 可为数字可为字符串，当参数为字符串时，判断个字符是否是数字，如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，如果不是，返回NAN；</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">parseFloat(<span class="string">&quot;43ar4s2&quot;</span>)；==&gt;43   </span><br><span class="line">parseFloat(<span class="string">&quot;qwar4s2&quot;</span>)；==&gt;NAN</span><br></pre></td></tr></table></figure>
<h4 id="37、改变上下文"><a href="#37、改变上下文" class="headerlink" title="37、改变上下文"></a>37、改变上下文</h4><p><a href="https://imgchr.com/i/B86WFJ"><img src="https://s1.ax1x.com/2020/10/29/B86WFJ.jpg" alt="B86WFJ.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alterContext</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//return fn.call(obj);</span></span><br><span class="line">    <span class="comment">//return fn.apply(obj);</span></span><br><span class="line">    <span class="keyword">return</span> fn.bind(obj)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="38、批量改变对象的属性"><a href="#38、批量改变对象的属性" class="headerlink" title="38、批量改变对象的属性"></a>38、批量改变对象的属性</h4><p><a href="https://imgchr.com/i/B86TOK"><img src="https://s1.ax1x.com/2020/10/29/B86TOK.png" alt="B86TOK.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alterObjects</span>(<span class="params">constructor, greeting</span>) </span>&#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">greeting</span> = <span class="title">greeting</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>prototype 属性可以向对象添加属性和方法。这是原型链的知识：当查找一个对象的方法或者是属性时，首先会在该对象中寻找，如果找到则返回如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象Object.prototype，如还是没找到，则返回undefined。<br>将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量，只需要在constructor的原型上面添加greeting属性，并指定值。</p>
<h4 id="39、属性遍历"><a href="#39、属性遍历" class="headerlink" title="39、属性遍历"></a>39、属性遍历</h4><p><a href="https://imgchr.com/i/B86bwD"><img src="https://s1.ax1x.com/2020/10/29/B86bwD.png" alt="B86bwD.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行时间：1148ms 占用内存：77864k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">      result.push(key + <span class="string">&#x27;:&#x27;</span>+<span class="string">&#x27;&#x27;</span>obj[key]);<span class="comment">//使用obj.key部分代码不能通过</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有继承了 Object 的对象都会继承到 <code>hasOwnProperty()</code> 方法。<code>obj.hasOwnProperty(prop)</code>方法会返回一个布尔值，指示对象 obj 自身属性中是否具有指定的属性 prop 。这个方法可以用来检测一个对象是否含有特定的自身属性，并忽略掉那些从原型链上继承到的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法二 map</span></span><br><span class="line"><span class="comment">//运行时间：1133ms 占用内存：77828k</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyNames(obj).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key +<span class="string">&quot;:&quot;</span>+obj[key]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Object.getOwnPropertyNames()</code>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" >Object.getOwnPropertyNames()<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法三 forEach</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="keyword">let</span> resArr = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    resArr.push(item + <span class="string">&quot;:&quot;</span> +obj[item])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后5题大部分可以用正则表达式实现，关于正则表达式可以看看 正则表达式不要背</p>
</blockquote>
<h4 id="40、判断是否包含数字"><a href="#40、判断是否包含数字" class="headerlink" title="40、判断是否包含数字"></a>40、判断是否包含数字</h4><p><a href="https://imgchr.com/i/B86fY9"><img src="https://s1.ax1x.com/2020/10/29/B86fY9.png" alt="B86fY9.png"></a></p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" >String.prototype.charCodeAt()<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 正则test/match</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsNumber</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// return /\d/.test(str)</span></span><br><span class="line">  <span class="keyword">return</span> !!str.match(<span class="regexp">/\d/g</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsNumber</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.indexOf(i) != -<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：for循环 + charCodeAt()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsNumber</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = str.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = res[i].charCodeAt();</span><br><span class="line">    <span class="keyword">if</span>(temp &gt;= <span class="number">48</span> &amp;&amp; temp &lt;= <span class="number">57</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四：for循环+Number()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsNumber</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = str.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">Number</span>(res[i])</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="41、检查重复字符串"><a href="#41、检查重复字符串" class="headerlink" title="41、检查重复字符串"></a>41、检查重复字符串</h4><p><a href="https://imgchr.com/i/B86hWR"><img src="https://s1.ax1x.com/2020/10/29/B86hWR.png" alt="B86hWR.png"></a></p>
<p>(String.prototype.charAt())[<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt]" >https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt]<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsRepeatingLetter</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/([a-zA-Z])\1/</span>.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在正则表达式中，利用()进行分组，使用斜杠加数字表示引用，\1就是引用第一个分组，\2就是引用第二个分组。将[a-zA-Z]做为一个分组，然后引用，就可以判断是否有连续重复的字母。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsRepeatingLetter</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/[a-zA-Z]/</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(i) == str.charAt(i+<span class="number">1</span>) &amp;&amp; reg.test(str[i]))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="42、判断是否以元音字母结尾"><a href="#42、判断是否以元音字母结尾" class="headerlink" title="42、判断是否以元音字母结尾"></a>42、判断是否以元音字母结尾</h4><p><a href="https://imgchr.com/i/B865S1"><img src="https://s1.ax1x.com/2020/10/29/B865S1.png" alt="B865S1.png"></a></p>
<p>首先确定元音集合<code>[a,e,i,o,u]</code>，然后是以元音结尾，加上 $ ，最后通配大小写，加上i。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">endsWithVowel</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/[a,e,i,o,u]$/i</span>.test(str);</span><br><span class="line">  <span class="comment">// return /(a|o|e|i|u)$/gi.test(str)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="43、获取指定字符串"><a href="#43、获取指定字符串" class="headerlink" title="43、获取指定字符串"></a>43、获取指定字符串</h4><p><a href="https://imgchr.com/i/B86IQx"><img src="https://s1.ax1x.com/2020/10/29/B86IQx.png" alt="B86IQx.png"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">captureThreeNumbers</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明一个数组保存匹配的字符串结果</span></span><br><span class="line">  <span class="keyword">let</span> arr = str.match(<span class="regexp">/\d&#123;3&#125;/</span>)</span><br><span class="line">  <span class="comment">// 如果arr存在目标结果，则返回第一个元素，即最早出现的目标结果</span></span><br><span class="line">  <span class="keyword">if</span>(arr)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="44、判断是否符合指定格式"><a href="#44、判断是否符合指定格式" class="headerlink" title="44、判断是否符合指定格式"></a>44、判断是否符合指定格式</h4><p><a href="https://imgchr.com/i/B862o4"><img src="https://s1.ax1x.com/2020/10/29/B862o4.jpg" alt="B862o4.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchesPattern</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;/</span>.test(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">本题需要注意格式，开头 ^ 和结尾 $ 必须加上来限定字符串，<span class="number">3</span>个数可表示为\d&#123;<span class="number">3</span>&#125;，<span class="number">4</span>个数则为\d&#123;<span class="number">4</span>&#125;，&#123;n&#125;表示前面内容出现的次数。正则表达式可写作 /^ \d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">4</span>&#125;$ / ，有相同部分\d&#123;<span class="number">3</span>&#125;-，因此也可写作 /^(\d&#123;<span class="number">3</span>&#125;-)&#123;<span class="number">2</span>&#125;\d&#123;<span class="number">4</span>&#125;$/。</span><br></pre></td></tr></table></figure>
<h4 id="45、判断是否符合-USD-格式"><a href="#45、判断是否符合-USD-格式" class="headerlink" title="45、判断是否符合 USD 格式"></a>45、判断是否符合 USD 格式</h4><p><a href="https://imgchr.com/i/B86HeO"><img src="https://s1.ax1x.com/2020/10/29/B86HeO.jpg" alt="B86HeO.jpg"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUSD</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^\$\d&#123;1,3&#125;(,\d&#123;3&#125;)*(\.\d&#123;2&#125;)?$/</span>.test(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">? 匹配前面一个表达式<span class="number">0</span>次或者<span class="number">1</span>次。等价于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line">例如，/e?le?/ 匹配 <span class="string">&#x27;angel&#x27;</span> 中的 <span class="string">&#x27;el&#x27;</span>，和 <span class="string">&#x27;angle&#x27;</span> 中的 <span class="string">&#x27;le&#x27;</span> </span><br><span class="line">(注意第二个 ? 前面的匹配表达式是 e 而不是 le) 以及 <span class="string">&#x27;oslo&#x27;</span> 中的<span class="string">&#x27;l&#x27;</span>。</span><br><span class="line"></span><br><span class="line">如果紧跟在任何量词 *、 +、? 或 &#123;&#125; 的后面，将会使量词变为非贪婪的（匹配尽量少的字符），和缺省</span><br><span class="line">使用的贪婪模式（匹配尽可能多的字符）正好相反。</span><br><span class="line">例如，对 <span class="string">&quot;123abc&quot;</span> 应用 /\d+<span class="regexp">/ 将会返回 &quot;123&quot;，如果使用 /</span>\d+?/,那么就只会匹配到 <span class="string">&quot;1&quot;</span>。</span><br><span class="line">还可以运用于向前断言 正向肯定查找x(?=y) 和 正向否定查找x(?!y) 。</span><br><span class="line"></span><br><span class="line">* 匹配前一个表达式<span class="number">0</span>次或多次。等价于 &#123;<span class="number">0</span>,&#125;。</span><br><span class="line">例如，/bo*/会匹配 <span class="string">&quot;A ghost boooooed&quot;</span> 中的 <span class="string">&#x27;booooo&#x27;</span> 和 <span class="string">&quot;A bird warbled&quot;</span> 中的 <span class="string">&#x27;b&#x27;</span>, </span><br><span class="line">但是在 <span class="string">&quot;A goat grunted&quot;</span> 中将不会匹配任何东西。</span><br><span class="line"></span><br><span class="line">. (小数点)匹配  除了换行符（\n）之外的任何单个字符。</span><br><span class="line">例如, <span class="regexp">/.n/</span>将会匹配<span class="string">&quot;nay, an apple is on the tree&quot;</span>中的<span class="string">&#x27;an&#x27;</span>和<span class="string">&#x27;on&#x27;</span>, 但是不会匹配 <span class="string">&#x27;nay&#x27;</span>。</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础(初级)</title>
    <url>/2020/09/29/JS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="一、手写冒泡排序"><a href="#一、手写冒泡排序" class="headerlink" title="一、手写冒泡排序"></a>一、手写冒泡排序</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>];</span><br><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">let</span> temp;</span><br><span class="line">        temp = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">let</span> temp;</span><br><span class="line">        temp = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二、快速排序："><a href="#二、快速排序：" class="headerlink" title="二、快速排序："></a>二、快速排序：</h4><p>利用二分法和递归实现快速排序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length == <span class="number">0</span>) <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用Math.floor()方法向下取整找到中间位置</span></span><br><span class="line">  <span class="keyword">let</span> Index = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">//再用splice()方法将数组中间位置的元素取出来</span></span><br><span class="line">  <span class="keyword">let</span> c = arr.splice(Index, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> l = [];</span><br><span class="line">  <span class="keyword">let</span> r = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; c)&#123;</span><br><span class="line">      l.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从左至右，从小到大</span></span><br><span class="line">  <span class="keyword">return</span> quickSort(l).concat(c, quickSort(r));</span><br><span class="line">  <span class="comment">// 从左至右，从大到小</span></span><br><span class="line">  <span class="keyword">return</span> quickSort(r).concat(c, quickSort(l));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="三、-按照数组中的对象属性进行比较排序"><a href="#三、-按照数组中的对象属性进行比较排序" class="headerlink" title="三、 按照数组中的对象属性进行比较排序"></a>三、 按照数组中的对象属性进行比较排序</h4><h4 id="四、事件帧听器"><a href="#四、事件帧听器" class="headerlink" title="四、事件帧听器"></a>四、事件帧听器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    addEvent:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.addEventListener)&#123;</span><br><span class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">            element.attachEvent(<span class="string">&quot;on&quot;</span> + type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeEvent:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.removeEventListener)&#123;</span><br><span class="line">            element.removeEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</span><br><span class="line">            element.detachEvent(<span class="string">&quot;on&quot;</span> + type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getEvent:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event ? event: <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;,</span><br><span class="line">    getTarget:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(event.preventDefault)&#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(event.stopPropagation)&#123;</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            event.cancelBubble();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    event = EventUtil.getEvent();</span><br><span class="line">    EventUtil.preventDefault();</span><br><span class="line">    alert(<span class="string">&quot;Clicked&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">EventUtil.addEvent(btn,click,handler);</span><br></pre></td></tr></table></figure>
<h4 id="五、数据类型"><a href="#五、数据类型" class="headerlink" title="五、数据类型"></a>五、数据类型</h4><p>1、基本数据类型：<br>undefined、Null、String、Boolean、Number</p>
<p>2、数据封装对象：Object、Array、Boolean、Number、String<br>3、其他对象：Math、Date、Function、Error、RegExp、Arguments</p>
<h4 id="六、闭包"><a href="#六、闭包" class="headerlink" title="六、闭包"></a>六、闭包</h4><p>1、定义：指有权访问另一个函数作用域中变量的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">childFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childFunc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、闭包的特征：<br>&lt;1&gt;函数内再嵌套函数；<br>&lt;2&gt;内部函数可以调用外部函数的参数和变量；<br>&lt;3&gt;参数和变量不会被垃圾回收机制回收。</p>
<p>闭包的好处：能够实现封装和缓存。使用闭包主要是为了封装对象的私有属性和私有方法，闭包可以避免全局变量的污染。</p>
<p>闭包的缺点：闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄漏。</p>
<p>闭包经典问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(parentFunc()[<span class="number">0</span>]());  <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(parentFunc()[<span class="number">1</span>]());  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>这里就展现出了几个关键信息，首先分析一下代码：循环中创建了一个匿名函数并将其赋值给arr数组中对应索引的元素，匿名函数作用是返回i值。此时，arr数组中存放的是匿名函数，而匿名函数还没有执行。当调用parentFunc()函数时返回arr数组，再单独执行数组中的元素保存的匿名函数，此时循环已经执行完，所以i值为5。接下来再去调用其它数组元素中的匿名函数也样会获得数值5。<br>要解决这个闭包所产生的问题，有两种办法：<br>&lt;1&gt;立即执行匿名函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        arr[i] = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(parentFunc());  <span class="comment">//[0,1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p>&lt;2&gt;使用let关键字声明变量:使用let声明变量会形成块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(parentFunc()[<span class="number">0</span>]());  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>
<h3 id="七、作用域、原型、原型链、继承"><a href="#七、作用域、原型、原型链、继承" class="headerlink" title="七、作用域、原型、原型链、继承"></a>七、作用域、原型、原型链、继承</h3><p>1、JS作用域：分为全局作用域和函数作用域<br>全局作用域，代码在程序中的任何地方都能访问，window对象的内置属性都拥有全局作用域；<br>函数作用域，在固定的代码片段才能访问。</p>
<p>2、作用域链：作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p>
<p>3、原型和原型链：<br>每个对象都会在其内部初始化一个属性-prototype（原型）。当我们访问一个对象的属性时，如果这个对象的内部不存在这个属性，就会去prototype中查找这个属性，这个prototype又会有自己的prototype，于是就会像链条一样一直找下去形成原型链。<br>（因为所有的对象都是由Object对象继承而来，因此最终查找到Object的prototype结束）</p>
<p>4、继承：实现继承的常用方法是原型链+借用构造函数。<br>原型链实现对原型属性和方法的继承，借用构造函数实现对实例属性的继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承属性</span></span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> SubType(<span class="string">&quot;老王&quot;</span>, <span class="number">70</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> SubType(<span class="string">&quot;小王&quot;</span>, <span class="number">20</span>);</span><br><span class="line">p1.sayName(); <span class="comment">//老王</span></span><br><span class="line">p2.sayName(); <span class="comment">//小王</span></span><br><span class="line">p1.sayAge();  <span class="comment">//70</span></span><br><span class="line">p2.sayAge();  <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<h4 id="八、组件化、模块化"><a href="#八、组件化、模块化" class="headerlink" title="八、组件化、模块化"></a>八、组件化、模块化</h4><p>1、组件化：利用组件化思想将多个页面都需要用的功能组件封装起来，提高代码复用性，降低耦合性，增强可维护性和可读性。</p>
<p>2、模块化：主要用途是封装对象<br>模块化的优点：避免全局变量污染，命名冲突；提高代码复用率；提高了可维护性。<br>最常用的模块化封装对象的方法是：构造函数模式+原型模式。<br>构造函数内写属性，原型中放方法和重写构造函数指针。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">    <span class="title">sayName</span>: <span class="title">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;老王&quot;</span>, <span class="number">70</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;小王&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">alert(person1.name === person2.name);    <span class="comment">//false,构造函数内属性不公用</span></span><br><span class="line">alert(person1.sayName === person2.sayName);  <span class="comment">//true,原型中的方法共用</span></span><br></pre></td></tr></table></figure>
<p>组合使用构造函数模式和原型模式封装对象的好处在于，每个新建的实例都拥有自己的属性，然后共同享有原型中的方法，不用每次创建新实例都重新创建同样的方法。</p>
<h4 id="九、ajax"><a href="#九、ajax" class="headerlink" title="九、ajax"></a>九、ajax</h4><p>&lt;1&gt;如何创建一个ajax</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get方法</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;example.php&quot;</span>,<span class="literal">true</span>);  <span class="comment">//发送的请求类型、请求的URL、是否异步发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">            success(xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//post方法</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms[<span class="number">0</span>]);</span><br><span class="line">xhr.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;example.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt;同步和异步的区别：<br>同步：用户请求，等待，响应，刷新页面展示内容再操作；<br>异步：用户请求的同时可继续对页面操作，响应完成不刷新页面展示新内容。<br>&lt;3&gt;<br>Ajax优点：<br>异步请求响应快，用户体验好；页面无刷新、数据局部更新；按需取数据，减少了冗余请求和服务器的负担；<br>Ajax缺点：<br>异步回调问题、this指向问题、路由跳转back问题；对搜索引擎的支持比较弱，对于一些手机还不是很好的支持<br>&lt;4&gt;post一般用于修改服务器上的资源，对发送的数据没有限制；而get一般用于请求获取数据。</p>
<h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><p>1、事件代理：<br>事件代理又称之为事件委托，是绑定事件的常用技巧。即把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。<br>事件代理的原理是DOM元素的事件冒泡。<br>使用事件代理的好处是可以提高性能，节省内存占用，减少事件注册。可以实现当新增子对象时无需再对其绑定。<br>比如在table上代理td的click事件。</p>
<p>2、this对象：<br>·this总是指向函数的直接调用者（而非间接调用者）；<br>·如果有new关键字，this指向new出来的新对象<br>·在事件中，this指向触发这个事件的对象，但IE中的attachEvent中的this指向window对象。</p>
<p>3、事件模型：<br>·冒泡型事件：当你使用事件冒泡时，子元素先触发，父元素后触发；<br>·捕获型事件：当你使用事件捕获时，父元素先触发，子元素后触发；<br>·DOM事件流：同时支持两种事件模型，冒泡型事件和捕获型事件；<br>·阻止冒泡：阻止事件冒泡。在w3c中使用stopPropagation()方法，在IE中使用cancelBubble = true；<br>·阻止捕获：阻止事件的默认行为。在w3c中使用preventDefault()方法，在IE中使用returnValue = false。</p>
<p>4、XML和JSON的区别：<br>·JSON相对XML，数据体积更小，传递速度更快些；<br>·JSON与JS的交互更方便，更容易解析处理，更好的数据交互；<br>·JSON对数据的描述性比XML较差；<br>·JSON的传输速度远远快于XML。</p>
<p>5、eval()的作用：<br>把对应的字符串解析成可执行的JS代码并运行；<br>应该避免使用eval()，不安全且非常耗性能。</p>
<p>6、Null和Undefined的区别：<br>undefined表示声明的变量未赋值，而null表示声明变量的值为空值；<br>两者相比较时要使用===，因为==无法区分。</p>
<p>7、[“1”, “2”, “3”].map(parseInt) 答案是多少？<br>[1,NaN.NaN]。因为parseInt的参数时(val,radix)，radix表示基数（多少进制），而map的参数是(function(currentValue,index,arr),thisIndex)。所以map传了三个参数给parseInt，radix对应index不合法导致解析失败。<br><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" >详细参考的使用技巧案例<i class="fas fa-external-link-alt"></i></a><br>8、JSON与字符串的转换：</p>
<ul>
<li>字符串转换为JSON</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + str + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = str.parseJSON();</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str);  <span class="comment">//最常用</span></span><br></pre></td></tr></table></figure>
<ul>
<li>JSON转换为字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = obj.toJSONString();</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</span><br></pre></td></tr></table></figure>
<p>9、attribute和property的区别：<br>attribute是DOM元素再文档中作为html标签拥有的属性；<br>property是DOM元素再JS中作为对象所拥有的属性；</p>
<p>10、如何判断一个对象是否为数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">&#x27;[Object Array]&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10、map、foreach、reduce 间的区别？</p>
<p><a class="link"   href="https://www.zhihu.com/question/24927450" >如何形象地解释 JavaScript 中 map、foreach、reduce 间的区别？<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="十一、promise"><a href="#十一、promise" class="headerlink" title="十一、promise"></a>十一、promise</h4><p>1、</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise start...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="built_in">Math</span>.random()*<span class="number">2</span>;   <span class="comment">//0-2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;set timeout to：&quot;</span> + timeout + <span class="string">&quot;seconds&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;call resolve()...&quot;</span>);</span><br><span class="line">            resolve(<span class="string">&quot;200 ok&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;call reject()...&quot;</span>);</span><br><span class="line">            reject(<span class="string">&quot;timeout in&quot;</span> + timeout + <span class="string">&quot;seconds&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,timeout * <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Done：&quot;</span> + resolve);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Failed：&quot;</span> + reject)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可见Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了。</p>
<p>2、任何任务失败则不再继续并执行错误处理函数。<br>要串行执行这样的异步任务，不需要写一层一层的嵌套代码。有了Promise，我们只需要简单地写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;计算 &#x27;</span> + input + <span class="string">&#x27; x &#x27;</span> + input + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve,<span class="number">500</span>, input * input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;计算 &#x27;</span> + input + <span class="string">&#x27; + &#x27;</span> + input + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve,<span class="number">500</span>,input + input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start ....&quot;</span>);</span><br><span class="line">    resolve(<span class="number">33</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(multi)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(multi)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;结果：&quot;</span> + result);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="十二、事件循环"><a href="#十二、事件循环" class="headerlink" title="十二、事件循环"></a>十二、事件循环</h4><ul>
<li>JS是一门单线程的非阻塞的脚本语言，单线程意味着JS在执行代码的任何时候，都只有一个主线程来处理所有任务。</li>
<li>事件循环流程图：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/10/12/0RCtbT.jpg" alt="事件循环流程图"></p>
<p>同步和异步任务分别进入不同的执行场所，同步任务进入主线程，异步任务进入Event table并注册函数；<br>当指定的事件完成时，Event table会将这个函数移入事件队列Event queue中；<br>主线程的任务执行完毕为空，会去Event queue读取对应的函数，进入主线程中执行；<br>上述的过程不断重复，也就是我们说的事件循环Event loop。</p>
<ul>
<li>举个例子说明他们的执行顺序：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);        <span class="comment">//输出结果为：1,3,2</span></span><br></pre></td></tr></table></figure>
<p>因为setTimeout是异步任务，其他两个console同步任务按顺序执行，所以setTimeout最后输出。</p>
<ul>
<li>微任务和宏任务，结合例子说明：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"> &#125;, <span class="number">1000</span>);</span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">     resolve();</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"> &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);     <span class="comment">//执行结果为1,4,5,7,6,3,2</span></span><br></pre></td></tr></table></figure>
<p>先来说明下什么是微任务和宏任务，他们都是异步的任务，且都属于队列，区别在于微任务先于宏任务执行。（有一点歧义，之后再说）</p>
<blockquote>
<p>宏任务包含有：setTimeout、setInterval、setImmediate、I/O、UI rendering;<br>微任务包含有：process.nextTick()、promise.then、MutationObserver;<br>补充一点 new promise会同步执行。</p>
</blockquote>
<p>在执行到<code>new Promise</code>的时候会立马新建一个<code>promise</code>对象并立即执行。所以会输出 <code>1,4,5,7</code>，而then则会在<code>Event Table</code>中注册成回调函数并放在微任务队列中，而两个<code>setTimeout</code>(输出3)和<code>setTimeout</code>(输出2，1s后完成)会被先后注册成回调函数并放在宏任务队列中。</p>
<ul>
<li>复杂测试题理解程度（分清宏任务和微任务，画出队列执行顺序理解）：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;                  <span class="comment">//输出结果：1,4,6,3,8,12,2,11,10,9</span></span><br></pre></td></tr></table></figure>
<p>按顺序执行，同步任务先执行，再到微任务和宏任务，其内部包含的亦是如此。</p>
<p>promise+event loop的题目(链式调用插队问题):</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;then11&quot;</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;then21&quot;</span>)</span><br><span class="line">    &#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;then23&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;then12&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise3&quot;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;then31&quot;</span>)</span><br><span class="line">&#125;)            </span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：[promise1,promise3,then11,promise2,then31,then21,then12,then23]</span></span><br></pre></td></tr></table></figure>
<p>async await + event loop + promise题目:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;settimeout&quot;</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"><span class="comment">// [script start,async1 start,async2,promise1,script end,async1 end,promise2,settimeout]</span></span><br></pre></td></tr></table></figure>
<p>async/await仅仅影响的是函数内的执行，而不会影响到函数体外的执行顺序。也就是说async1()并不会阻塞后续程序的执行，<code>await async2()</code>相当于一个Promise，<code>console.log(&quot;async1 end&quot;);</code>相当于前方Promise的then之后执行的函数。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用60余种工具方法</title>
    <url>/2020/11/04/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A860%E4%BD%99%E7%A7%8D%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="1、邮箱"><a href="#1、邮箱" class="headerlink" title="1、邮箱"></a>1、邮箱</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isEmail = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、手机号"><a href="#2、手机号" class="headerlink" title="2、手机号"></a>2、手机号</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMobile = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^1[0-9]&#123;10&#125;$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、电话号码"><a href="#3、电话号码" class="headerlink" title="3、电话号码"></a>3、电话号码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isPhone = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、是否url地址"><a href="#4、是否url地址" class="headerlink" title="4、是否url地址"></a>4、是否url地址</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isURL = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^http[s]?:\/\/.*/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、是否字符串"><a href="#5、是否字符串" class="headerlink" title="5、是否字符串"></a>5、是否字符串</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isString = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;String&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、是否数字"><a href="#6、是否数字" class="headerlink" title="6、是否数字"></a>6、是否数字</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isNumber = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Number&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7、是否boolean"><a href="#7、是否boolean" class="headerlink" title="7、是否boolean"></a>7、是否boolean</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isBoolean = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Boolean&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8、是否函数"><a href="#8、是否函数" class="headerlink" title="8、是否函数"></a>8、是否函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isFunction = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Function&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="9、是否null"><a href="#9、是否null" class="headerlink" title="9、是否null"></a>9、是否null</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isNull = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Null&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="10、是否undefined"><a href="#10、是否undefined" class="headerlink" title="10、是否undefined"></a>10、是否undefined</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isUndefined = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Undefined&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="11、是否对象"><a href="#11、是否对象" class="headerlink" title="11、是否对象"></a>11、是否对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isObj = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="12、是否数组"><a href="#12、是否数组" class="headerlink" title="12、是否数组"></a>12、是否数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isArray = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="13、是否时间"><a href="#13、是否时间" class="headerlink" title="13、是否时间"></a>13、是否时间</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDate = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Date&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="14、是否正则"><a href="#14、是否正则" class="headerlink" title="14、是否正则"></a>14、是否正则</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isRegExp = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;RegExp&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="15、是否错误对象"><a href="#15、是否错误对象" class="headerlink" title="15、是否错误对象"></a>15、是否错误对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isError = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="16、是否Symbol函数"><a href="#16、是否Symbol函数" class="headerlink" title="16、是否Symbol函数"></a>16、是否Symbol函数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isSymbol = (o) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> Object.prototype.toString.call(o).slice(8, -1) === <span class="string">&#x27;Symbol&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="17、是否Promise对象"><a href="#17、是否Promise对象" class="headerlink" title="17、是否Promise对象"></a>17、是否Promise对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isPromise = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Promise&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="18、是否Set对象"><a href="#18、是否Set对象" class="headerlink" title="18、是否Set对象"></a>18、是否Set对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isSet = <span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Set&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ua = navigator.userAgent.toLowerCase();</span><br></pre></td></tr></table></figure>
<h4 id="19、是否是微信浏览器"><a href="#19、是否是微信浏览器" class="headerlink" title="19、是否是微信浏览器"></a>19、是否是微信浏览器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isWeiXin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ua.match(<span class="regexp">/microMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="20、是否移动端"><a href="#20、是否移动端" class="headerlink" title="20、是否移动端"></a>20、是否移动端</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDeviceMobile = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/android|webos|iphone|ipod|balckberry/i</span>.test(ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="21、是否是QQ浏览器"><a href="#21、是否是QQ浏览器" class="headerlink" title="21、是否是QQ浏览器"></a>21、是否是QQ浏览器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isQQBrowser = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> !!ua.match(/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="22、是否是爬虫"><a href="#22、是否是爬虫" class="headerlink" title="22、是否是爬虫"></a>22、是否是爬虫</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isSpider = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> /adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/.<span class="built_in">test</span>(ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="23、是否iOS"><a href="#23、是否iOS" class="headerlink" title="23、是否iOS"></a>23、是否iOS</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isIos = () =&gt; &#123;</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (u.indexOf(<span class="string">&#x27;Android&#x27;</span>) &gt; -1 || u.indexOf(<span class="string">&#x27;Linux&#x27;</span>) &gt; -1) &#123;  //安卓手机</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -1) &#123;//苹果手机</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&#x27;iPad&#x27;</span>) &gt; -1) &#123;//iPad</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&#x27;Windows Phone&#x27;</span>) &gt; -1) &#123;//winphone手机</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="24、是否为PC端"><a href="#24、是否为PC端" class="headerlink" title="24、是否为PC端"></a>24、是否为PC端</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isPC = () =&gt; &#123;</span><br><span class="line">    var userAgentInfo = navigator.userAgent;</span><br><span class="line">    var Agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    var flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="25、去除html标签"><a href="#25、去除html标签" class="headerlink" title="25、去除html标签"></a>25、去除html标签</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const removeHtmltag = (str) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> str.replace(/&lt;[^&gt;]+&gt;/g, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="26、获取url参数"><a href="#26、获取url参数" class="headerlink" title="26、获取url参数"></a>26、获取url参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getQueryString = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> r = search.match(reg) || [];</span><br><span class="line">    <span class="keyword">return</span> r[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="27、引入动态js"><a href="#27、引入动态js" class="headerlink" title="27、引入动态js"></a>27、引入动态js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> injectScript = <span class="function">(<span class="params">src</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    s.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    s.async = <span class="literal">true</span>;</span><br><span class="line">    s.src = src;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;script&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    t.parentNode.insertBefore(s, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="28、根据url地址下载"><a href="#28、根据url地址下载" class="headerlink" title="28、根据url地址下载"></a>28、根据url地址下载</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const download = (url) =&gt; &#123;</span><br><span class="line">    var isChrome = navigator.userAgent.toLowerCase().indexOf(<span class="string">&#x27;chrome&#x27;</span>) &gt; -1;</span><br><span class="line">    var isSafari = navigator.userAgent.toLowerCase().indexOf(<span class="string">&#x27;safari&#x27;</span>) &gt; -1;</span><br><span class="line">    <span class="keyword">if</span> (isChrome || isSafari) &#123;</span><br><span class="line">        var link = document.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        link.href = url;</span><br><span class="line">        <span class="keyword">if</span> (link.download !== undefined) &#123;</span><br><span class="line">            var fileName = url.substring(url.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1, url.length);</span><br><span class="line">            link.download = fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (document.createEvent) &#123;</span><br><span class="line">            var e = document.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>);</span><br><span class="line">            e.initEvent(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            link.dispatchEvent(e);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">&#x27;?&#x27;</span>) === -1) &#123;</span><br><span class="line">        url += <span class="string">&#x27;?download&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    window.open(url, <span class="string">&#x27;_self&#x27;</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="29、el是否包含某个class"><a href="#29、el是否包含某个class" class="headerlink" title="29、el是否包含某个class"></a>29、el是否包含某个class</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const hasClass = (el, className) =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> reg = new RegExp(<span class="string">&#x27;(^|\\s)&#x27;</span> + className + <span class="string">&#x27;(\\s|$)&#x27;</span>)</span><br><span class="line">    <span class="built_in">return</span> reg.test(el.className)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="30、el添加某个class"><a href="#30、el添加某个class" class="headerlink" title="30、el添加某个class"></a>30、el添加某个class</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasClass(el, className)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newClass = el.className.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    newClass.push(className)</span><br><span class="line">    el.className = newClass.join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="31、el去除某个class"><a href="#31、el去除某个class" class="headerlink" title="31、el去除某个class"></a>31、el去除某个class</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasClass(el, className)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(^|\\s)&#x27;</span> + className + <span class="string">&#x27;(\\s|$)&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    el.className = el.className.replace(reg, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="32、获取滚动的坐标"><a href="#32、获取滚动的坐标" class="headerlink" title="32、获取滚动的坐标"></a>32、获取滚动的坐标</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const getScrollPosition = (el = window) =&gt; (&#123;</span><br><span class="line">    x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">    y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="33、滚动到顶部"><a href="#33、滚动到顶部" class="headerlink" title="33、滚动到顶部"></a>33、滚动到顶部</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const scrollToTop = () =&gt; &#123;</span><br><span class="line">    const c = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; 0) &#123;</span><br><span class="line">        window.requestAnimationFrame(scrollToTop);</span><br><span class="line">        window.scrollTo(0, c - c / 8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="34、el是否在是视口范围内"><a href="#34、el是否在是视口范围内" class="headerlink" title="34、el是否在是视口范围内"></a>34、el是否在是视口范围内</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const elementIsVisibleInViewport = (el, partiallyVisible = <span class="literal">false</span>) =&gt; &#123;</span><br><span class="line">    const &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">    const &#123; innerHeight, innerWidth &#125; = window;</span><br><span class="line">    <span class="built_in">return</span> partiallyVisible</span><br><span class="line">        ? ((top &gt; 0 &amp;&amp; top &lt; innerHeight) || (bottom &gt; 0 &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; 0 &amp;&amp; left &lt; innerWidth) || (right &gt; 0 &amp;&amp; right &lt; innerWidth))</span><br><span class="line">        : top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>35、洗牌随机算法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const shuffle = (arr) =&gt; &#123;</span><br><span class="line">    var result = [],</span><br><span class="line">        random;</span><br><span class="line">    <span class="keyword">while</span> (arr.length &gt; 0) &#123;</span><br><span class="line">        random = Math.floor(Math.random() * arr.length);</span><br><span class="line">        result.push(arr[random])</span><br><span class="line">        arr.splice(random, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="36、劫持粘贴板"><a href="#36、劫持粘贴板" class="headerlink" title="36、劫持粘贴板"></a>36、劫持粘贴板</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const copyTextToClipboard = (value) =&gt; &#123;</span><br><span class="line">    var textArea = document.createElement(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">    textArea.style.background = <span class="string">&#x27;transparent&#x27;</span>;</span><br><span class="line">    textArea.value = value;</span><br><span class="line">    document.body.appendChild(textArea);</span><br><span class="line">    textArea.select();</span><br><span class="line">    try &#123;</span><br><span class="line">        var successful = document.execCommand(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;Oops, unable to copy&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    document.body.removeChild(textArea);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="37、判断类型集合"><a href="#37、判断类型集合" class="headerlink" title="37、判断类型集合"></a>37、判断类型集合</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作者：爱前端不爱恋爱</span><br><span class="line">链接：https://zhuanlan.zhihu.com/p/143590337</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const checkStr = (str, <span class="built_in">type</span>) =&gt; &#123;</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;phone&#x27;</span>:   //手机号码</span><br><span class="line">            <span class="built_in">return</span> /^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;tel&#x27;</span>:     //座机</span><br><span class="line">            <span class="built_in">return</span> /^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;card&#x27;</span>:    //身份证</span><br><span class="line">            <span class="built_in">return</span> /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:     //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span><br><span class="line">            <span class="built_in">return</span> /^[a-zA-Z]\w&#123;5,17&#125;$/.<span class="built_in">test</span>(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;postal&#x27;</span>:  //邮政编码</span><br><span class="line">            <span class="built_in">return</span> /[1-9]\d&#123;5&#125;(?!\d)/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;QQ&#x27;</span>:      //QQ号</span><br><span class="line">            <span class="built_in">return</span> /^[1-9][0-9]&#123;4,9&#125;$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;email&#x27;</span>:   //邮箱</span><br><span class="line">            <span class="built_in">return</span> /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;money&#x27;</span>:   //金额(小数点2位)</span><br><span class="line">            <span class="built_in">return</span> /^\d*(?:\.\d&#123;0,2&#125;)?$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;URL&#x27;</span>:     //网址</span><br><span class="line">            <span class="built_in">return</span> /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+<span class="comment">#]*[\w\-\@?^=%&amp;/~\+#])?/.test(str)</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;IP&#x27;</span>:      //IP</span><br><span class="line">            <span class="built_in">return</span> /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;date&#x27;</span>:    //日期时间</span><br><span class="line">            <span class="built_in">return</span> /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/.<span class="built_in">test</span>(str) || /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/.<span class="built_in">test</span>(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:  //数字</span><br><span class="line">            <span class="built_in">return</span> /^[0-9]$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;english&#x27;</span>: //英文</span><br><span class="line">            <span class="built_in">return</span> /^[a-zA-Z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;chinese&#x27;</span>: //中文</span><br><span class="line">            <span class="built_in">return</span> /^[\\u4E00-\\u9FA5]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;lower&#x27;</span>:   //小写</span><br><span class="line">            <span class="built_in">return</span> /^[a-z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;upper&#x27;</span>:   //大写</span><br><span class="line">            <span class="built_in">return</span> /^[A-Z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;HTML&#x27;</span>:    //HTML标记</span><br><span class="line">            <span class="built_in">return</span> /&lt;(<span class="string">&quot;[^&quot;</span>]*<span class="string">&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;</span>&gt;])*&gt;/.<span class="built_in">test</span>(str);</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="38、严格的身份校验"><a href="#38、严格的身份校验" class="headerlink" title="38、严格的身份校验"></a>38、严格的身份校验</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作者：爱前端不爱恋爱</span><br><span class="line">链接：https://zhuanlan.zhihu.com/p/143590337</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const isCardID = (sId) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.<span class="built_in">test</span>(sId)) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;你输入的身份证长度或格式错误&#x27;</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    //身份证城市</span><br><span class="line">    var aCity = &#123; 11: <span class="string">&quot;北京&quot;</span>, 12: <span class="string">&quot;天津&quot;</span>, 13: <span class="string">&quot;河北&quot;</span>, 14: <span class="string">&quot;山西&quot;</span>, 15: <span class="string">&quot;内蒙古&quot;</span>, 21: <span class="string">&quot;辽宁&quot;</span>, 22: <span class="string">&quot;吉林&quot;</span>, 23: <span class="string">&quot;黑龙江&quot;</span>, 31: <span class="string">&quot;上海&quot;</span>, 32: <span class="string">&quot;江苏&quot;</span>, 33: <span class="string">&quot;浙江&quot;</span>, 34: <span class="string">&quot;安徽&quot;</span>, 35: <span class="string">&quot;福建&quot;</span>, 36: <span class="string">&quot;江西&quot;</span>, 37: <span class="string">&quot;山东&quot;</span>, 41: <span class="string">&quot;河南&quot;</span>, 42: <span class="string">&quot;湖北&quot;</span>, 43: <span class="string">&quot;湖南&quot;</span>, 44: <span class="string">&quot;广东&quot;</span>, 45: <span class="string">&quot;广西&quot;</span>, 46: <span class="string">&quot;海南&quot;</span>, 50: <span class="string">&quot;重庆&quot;</span>, 51: <span class="string">&quot;四川&quot;</span>, 52: <span class="string">&quot;贵州&quot;</span>, 53: <span class="string">&quot;云南&quot;</span>, 54: <span class="string">&quot;西藏&quot;</span>, 61: <span class="string">&quot;陕西&quot;</span>, 62: <span class="string">&quot;甘肃&quot;</span>, 63: <span class="string">&quot;青海&quot;</span>, 64: <span class="string">&quot;宁夏&quot;</span>, 65: <span class="string">&quot;新疆&quot;</span>, 71: <span class="string">&quot;台湾&quot;</span>, 81: <span class="string">&quot;香港&quot;</span>, 82: <span class="string">&quot;澳门&quot;</span>, 91: <span class="string">&quot;国外&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!aCity[parseInt(sId.substr(0, 2))]) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;你的身份证地区非法&#x27;</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 出生日期验证</span><br><span class="line">    var sBirthday = (sId.substr(6, 4) + <span class="string">&quot;-&quot;</span> + Number(sId.substr(10, 2)) + <span class="string">&quot;-&quot;</span> + Number(sId.substr(12, 2))).replace(/-/g, <span class="string">&quot;/&quot;</span>),</span><br><span class="line">        d = new Date(sBirthday)</span><br><span class="line">    <span class="keyword">if</span> (sBirthday != (d.getFullYear() + <span class="string">&quot;/&quot;</span> + (d.getMonth() + 1) + <span class="string">&quot;/&quot;</span> + d.getDate())) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;身份证上的出生日期非法&#x27;</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 身份证号码校验</span><br><span class="line">    var sum = 0,</span><br><span class="line">        weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],</span><br><span class="line">        codes = <span class="string">&quot;10X98765432&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; sId.length - 1; i++) &#123;</span><br><span class="line">        sum += sId[i] * weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    var last = codes[sum % 11]; //计算出来的最后一位身份证号码</span><br><span class="line">    <span class="keyword">if</span> (sId[sId.length - 1] != last) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;你输入的身份证号非法&#x27;</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="39、随机数范围"><a href="#39、随机数范围" class="headerlink" title="39、随机数范围"></a>39、随机数范围</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const random = (min, max) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (arguments.length === 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.floor(min + Math.random() * ((max + 1) - min))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="40、将阿拉伯数字转换成中文的答谢数字"><a href="#40、将阿拉伯数字转换成中文的答谢数字" class="headerlink" title="40、将阿拉伯数字转换成中文的答谢数字"></a>40、将阿拉伯数字转换成中文的答谢数字</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作者：爱前端不爱恋爱</span><br><span class="line">链接：https://zhuanlan.zhihu.com/p/143590337</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const numberToChinese = (num) =&gt; &#123;</span><br><span class="line">    var AA = new Array(<span class="string">&quot;零&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>, <span class="string">&quot;七&quot;</span>, <span class="string">&quot;八&quot;</span>, <span class="string">&quot;九&quot;</span>, <span class="string">&quot;十&quot;</span>);</span><br><span class="line">    var BB = new Array(<span class="string">&quot;&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;百&quot;</span>, <span class="string">&quot;仟&quot;</span>, <span class="string">&quot;萬&quot;</span>, <span class="string">&quot;億&quot;</span>, <span class="string">&quot;点&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    var a = (<span class="string">&quot;&quot;</span> + num).replace(/(^0*)/g, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;.&quot;</span>),</span><br><span class="line">        k = 0,</span><br><span class="line">        re = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (var i = a[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        switch (k) &#123;</span><br><span class="line">            <span class="keyword">case</span> 0:</span><br><span class="line">                re = BB[7] + re;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 4:</span><br><span class="line">                <span class="keyword">if</span> (!new RegExp(<span class="string">&quot;0&#123;4&#125;//d&#123;&quot;</span> + (a[0].length - i - 1) + <span class="string">&quot;&#125;$&quot;</span>)</span><br><span class="line">                    .<span class="built_in">test</span>(a[0]))</span><br><span class="line">                    re = BB[4] + re;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 8:</span><br><span class="line">                re = BB[5] + re;</span><br><span class="line">                BB[7] = BB[5];</span><br><span class="line">                k = 0;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0)</span><br><span class="line">            re = AA[0] + re;</span><br><span class="line">        <span class="keyword">if</span> (a[0].charAt(i) != 0)</span><br><span class="line">            re = AA[a[0].charAt(i)] + BB[k % 4] + re;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; 1) // 加上小数部分(如果有小数部分)</span><br><span class="line">    &#123;</span><br><span class="line">        re += BB[6];</span><br><span class="line">        <span class="keyword">for</span> (var i = 0; i &lt; a[1].length; i++)</span><br><span class="line">            re += AA[a[1].charAt(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (re == <span class="string">&#x27;一十&#x27;</span>)</span><br><span class="line">        re = <span class="string">&quot;十&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (re.match(/^一/) &amp;&amp; re.length == 3)</span><br><span class="line">        re = re.replace(<span class="string">&quot;一&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="41、将数字转换成大写金额"><a href="#41、将数字转换成大写金额" class="headerlink" title="41、将数字转换成大写金额"></a>41、将数字转换成大写金额</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作者：爱前端不爱恋爱</span><br><span class="line">链接：https://zhuanlan.zhihu.com/p/143590337</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const changeToChinese = (Num) =&gt; &#123;</span><br><span class="line">    //判断如果传递进来的不是字符的话转换为字符</span><br><span class="line">    <span class="keyword">if</span> (typeof Num == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        Num = new String(Num);</span><br><span class="line">    &#125;;</span><br><span class="line">    Num = Num.replace(/,/g, <span class="string">&quot;&quot;</span>) //替换tomoney()中的“,”</span><br><span class="line">    Num = Num.replace(/ /g, <span class="string">&quot;&quot;</span>) //替换tomoney()中的空格</span><br><span class="line">    Num = Num.replace(/￥/g, <span class="string">&quot;&quot;</span>) //替换掉可能出现的￥字符</span><br><span class="line">    <span class="keyword">if</span> (isNaN(Num)) &#123; //验证输入的字符是否为数字</span><br><span class="line">        //alert(<span class="string">&quot;请检查小写金额是否正确&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    //字符处理完毕后开始转换，采用前后两部分分别转换</span><br><span class="line">    var part = String(Num).split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    var newchar = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    //小数点前进行转化</span><br><span class="line">    <span class="keyword">for</span> (var i = part[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (part[0].length &gt; 10) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            //若数量超过拾亿单位，提示</span><br><span class="line">        &#125;</span><br><span class="line">        var tmpnewchar = <span class="string">&quot;&quot;</span></span><br><span class="line">        var perchar = part[0].charAt(i);</span><br><span class="line">        switch (perchar) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;零&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;壹&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;贰&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;叁&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;肆&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;伍&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;陆&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;7&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;柒&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;8&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;捌&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&quot;玖&quot;</span> + tmpnewchar;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        switch (part[0].length - i - 1) &#123;</span><br><span class="line">            <span class="keyword">case</span> 0:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 1:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;拾&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 2:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;佰&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 3:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;仟&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 4:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&quot;万&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 5:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;拾&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 6:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;佰&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 7:</span><br><span class="line">                <span class="keyword">if</span> (perchar != 0) tmpnewchar = tmpnewchar + <span class="string">&quot;仟&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 8:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&quot;亿&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 9:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&quot;拾&quot;</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        var newchar = tmpnewchar + newchar;</span><br><span class="line">    &#125;</span><br><span class="line">    //小数点之后进行转化</span><br><span class="line">    <span class="keyword">if</span> (Num.indexOf(<span class="string">&quot;.&quot;</span>) != -1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (part[1].length &gt; 2) &#123;</span><br><span class="line">            // alert(<span class="string">&quot;小数点之后只能保留两位,系统将自动截断&quot;</span>);</span><br><span class="line">            part[1] = part[1].substr(0, 2)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = 0; i &lt; part[1].length; i++) &#123;</span><br><span class="line">            tmpnewchar = <span class="string">&quot;&quot;</span></span><br><span class="line">            perchar = part[1].charAt(i)</span><br><span class="line">            switch (perchar) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;零&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;壹&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;贰&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;叁&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;肆&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;伍&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;陆&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;7&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;柒&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;8&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;捌&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&quot;玖&quot;</span> + tmpnewchar;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == 0) tmpnewchar = tmpnewchar + <span class="string">&quot;角&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == 1) tmpnewchar = tmpnewchar + <span class="string">&quot;分&quot;</span>;</span><br><span class="line">            newchar = newchar + tmpnewchar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //替换所有无用汉字</span><br><span class="line">    <span class="keyword">while</span> (newchar.search(<span class="string">&quot;零零&quot;</span>) != -1)</span><br><span class="line">        newchar = newchar.replace(<span class="string">&quot;零零&quot;</span>, <span class="string">&quot;零&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;零亿&quot;</span>, <span class="string">&quot;亿&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;亿万&quot;</span>, <span class="string">&quot;亿&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;零万&quot;</span>, <span class="string">&quot;万&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;零元&quot;</span>, <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;零角&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    newchar = newchar.replace(<span class="string">&quot;零分&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (newchar.charAt(newchar.length - 1) == <span class="string">&quot;元&quot;</span>) &#123;</span><br><span class="line">        newchar = newchar + <span class="string">&quot;整&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newchar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="42、判断一个元素是否在数组中"><a href="#42、判断一个元素是否在数组中" class="headerlink" title="42、判断一个元素是否在数组中"></a>42、判断一个元素是否在数组中</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const contains = (arr, val) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.indexOf(val) != -1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="43、数组排序，-type-1：从小到大-2：从大到小-3：随机"><a href="#43、数组排序，-type-1：从小到大-2：从大到小-3：随机" class="headerlink" title="43、数组排序，{type} 1：从小到大 2：从大到小 3：随机"></a>43、数组排序，{type} 1：从小到大 2：从大到小 3：随机</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const sort = (arr, <span class="built_in">type</span> = 1) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.sort((a, b) =&gt; &#123;</span><br><span class="line">        switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> 1:</span><br><span class="line">                <span class="built_in">return</span> a - b;</span><br><span class="line">            <span class="keyword">case</span> 2:</span><br><span class="line">                <span class="built_in">return</span> b - a;</span><br><span class="line">            <span class="keyword">case</span> 3:</span><br><span class="line">                <span class="built_in">return</span> Math.random() - 0.5;</span><br><span class="line">            default:</span><br><span class="line">                <span class="built_in">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="44、去重"><a href="#44、去重" class="headerlink" title="44、去重"></a>44、去重</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const unique = (arr) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (Array.hasOwnProperty(<span class="string">&#x27;from&#x27;</span>)) &#123;</span><br><span class="line">        <span class="built_in">return</span> Array.from(new Set(arr));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var n = &#123;&#125;, r = [];</span><br><span class="line">        <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!n[arr[i]]) &#123;</span><br><span class="line">                n[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">                r.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="45、求两个集合的并集"><a href="#45、求两个集合的并集" class="headerlink" title="45、求两个集合的并集"></a>45、求两个集合的并集</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const union = (a, b) =&gt; &#123;</span><br><span class="line">    var newArr = a.concat(b);</span><br><span class="line">    <span class="built_in">return</span> this.unique(newArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="47、删除其中一个元素"><a href="#47、删除其中一个元素" class="headerlink" title="47、删除其中一个元素"></a>47、删除其中一个元素</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const remove = (arr, ele) =&gt; &#123;</span><br><span class="line">    var index = arr.indexOf(ele);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -1) &#123;</span><br><span class="line">        arr.splice(index, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="48、将类数组转换成数组"><a href="#48、将类数组转换成数组" class="headerlink" title="48、将类数组转换成数组"></a>48、将类数组转换成数组</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const formArray = (ary) =&gt; &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    <span class="keyword">if</span> (Array.isArray(ary)) &#123;</span><br><span class="line">        arr = ary;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr = Array.prototype.slice.call(ary);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="49、最大值"><a href="#49、最大值" class="headerlink" title="49、最大值"></a>49、最大值</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const max = (arr) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.max.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="50、最小值"><a href="#50、最小值" class="headerlink" title="50、最小值"></a>50、最小值</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const min = (arr) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.min.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="51、求和"><a href="#51、求和" class="headerlink" title="51、求和"></a>51、求和</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const sum = (arr) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.reduce((pre, cur) =&gt; &#123;</span><br><span class="line">        <span class="built_in">return</span> pre + cur</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="52、平均值"><a href="#52、平均值" class="headerlink" title="52、平均值"></a>52、平均值</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const average = (arr) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> this.sum(arr) / arr.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="53、去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格"><a href="#53、去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格" class="headerlink" title="53、去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格"></a>53、去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const trim = (str, <span class="built_in">type</span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">type</span> = <span class="built_in">type</span> || 1</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> 1:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\s+/g, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> 2:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(^\s*)|(\s*$)/g, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> 3:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(^\s*)/g, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> 4:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(\s*$)/g, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="54、字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写"><a href="#54、字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写" class="headerlink" title="54、字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写"></a>54、字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const changeCase = (str, <span class="built_in">type</span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">type</span> = <span class="built_in">type</span> || 4</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> 1:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\b\w+\b/g, <span class="keyword">function</span> (word) &#123;</span><br><span class="line">                <span class="built_in">return</span> word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> 2:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\b\w+\b/g, <span class="keyword">function</span> (word) &#123;</span><br><span class="line">                <span class="built_in">return</span> word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> 3:</span><br><span class="line">            <span class="built_in">return</span> str.split(<span class="string">&#x27;&#x27;</span>).map(<span class="keyword">function</span> (word) &#123;</span><br><span class="line">                <span class="keyword">if</span> (/[a-z]/.<span class="built_in">test</span>(word)) &#123;</span><br><span class="line">                    <span class="built_in">return</span> word.toUpperCase();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">return</span> word.toLowerCase()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">case</span> 4:</span><br><span class="line">            <span class="built_in">return</span> str.toUpperCase();</span><br><span class="line">        <span class="keyword">case</span> 5:</span><br><span class="line">            <span class="built_in">return</span> str.toLowerCase();</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="55、监测密码强度"><a href="#55、监测密码强度" class="headerlink" title="55、监测密码强度"></a>55、监测密码强度</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const checkPwd = (str) =&gt; &#123;</span><br><span class="line">    var Lv = 0;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; 6) &#123;</span><br><span class="line">        <span class="built_in">return</span> Lv</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[0-9]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[a-z]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[A-Z]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[\.|-|_]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> Lv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="56、函数节流器"><a href="#56、函数节流器" class="headerlink" title="56、函数节流器"></a>56、函数节流器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const debouncer = (fn, time, interval = 200) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (time - (window.debounceTimestamp || 0) &gt; interval) &#123;</span><br><span class="line">        fn &amp;&amp; fn();</span><br><span class="line">        window.debounceTimestamp = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="57、在字符串中插入新的字符"><a href="#57、在字符串中插入新的字符" class="headerlink" title="57、在字符串中插入新的字符"></a>57、在字符串中插入新的字符</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const insertStr = (soure, index, newStr) =&gt; &#123;</span><br><span class="line">    var str = soure.slice(0, index) + newStr + soure.slice(index);</span><br><span class="line">    <span class="built_in">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="58、判断两个对象是否键值相同"><a href="#58、判断两个对象是否键值相同" class="headerlink" title="58、判断两个对象是否键值相同"></a>58、判断两个对象是否键值相同</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const isObjectEqual = (a, b) =&gt; &#123;</span><br><span class="line">    var aProps = Object.getOwnPropertyNames(a);</span><br><span class="line">    var bProps = Object.getOwnPropertyNames(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aProps.length !== bProps.length) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; aProps.length; i++) &#123;</span><br><span class="line">        var propName = aProps[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a[propName] !== b[propName]) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="59、16进制颜色转RGBRGBA字符串"><a href="#59、16进制颜色转RGBRGBA字符串" class="headerlink" title="59、16进制颜色转RGBRGBA字符串"></a>59、16进制颜色转RGBRGBA字符串</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const colorToRGB = (val, opa) =&gt; &#123;</span><br><span class="line">    var pattern = /^(<span class="comment">#?)[a-fA-F0-9]&#123;6&#125;$/; //16进制颜色值校验规则</span></span><br><span class="line">    var isOpa = typeof opa == <span class="string">&#x27;number&#x27;</span>; //判断是否有设置不透明度</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pattern.test(val)) &#123; //如果值不符合规则返回空字符</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var v = val.replace(/<span class="comment">#/, &#x27;&#x27;); //如果有#号先去除#号</span></span><br><span class="line">    var rgbArr = [];</span><br><span class="line">    var rgbStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">        var item = v.substring(i * 2, i * 2 + 2);</span><br><span class="line">        var num = parseInt(item, 16);</span><br><span class="line">        rgbArr.push(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rgbStr = rgbArr.join();</span><br><span class="line">    rgbStr = <span class="string">&#x27;rgb&#x27;</span> + (isOpa ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;(&#x27;</span> + rgbStr + (isOpa ? <span class="string">&#x27;,&#x27;</span> + opa : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="built_in">return</span> rgbStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="60、追加url参数"><a href="#60、追加url参数" class="headerlink" title="60、追加url参数"></a>60、追加url参数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> const appendQuery = (url, key, value) =&gt; &#123;</span><br><span class="line">    var options = key;</span><br><span class="line">    <span class="keyword">if</span> (typeof options == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        options = &#123;&#125;;</span><br><span class="line">        options[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    options = $.param(options);</span><br><span class="line">    <span class="keyword">if</span> (url.includes(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">        url += <span class="string">&#x27;&amp;&#x27;</span> + options</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += <span class="string">&#x27;?&#x27;</span> + options</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>手写出场率极高的面试题</title>
    <url>/2020/10/30/%E6%89%8B%E5%86%99%E5%87%BA%E5%9C%BA%E7%8E%87%E6%9E%81%E9%AB%98%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="为什么要会手写"><a href="#为什么要会手写" class="headerlink" title="为什么要会手写?"></a>为什么要会手写?</h4><p>面试遇到手写题一脸懵逼的你也许一定想问：网上代码一堆，随便抄一下不香吗，为什么要手写？关于这个问题最直接的回答：为了区分厉害的和普通的。但坦白来讲，会白板实现关键功能的人，实现业务需求的效率一定更高。</p>
<h4 id="为什么这么说？"><a href="#为什么这么说？" class="headerlink" title="为什么这么说？"></a>为什么这么说？</h4><p>拿手写 Promise 举例来讲，真实的业务场景会遇到大量的 AJAX 异步请求，而且大多是嵌套多层的异步代码。</p>
<p>普通前端 A 平时只会最简单的 Promise 用法，遇到多层嵌套的 Promise 就搞不清楚逻辑了，于是开发 1 小时，修 Bug 3 小时，内卷 996；</p>
<p>高级前端 B 会手写 Promise，对 Promise 的内在逻辑一清二楚，于是开发半小时，修 Bug 15 分钟，完成质量高速度快，深受 PM 小姐姐和测试小哥哥的喜爱，准点下班绩效高。</p>
<p>再举个 EventHub 的例子，会手写 EventHub 的前端，Vue 里的 $emit、$on 基本就是闭眼写；同理还有 React 里面组件想要调用普通函数（非箭头函数），需要 this.fn.bind(this)，会手写 bind 的前端就更容易举一反三，不会的就只能死记硬背，遇到 Bug 不知所措。。。</p>
<p>所以，会“四大手写”是前端进阶的必由之路，甚至可以说，手写关键代码的能力 ≈ 编程能力。</p>
<h4 id="1、防抖"><a href="#1、防抖" class="headerlink" title="1、防抖"></a>1、防抖</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, ms = <span class="number">1000</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="built_in">this</span>, args)</span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> task = <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;run task&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = debounce(task, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br></pre></td></tr></table></figure>

<h4 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, ms = <span class="number">1000</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!canRun) <span class="keyword">return</span></span><br><span class="line">    canRun = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      canRun = <span class="literal">true</span></span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task = <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;run task&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> throttleTask = throttle(task, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttleTask)</span><br></pre></td></tr></table></figure>
<h4 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!source &amp;&amp; <span class="keyword">typeof</span> source !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error arguments&#x27;</span>, <span class="string">&#x27;deepClone&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> targetObj = source.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(source).forEach(<span class="function"><span class="params">keys</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(source[keys] &amp;&amp; <span class="keyword">typeof</span> source[keys] === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">      targetObj[keys] = deepclone(source[keys])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      targetObj[keys] = source[keys]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> targetObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、new"><a href="#4、new" class="headerlink" title="4、new"></a>4、new</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Fun, ...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(Func.prototype)&#123;</span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(instance, Func.prototype)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = Func.apply(instance, args)</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span> || (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="literal">null</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = myNew(person, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">me.sayName();</span><br><span class="line"><span class="built_in">console</span>.log(me)</span><br></pre></td></tr></table></figure>
<h4 id="5、bind"><a href="#5、bind" class="headerlink" title="5、bind"></a>5、bind</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context = globalThis</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> newFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newArgs = args.concat(...arguments)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> newFunc)&#123;</span><br><span class="line">      <span class="comment">// 通过 new 调用，绑定this为实例对象</span></span><br><span class="line">      fn.apply(<span class="built_in">this</span>, newArgs)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//通过普通函数形式调用，绑定context</span></span><br><span class="line">      fn.apply(context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  newFunc.prototype = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">  <span class="keyword">return</span> newFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> other = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jackson&#x27;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="built_in">this</span>.name || <span class="string">&#x27;default&#x27;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> meSay = say.bind(me);</span><br><span class="line">meSay()</span><br><span class="line"><span class="keyword">const</span> otherSay = say.bind(other)</span><br><span class="line">otherSay()</span><br></pre></td></tr></table></figure>
<h4 id="5、call"><a href="#5、call" class="headerlink" title="5、call"></a>5、call</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context = globalThis</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">  context[key] = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> args = [].slice.call(argments, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> res = context[key](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="built_in">this</span>.name || <span class="string">&#x27;default&#x27;</span>&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">say.myCall(me)</span><br></pre></td></tr></table></figure>
<h4 id="6、apply"><a href="#6、apply" class="headerlink" title="6、apply"></a>6、apply</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context = globalThis</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">  constext[key] = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">    res = context[key](...argments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = context[key]()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="built_in">this</span>.name || <span class="string">&#x27;default&#x27;</span>&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">say.myApply(me)</span><br></pre></td></tr></table></figure>
<h4 id="7、deepClone"><a href="#7、deepClone" class="headerlink" title="7、deepClone"></a>7、deepClone</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.deepClone = <span class="function"><span class="keyword">function</span>(<span class="params">obj, cache = <span class="keyword">new</span> weakup()</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span>(cache.get(obj)) <span class="keyword">return</span> cache.get(obj)</span><br><span class="line">  <span class="comment">//支持函数</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Function</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      obj.apply(<span class="built_in">this</span>, argments)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//支持日期</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">  <span class="comment">// 支持正则对象</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj.source, obj.flags)</span><br><span class="line">  <span class="comment">// 还可以增加其他对象，比如：Map, Set等，</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组是 key 为数字索引的特殊对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">Array</span>.isArray(obj) ? []: &#123;&#125;</span><br><span class="line">  <span class="comment">// 缓存 copy 的对象，用于处理循环引用的情况</span></span><br><span class="line">  cache.set(obj, res)</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(object[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">      res[key] = deepClone(obj[key], cache)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    birth: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;1970-10-10&#x27;</span>)</span><br><span class="line">    ary: [<span class="number">1</span>, <span class="number">2</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;],</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.source = source;</span><br><span class="line"><span class="keyword">const</span> newObj = deepClone(source)</span><br><span class="line"><span class="built_in">console</span>.log(newObj.meta.ary[<span class="number">2</span>] === source.meta.ary[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h4 id="8、事件总线-发布订阅模式"><a href="#8、事件总线-发布订阅模式" class="headerlink" title="8、事件总线 | 发布订阅模式"></a>8、事件总线 | 发布订阅模式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>= &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.cache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">name, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.cache[name])&#123;</span><br><span class="line">      <span class="built_in">this</span>.cache[name].push(fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.cache[name] = fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">off</span>(<span class="params">name, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="built_in">this</span>.cache[name]</span><br><span class="line">    <span class="keyword">if</span>(tasks)&#123;</span><br><span class="line">      <span class="keyword">const</span> index tasks.findIndex(<span class="function"><span class="params">f</span> =&gt;</span> f === fn || f.callback === fn)</span><br><span class="line">      <span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        tasks.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.cache[name])&#123;</span><br><span class="line">      <span class="comment">//创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="built_in">this</span>.cache[name].slice()</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> fn <span class="keyword">of</span> tasks)&#123;</span><br><span class="line">        fn()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">name, once = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.cache[name])&#123;</span><br><span class="line">      <span class="comment">//创建副本，如果回调函数内继续注册相同的事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="built_in">this</span>.cache[name].slice()</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> fn <span class="keyword">of</span> tasks)&#123;</span><br><span class="line">        fn()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(once)&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.cache[name]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;task1&#x27;</span>); &#125;</span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;task2&#x27;</span>); &#125;</span><br><span class="line">eventBus.on(<span class="string">&#x27;task&#x27;</span>, task1)</span><br><span class="line">eventBus.on(<span class="string">&#x27;task&#x27;</span>, task2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  eventBus.emit(<span class="string">&#x27;task&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h4 id="9、柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#9、柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="9、柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>9、柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params">..args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//关键知识点：function.length 用来获取函数的形参个数</span></span><br><span class="line">    <span class="comment">// arguments.length 获取的是实参个数</span></span><br><span class="line">    <span class="keyword">if</span>(args.length &gt;= func.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> func.apply(<span class="built_in">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args2</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> curried.apply(<span class="built_in">this</span>, args.concat(args2))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">funtion <span class="function"><span class="title">sum</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> curriedSum = curry(sum)</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h4 id="10、es5实现继承"><a href="#10、es5实现继承" class="headerlink" title="10、es5实现继承"></a>10、es5实现继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">proto</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//child</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">age, name</span>)</span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = create(Parent.prototype)</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line"></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">const</span> child  = <span class="keyword">new</span> Child(<span class="number">18</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">child.sayName()</span><br><span class="line">child.sayAge()</span><br></pre></td></tr></table></figure>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInstanceof</span>(<span class="params">instance, klass</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> proto = instance._proto_</span><br><span class="line">  <span class="keyword">let</span> prototyoe = klass.prototype</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(proto === prototype) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    proto = proto.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child()</span><br><span class="line"><span class="built_in">console</span>.log(isInstanceof(child, Parent), isInstanceof(child,Child), isInstanceof(child,<span class="built_in">Array</span>))</span><br></pre></td></tr></table></figure>
<h4 id="12、异步并发数限制"><a href="#12、异步并发数限制" class="headerlink" title="12、异步并发数限制"></a>12、异步并发数限制</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键点</span></span><br><span class="line"><span class="comment"> * 1. new promise 一经创建，立即执行</span></span><br><span class="line"><span class="comment"> * 2. 使用 Promise.resolve().then 可以把任务加到微任务队列，防止立即执行迭代方法</span></span><br><span class="line"><span class="comment"> * 3. 微任务处理过程中，产生的新的微任务，会在同一事件循环内，追加到微任务队列里</span></span><br><span class="line"><span class="comment"> * 4. 使用 race 在某个任务完成时，继续添加任务，保持任务按照最大并发数进行执行</span></span><br><span class="line"><span class="comment"> * 5. 任务完成后，需要从 doingTasks 中移出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params">count, array, iterateFunc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">const</span> doingTasks = []</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> enqueue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(i == array.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      iterateFunc(array[i++])</span><br><span class="line">    &#125;)</span><br><span class="line">    tasks.push(task)</span><br><span class="line">    <span class="keyword">const</span> doing = task.then(<span class="function">() =&gt;</span> doingTasks.splice(doingTasks.indexOf(doing), <span class="number">1</span>))</span><br><span class="line">    doingTasks.push(doing)</span><br><span class="line">    <span class="keyword">const</span> res = doingTasks.length &gt;= count ? <span class="built_in">Promise</span>.race(doingTasks) : <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    <span class="keyword">return</span> res.then(enqueue)    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> enqueue().then(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.all(tasks))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(i), i))</span><br><span class="line">limit(<span class="number">2</span>, [<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>], timeout).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure>
<h4 id="13、异步串行-｜-异步并行"><a href="#13、异步串行-｜-异步并行" class="headerlink" title="13、异步串行 ｜ 异步并行"></a>13、异步串行 ｜ 异步并行</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现一个异步加法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncAdd</span>(<span class="params">a, b, callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, a + b)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案</span></span><br><span class="line"><span class="comment">// 1、promise</span></span><br><span class="line"><span class="keyword">const</span> promiseAdd = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  asyncAdd(a, b, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、串行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">serialSum</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">task, now</span>) =&gt;</span> task.then(<span class="function"><span class="params">res</span> =&gt;</span> promiseAdd(res, now)), promise.resolve(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、并行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">parallelSum</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(args.length === <span class="number">1</span>) <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.length; i += <span class="number">2</span>)&#123;</span><br><span class="line">    tasks.push(promiseAdd(args[i], args[i + <span class="number">1</span>] || <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">  <span class="keyword">return</span> parallelSum(...results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;RUNning...&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> serialSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res1)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> parallelSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res2)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h4 id="14-vue-reactive"><a href="#14-vue-reactive" class="headerlink" title="14. vue reactive"></a>14. vue reactive</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dep module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> stack = []</span><br><span class="line">  <span class="keyword">static</span> target = <span class="literal">null</span></span><br><span class="line">  deps = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.deps = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dep.target)&#123;</span><br><span class="line">      <span class="built_in">this</span>.deps.add(Dep.target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.deps.forEach(<span class="function"><span class="params">w</span> =&gt;</span> w.update())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">pushTarget</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.target)&#123;</span><br><span class="line">      <span class="built_in">this</span>.stack.push(<span class="built_in">this</span>.target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.target = t</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">popTarget</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.target = <span class="built_in">this</span>.stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(o).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">      defineReactive(o, k, o[k])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, k, val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, k, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">      val = newVal</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span>(val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    reactive(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watcher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">effect</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.effect = effect</span><br><span class="line">    <span class="built_in">this</span>.update()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Dep.pushTarget(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">this</span>.effect()</span><br><span class="line">    Dep.popTarget()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  msg: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;===&gt;effect&#x27;</span>, data.msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  data.msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="15、promise"><a href="#15、promise" class="headerlink" title="15、promise"></a>15、promise</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建议阅读 [Promises/A+ 标准](https://promisesaplus.com/)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.resolvedTasks = []</span><br><span class="line">    <span class="built_in">this</span>.rejectedTasks = []</span><br><span class="line">    <span class="built_in">this</span>._resolve = <span class="built_in">this</span>._resolve.bind(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>._reject = <span class="built_in">this</span>._reject.bind(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      func(<span class="built_in">this</span>._resolve, <span class="built_in">this</span>._reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error)&#123;</span><br><span class="line">      <span class="built_in">this</span>._reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.value = value</span><br><span class="line">      <span class="built_in">this</span>.resolvedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.value = reason</span><br><span class="line">      <span class="built_in">this</span>.rejectedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(reason))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.resolvedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> res = onFulfilled(value)</span><br><span class="line">          <span class="keyword">if</span>(res <span class="keyword">instanceof</span> MyPromise)&#123;</span><br><span class="line">            res.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.rejectedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> res onRejected(value)</span><br><span class="line">          <span class="keyword">if</span>(res <span class="keyword">instanceof</span> MyPromise)&#123;</span><br><span class="line">            res.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(onRejected)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;a error&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;===&gt;&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="16、数组扁平化"><a href="#16、数组扁平化" class="headerlink" title="16、数组扁平化"></a>16、数组扁平化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursionFlat</span>(<span class="params">arr = []</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))&#123;</span><br><span class="line">      res.push(...recursionFlat(item))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceFlat</span>(<span class="params">arr = []</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">res, item</span>) =&gt;</span> res.concat(<span class="built_in">Array</span>.isArray(item) ? reduceFlat(item) : item), [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]], <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(recursionFlat(source))</span><br><span class="line"><span class="built_in">console</span>.log(reduceFlat(source))</span><br></pre></td></tr></table></figure>

<h4 id="17、对象扁平化"><a href="#17、对象扁平化" class="headerlink" title="17、对象扁平化"></a>17、对象扁平化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFlat</span>(<span class="params">obj = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">item, preKey = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.entries(item).foreach(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = preKey ? <span class="string">`<span class="subst">$&#123;preKey&#125;</span>.<span class="subst">$&#123;key&#125;</span>`</span> : key</span><br><span class="line">      <span class="keyword">if</span>(val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">        flat(val, newKey)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res[newKey] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  flat(obj)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: &#123;</span><br><span class="line">      c: <span class="number">1</span>,</span><br><span class="line">      d: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    e: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  f: &#123;</span><br><span class="line">    g: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(objectFlat(source))</span><br></pre></td></tr></table></figure>

<h3 id="18、图片懒加载"><a href="#18、图片懒加载" class="headerlink" title="18、图片懒加载"></a>18、图片懒加载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;img src=&quot;default.png&quot; data-src=&quot;https://xxxx/real.png&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisible</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> position = el.getBoundingClientRect()</span><br><span class="line">  <span class="keyword">const</span> windowHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  <span class="comment">//顶部边缘可见</span></span><br><span class="line">  <span class="keyword">const</span> topVisible = position.top &gt; <span class="number">0</span> &amp;&amp; position.top &lt; windowHeight;</span><br><span class="line">  <span class="comment">//底部边缘可见</span></span><br><span class="line">  <span class="keyword">const</span> bottomVisible = position.bottom &lt; windowHeight &amp;&amp; position.bottom &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> topVisible || bottomVisible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imageLazyLoad</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> img <span class="keyword">of</span> images)&#123;</span><br><span class="line">    <span class="keyword">const</span> realSrc = img.dataset.src</span><br><span class="line">    <span class="keyword">if</span>(!realSrc) contine</span><br><span class="line">    <span class="keyword">if</span>(isVisible(img))&#123;</span><br><span class="line">      img.src = realSrc</span><br><span class="line">      img.dataset.src = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, imageLazyLoad)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, imageLazyLoad)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(imageLazyLoad, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关面试题</title>
    <url>/2020/08/02/Vue%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、什么是MVVM，MVC和MVVM的区别，MVVM框架VUE实现原理"><a href="#一、什么是MVVM，MVC和MVVM的区别，MVVM框架VUE实现原理" class="headerlink" title="一、什么是MVVM，MVC和MVVM的区别，MVVM框架VUE实现原理?"></a>一、什么是MVVM，MVC和MVVM的区别，MVVM框架VUE实现原理?</h3><ol>
<li>MVVM定义:</li>
</ol>
<ul>
<li>MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。</li>
<li>【模型】指的是后端传递的数据。</li>
<li>【视图】指的是所看到的页面。</li>
<li>【视图模型】mvvm模式的核心，它是连接view和model的桥梁。</li>
<li>  它有两个方向：一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。</li>
<li><strong>总结：</strong>在MVVM的框架下视图和模型是不能直接通信的。它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信。MVVM流程图如下：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/27/d4sdL4.jpg" alt="4sdL4.png"></p>
<ol start="2">
<li>MVC的定义：<br>1⃣️ MVC是Model-View- Controller的简写。即模型-视图-控制器。</li>
</ol>
<ul>
<li>M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。</li>
<li>使用MVC的目的就是将M和V的代码分离。</li>
<li>‘MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</li>
<li>MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用。</li>
<li>由于mvc出现的时间比较早，前端并不那么成熟，很多业务逻辑也是在后端实现，所以前端并没有真正意义上的MVC模式。而我们今天再次提起MVC，是因为大前端的来到，出现了MVVM模式的框架，我们需要了解一下MVVM这种设计模式是如何一步步演变过来的。<br>2⃣️ 为什么会有MVVM框架？</li>
<li>在过去的10年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。综上两方面原因，才有了MVVM模式一类框架的出现。比如vue,通过数据的双向绑定，极大了提高了开发效率。<br>3⃣️. MVVM框架:VUE的介绍Vue就是基于MVVM模式实现的一套框架，</li>
<li>在vue中：Model:指的是js中的数据，如对象，数组等等。</li>
<li>View:指的是页面视图</li>
<li>viewModel:指的是vue实例化对象<br>4⃣️为什么说VUE是一个渐进式的javascript框架, 渐进式是什么意思？</li>
<li>1.如果你已经有一个现成的服务端应用，你可以将vue 作为该应用的一部分嵌入其中，带来更加丰富的交互体验;</li>
<li>2.如果你希望将更多业务逻辑放到前端来实现，那么VUE的核心库及其生态系统也可以满足你的各式需求（core+vuex+vue-route）。和其它前端框架一样，VUE允许你将一个网页分割成可复用的组件，每个组件都包含属于自己的HTML、CSS、JAVASCRIPT以用来渲染网页中相应的地方。</li>
<li>3.如果我们构建一个大型的应用，在这一点上，我们可能需要将东西分割成为各自的组件和文件，vue有一个命令行工具，使快速初始化一个真实的工程变得非常简单（vue init webpack my-project）。我们可以使用VUE的单文件组件，它包含了各自的HTML、JAVASCRIPT以及带作用域的CSS或SCSS。以上这三个例子，是一步步递进的，也就是说对VUE的使用可大可小，它都会有相应的方式来整合到你的项目中。所以说它是一个渐进式的框架。</li>
<li>VUE最独特的特性：响应式系统VUE是响应式的（reactive），也就是说当我们的数据变更时，VUE会帮你更新所有网页中用到它的地方,<a class="link"   href="https://cn.vuejs.org/v2/guide/reactivity.html" >查看响应式原理<i class="fas fa-external-link-alt"></i></a>。</li>
<li>我们讲一下主流框架实现双向绑定（响应式）的做法：</li>
<li>1⃣️ angular(脏值检查)：angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下： DOM事件，譬如用户输入文本，点击按钮等。( ng-click ) XHR响应事件 ( $http ) 浏览器Location变更事件 ( $location ) Timer事件( $timeout , $interval ) 执行 $digest() 或 $apply()在 Angular 中组件是以树的形式组织起来的，相应地，检测器也是一棵树的形状。当一个异步事件发生时，脏检查会从根组件开始，自上而下对树上的所有子组件进行检查，这种检查方式的性能存在很大问题。</li>
<li>2⃣️ VUE(观察者-订阅者（数据劫持）)：vueObserver 数据监听器，把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用Object.defineProperty()方法把这些属性全部转成setter、getter方法。当data中的某个属性被访问时，则会调用getter方法，当data中的属性被改变时，则会调用setter方法。Compile指令解析器，它的作用对每个元素节点的指令进行解析，替换模板数据，并绑定对应的更新函数，初始化相应的订阅。Watcher 订阅者，作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数。Dep 消息订阅器，内部维护了一个数组，用来收集订阅者（Watcher），数据变动触发notify 函数，再调用订阅者的 update 方法。执行流程如下：<br><img src="https://s1.ax1x.com/2020/08/27/d4c3od.jpg" alt="d4c3od.jpg"><br>从图中可以看出，当执行 new Vue() 时，Vue 就进入了初始化阶段，一方面Vue 会遍历 data 选项中的属性，并用 Object.defineProperty 将它们转为 getter/setter，实现数据变化监听功能；另一方面，Vue 的指令编译器Compile 对元素节点的指令进行解析，初始化视图，并订阅Watcher 来更新视图， 此时Wather 会将自己添加到消息订阅器中(Dep),初始化完毕。当数据发生变化时，Observer 中的 setter 方法被触发，setter 会立即调用Dep.notify()，Dep 开始遍历所有的订阅者，并调用订阅者的 update 方法，订阅者收到通知后对视图进行相应的更新。因为VUE使用Object.defineProperty方法来做数据绑定，而这个方法又无法通过兼容性处理，所以Vue 不支持 IE8 以及更低版本浏览器。另外，查看vue原代码，发现在vue初始化实例时， 有一个proxy代理方法，它的作用就是遍历data中的属性，把它代理到vm的实例上，这也就是我们可以这样调用属性：vm.aaa等于vm.data.aaa。</li>
</ul>
<h3 id="二、Vue的生命周期"><a href="#二、Vue的生命周期" class="headerlink" title="二、Vue的生命周期"></a>二、Vue的生命周期</h3><ul>
<li>beforeCreate（创建前） 实例组件刚创建，元素DOM和数据都还没有初始化。</li>
<li>created（创建后） 数据data已经初始化完成，方法也已经可以调用，但是DOM未渲染。<br>beforeMount（载入前） DOM未完成挂载，数据也初始化完成，但是数据的双向绑定还是显示<code>双花括号</code>,这是因为Vue采用了Virtual DOM（虚拟Dom）技术。先占住了一个坑。</li>
<li>mounted（载入后）数据和DOM都完成挂载，在上一个周期占位的数据把值给渲染进去。可以在这边请求，不过created请求会更好一些。这个周期适合执行初始化需要操作DOM的方法。</li>
<li>beforeUpdate（更新前） 只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，当你请求赋值一个数据的时候会执行这个周期，如果没有数据改变不执行。</li>
<li>updated（更新后） 只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。beforeUpdate和updated要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和容易死循环。</li>
<li>beforeDestroy（销毁前） 这个周期是在组件销毁之前执行，在我项目开发中，觉得这个其实有点类似路由钩子beforeRouterLeave,都是在路由离开的时候执行，只不过beforeDestroy无法阻止路由跳转，但是可以做一些路由离开的时候操作，因为这个周期里面还可以使用data和method。比如一个倒计时组件，如果在路由跳转的时候没有清除，这个定时器还是在的，这时候就可以在这个里面清除计时器。</li>
<li>destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</li>
</ul>
<p>1.什么是vue生命周期？<br>答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</p>
<p>2.vue生命周期的作用是什么？<br>答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p>
<p>3.vue生命周期总共有几个阶段？<br>答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。</p>
<p>4.第一次页面加载会触发哪几个钩子？<br>答：会触发 下面这几个beforeCreate, created, beforeMount, mounted 。</p>
<p>5.DOM 渲染在 哪个周期中就已经完成？<br>答：DOM 渲染在 mounted 中就已经完成了。</p>
<h3 id="三、-Vue实现数据双向绑定的原理：Object-defineProperty"><a href="#三、-Vue实现数据双向绑定的原理：Object-defineProperty" class="headerlink" title="三、 Vue实现数据双向绑定的原理：Object.defineProperty()"></a>三、 Vue实现数据双向绑定的原理：Object.defineProperty()</h3><p>vue实现数据双向绑定主要是：采用<strong>数据劫持结合发布者-订阅者模式</strong>的方式，通过**Object.defineProperty()**来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p>
<p>vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析 <code>&#123;&#123;&#125;&#125;</code>），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。</p>
<p><strong>js实现简单的双向绑定</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txt&quot;</span>&gt;</span><br><span class="line">    &lt;p id=<span class="string">&quot;show&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    var obj = &#123;&#125;</span><br><span class="line">    Object.defineProperty(obj, <span class="string">&#x27;txt&#x27;</span>, &#123;</span><br><span class="line">        get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            <span class="built_in">return</span> obj</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">set</span>: <span class="keyword">function</span> (newValue) &#123;</span><br><span class="line">            document.getElementById(<span class="string">&#x27;txt&#x27;</span>).value = newValue</span><br><span class="line">            document.getElementById(<span class="string">&#x27;show&#x27;</span>).innerHTML = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    document.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">        obj.txt = e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="vue3-x响应式数据原理"><a href="#vue3-x响应式数据原理" class="headerlink" title="vue3.x响应式数据原理"></a>vue3.x响应式数据原理</h4><ul>
<li>Vue3.x改用Proxy替代Object.defineProperty</li>
<li>因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</li>
<li>Proxy只会代理对象的第一层，Vue3是怎样处理这个问题的呢？<ul>
<li>判断当前Reflect.get的返回值是否为Object，如果是则再通过reactive方法做代理， 这样就实现了深度观测。</li>
<li>监测数组的时候可能触发多次get/set，那么如何防止触发多次呢？我们可以判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</li>
</ul>
</li>
</ul>
<h4 id="Proxy-与-Object-defineProperty-优劣对比"><a href="#Proxy-与-Object-defineProperty-优劣对比" class="headerlink" title="Proxy 与 Object.defineProperty 优劣对比"></a>Proxy 与 Object.defineProperty 优劣对比</h4><ul>
<li>Proxy 的优势如下:</li>
<li>Proxy 可以直接监听对象而非属性；</li>
<li>Proxy 可以直接监听数组的变化；</li>
<li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>
<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li>
<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>
<li>Object.defineProperty 的优势如下:</li>
<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>
</ul>
<h3 id="四、Vue组件间的参数传递"><a href="#四、Vue组件间的参数传递" class="headerlink" title="四、Vue组件间的参数传递"></a>四、Vue组件间的参数传递</h3><ul>
<li>父子组件通信</li>
<li>事件机制(**父-&gt;子props,子-&gt;父 $on、$emit)</li>
<li>获取父子组件实例 $parent、$children</li>
<li>Ref 获取实例的方式调用组件的属性或者方法</li>
<li>Provide、inject (不推荐使用，组件库时很常用)</li>
<li>兄弟组件通信Vue.prototype.$bus = new Vue</li>
<li>Vuex</li>
<li>eventBus 这种方法通过一个空的 Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件</li>
<li>跨级组件通信</li>
<li>Vuex</li>
<li>$attrs、$listeners</li>
<li>Provide、inject</li>
</ul>
<h3 id="五、Vue的路由实现：hash模式-和-history模式"><a href="#五、Vue的路由实现：hash模式-和-history模式" class="headerlink" title="五、Vue的路由实现：hash模式 和 history模式"></a>五、Vue的路由实现：hash模式 和 history模式</h3><p><strong>hash模式</strong>：在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；<br>特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。<br>hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 <a class="link"   href="http://www.xxx.com/" >http://www.xxx.com<i class="fas fa-external-link-alt"></i></a>，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。</p>
<p><strong>history模式</strong>：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。<br>history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 <a class="link"   href="http://www.xxx.com/items/id" >http://www.xxx.com/items/id<i class="fas fa-external-link-alt"></i></a>。后端如果缺少对 /items/id 的路由处理，将返回 404 错误。<strong>Vue-Router 官网里如此描述：</strong>“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”</p>
<h3 id="六、Vue与Angular以及React的区别？"><a href="#六、Vue与Angular以及React的区别？" class="headerlink" title="六、Vue与Angular以及React的区别？"></a>六、Vue与Angular以及React的区别？</h3><p><strong>1.与AngularJS的区别</strong><br>相同点：<br>都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。</p>
<p>不同点：<br>AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。</p>
<p><strong>2.与React的区别</strong><br>相同点：<br>React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。<br>不同点：<br>React采用的Virtual DOM会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。</p>
<h3 id="七、vue路由的钩子函数-参看官网：导航守卫"><a href="#七、vue路由的钩子函数-参看官网：导航守卫" class="headerlink" title="七、vue路由的钩子函数 参看官网：导航守卫"></a>七、vue路由的钩子函数 <a class="link"   href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" >参看官网：导航守卫<i class="fas fa-external-link-alt"></i></a></h3><p>一、首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</p>
<p><strong>beforeEach</strong>主要有3个参数to，from，next：</p>
<p><strong>to</strong>：route即将进入的目标路由对象，</p>
<p><strong>from</strong>：route当前导航正要离开的路由</p>
<p><strong>next</strong>：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</p>
<p>二、vue-router的钩子函数有三类：<br>1、全局钩子<br><strong>beforeEach(to，from，next)</strong></p>
<ul>
<li>页面加载之前</li>
<li>页面跳转之前权限认证，访问拦截</li>
</ul>
<p> <strong>afterEach(to，from，next)</strong></p>
<ul>
<li>页面加载之后</li>
</ul>
<p>2、组建内的导航钩子<br>beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave,直接在路由组件内部进行定义的。<br><strong>beforeRouteEnter(to, from, next)</strong><br><strong>beforeRouteUpdate(to, from, next)</strong><br><strong>beforeRouteLeave(to, from, next)</strong></p>
<ul>
<li><p>用途：清除当前组件中的定时器，避免占用内存；当页面中有未关闭的窗口, 或未保存的内容时, 阻止页面跳转；保存相关内容到Vuex中或Session中</p>
<p>3、路由内的导航钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">    component: detail,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="八、vuex是什么？怎么使用？哪种功能场景使用它？"><a href="#八、vuex是什么？怎么使用？哪种功能场景使用它？" class="headerlink" title="八、vuex是什么？怎么使用？哪种功能场景使用它？"></a>八、vuex是什么？怎么使用？哪种功能场景使用它？</h3><p>只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。<br>在main.js引入store，注入。新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车</p>
<p><img src="https://s1.ax1x.com/2020/08/02/at9X6K.png" alt="at9X6K.png"></p>
<p><strong>state</strong><br>Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。<br/><br><strong>mutations</strong><br>mutations定义的方法动态修改Vuex 的 store 中的状态或数据。<br/><br><strong>getters</strong><br>类似vue的计算属性，主要用来过滤一些数据。<br/><br><strong>action</strong><br>actions可以理解为通过将mutations里面处理数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。<br/></p>
<p>上图为官网中vuex各个要素的关系图，<strong>总的来说，我们可以在组件中触发Action，Action则会提交Mution，Mution会对State进行修改，组件再根据State、Getter渲染页面</strong> <br/></p>
<p><strong>什么样的应用场景下需要vuex ？</strong></p>
<p>如果不打算开发大型单页应用，使用vuex可能是繁琐冗余的。确实是如此——如果你的应用够简单，那最好不要使用vuex。一个简单的global event bus 就足够所需了。但是，如果需要构建是一个中大型单页应用，很可能会考虑如何更好地在组件外部管理状态，vuex将会成为自然而然的选择。<br/></p>
<p>vuex一般用于中大型web单页应用中对应的状态进行管理，对于一些组件间关系较为简单的小型应用，使用vuex的必要性不是很大，因为完全可以用组件prop属性或者事件来完成父子组件之间的通信，vuex更多地用于解决跨组件通信以及作为数据中心集中式存储数据。<br/></p>
<p><strong>使用vuex解决跨组件通信问题</strong></p>
<p>跨组件通信一般指非父子组件间的通信，父子组件的通信一般可以通过以下方式：<br/></p>
<p><strong>1、通过prop属性实现父组件向子组件传递数据</strong><br/><br><strong>2、通过在子组件中触发事件实现向父组件传递数据</strong><br/><br>非父子组件之间的通信一般通过一个空的Vue实例作为 中转站，也可以称之为 事件中心、event bus<br/></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//创建事件中心实例</span><br><span class="line"><span class="built_in">let</span> bus = new Vue();</span><br><span class="line"></span><br><span class="line">// 在组件A中触发事件</span><br><span class="line">bus.<span class="variable">$emit</span>(<span class="string">&#x27;test&#x27;</span>,1);</span><br><span class="line"></span><br><span class="line">//在组件B中接受事件</span><br><span class="line">bus.<span class="variable">$on</span>(<span class="string">&#x27;test&#x27;</span>, id) =&gt; &#123;</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>采用event bus的方式适合简单的开组件事件，对于多层级组件嵌套等较为复杂的场景，使用vuex能更好的应对。**<em>vuex是通过将state作为数据中心，各个组件共享state实现跨组件通信**</em>，此时的数据完全独立于组件，因此将组件间共享的数据置于state中能有效解决多层级组件嵌套的跨组件通信问题。<br/></p>
<p><strong>vuex作为数据存储中心</strong><br>vuex的State在单页应用的开发中本身具有一个”数据库”的作用，可以将组件中用到的数据存储在state中，并在Action中封装数据读写的逻辑。这时候存在一个问题，一般什么样的数据会放在State中呢？目前主要有两种数据会使用vuex进行管理：<br/></p>
<p>1、组件之间全局共享的数据<br/><br>2、通过后端异步请求的数据<br/></p>
<p>即<strong>把通过后端异步请求的数据都纳入vuex状态管理，在Action中封装数据的增删改查等的逻辑，这样可以一定程度上对前端的逻辑代码进行分层，使组件中的代码更多的关注页面交互与数据渲染等视图层的逻辑，而异步请求与状态数据的持久化等则交由vuex管理</strong>。<br/></p>
<p><strong>下面是一个使用vuex管理用户数据的demo</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// State</span><br><span class="line"></span><br><span class="line">const state = &#123;</span><br><span class="line">  userInfo: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Mutation</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  UPDATE_USER_INFO(state,payload)&#123;</span><br><span class="line">    state.userInfo = payload</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Action</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const fetchUserInfo = async (&#123;commit&#125;) =&gt; &#123;</span><br><span class="line">  //请求用户数据</span><br><span class="line">  // 调用Mutation 写入用户数据</span><br><span class="line">  commit(<span class="string">&#x27;UPDATE_USER_INFO&#x27;</span>, userInfo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//component //在组件中引入Action</span><br><span class="line">...mapAction(&#123;</span><br><span class="line">  fetchUserInfoAction: `fectchUserInfo`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//在method中调用Action</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> res = self.fetchUserInfoAction()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Vuex和单纯的全局对象有什么区别？"><a href="#Vuex和单纯的全局对象有什么区别？" class="headerlink" title="Vuex和单纯的全局对象有什么区别？"></a>Vuex和单纯的全局对象有什么区别？</h4><ul>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ul>
<h4 id="为什么-Vuex-的-mutation-中不能做异步操作？"><a href="#为什么-Vuex-的-mutation-中不能做异步操作？" class="headerlink" title="为什么 Vuex 的 mutation 中不能做异步操作？"></a>为什么 Vuex 的 mutation 中不能做异步操作？</h4><ul>
<li>Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
<li>每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</li>
</ul>
<h4 id="新增：vuex的action有返回值吗？返回的是什么？"><a href="#新增：vuex的action有返回值吗？返回的是什么？" class="headerlink" title="新增：vuex的action有返回值吗？返回的是什么？"></a>新增：vuex的action有返回值吗？返回的是什么？</h4><ul>
<li>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise</li>
<li>Action 通常是异步的，要知道 action 什么时候结束或者组合多个 action以处理更加复杂的异步流程，可以通过定义action时返回一个promise对象，就可以在派发action的时候就可以通过处理返回的 Promise处理异步流程</li>
</ul>
<blockquote>
<p>一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p>
</blockquote>
<h4 id="新增：为什么不直接分发mutation-而要通过分发action之后提交-mutation变更状态"><a href="#新增：为什么不直接分发mutation-而要通过分发action之后提交-mutation变更状态" class="headerlink" title="新增：为什么不直接分发mutation,而要通过分发action之后提交 mutation变更状态"></a>新增：为什么不直接分发mutation,而要通过分发action之后提交 mutation变更状态</h4><ul>
<li>mutation 必须同步执行，我们可以在 action 内部执行异步操作</li>
<li>可以进行一系列的异步操作，并且通过提交 mutation 来记录 action 产生的副作用（即状态变更）</li>
</ul>
<p><strong>总结</strong><br/><br>vuex具体应用在哪取决于项目的规模以及具体的业务场景，可能是为了解决多层嵌套组件之间的通信问题，或是为了更好地管理应用中错综复杂的状态关系，而不能为了用vuex而在项目中使vuex。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123; //store实例</span><br><span class="line">      state: &#123;</span><br><span class="line">         count: 0</span><br><span class="line">             &#125;,</span><br><span class="line">      mutations: &#123;                </span><br><span class="line">         increment (state) &#123;</span><br><span class="line">          state.count++</span><br><span class="line">         &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">      actions: &#123; </span><br><span class="line">         increment (context) &#123;</span><br><span class="line">          context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>modules</strong></p>
<p>项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line"> &#125;</span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="九、vue-cli如何新增自定义指令？"><a href="#九、vue-cli如何新增自定义指令？" class="headerlink" title="九、vue-cli如何新增自定义指令？"></a>九、vue-cli如何新增自定义指令？</h3><p>1、创建局部指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;    </span><br><span class="line">    &#125;,</span><br><span class="line">    // 创建指令(可以多个)</span><br><span class="line">    directives: &#123;</span><br><span class="line">        // 指令名称</span><br><span class="line">        dir1: &#123;</span><br><span class="line">            inserted(el) &#123;</span><br><span class="line">                // 指令中第一个参数是当前使用指令的DOM</span><br><span class="line">                console.log(el);</span><br><span class="line">                console.log(arguments);</span><br><span class="line">                // 对DOM进行操作</span><br><span class="line">                el.style.width = <span class="string">&#x27;200px&#x27;</span>;</span><br><span class="line">                el.style.height = <span class="string">&#x27;200px&#x27;</span>;</span><br><span class="line">                el.style.background = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2、全局指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;dir2&#x27;</span>, &#123;</span><br><span class="line">    inserted(el) &#123;</span><br><span class="line">        console.log(el);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>3、指令的使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div v-dir1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-dir2&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="十、vue如何自定义一个过滤器？"><a href="#十、vue如何自定义一个过滤器？" class="headerlink" title="十、vue如何自定义一个过滤器？"></a>十、vue如何自定义一个过滤器？</h3><p>html代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">     &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;msg&quot;</span> /&gt;</span><br><span class="line">     &#123;&#123;msg| capitalize &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>JS代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var vm=new Vue(&#123;</span><br><span class="line">    el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">      capitalize: <span class="keyword">function</span> (value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!value) <span class="built_in">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        value = value.toString()</span><br><span class="line">        <span class="built_in">return</span> value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>全局定义过滤器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="keyword">function</span> (value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="built_in">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="built_in">return</span> value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>过滤器接收表达式的值 (msg) 作为第一个参数。capitalize 过滤器将会收到 msg的值作为第一个参数。</p>
<h3 id="十一、对keep-alive-的了解？"><a href="#十一、对keep-alive-的了解？" class="headerlink" title="十一、对keep-alive 的了解？"></a>十一、对keep-alive 的了解？</h3><p><strong>keep-alive</strong>是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p>
<h6 id="1、在vue-2-1-0-版本之后，keep-alive新加入了两个属性"><a href="#1、在vue-2-1-0-版本之后，keep-alive新加入了两个属性" class="headerlink" title="1、在vue 2.1.0 版本之后，keep-alive新加入了两个属性:"></a>1、在vue 2.1.0 版本之后，keep-alive新加入了两个属性:</h6><p>include(包含的组件缓存) 与 exclude(排除的组件不缓存，优先级大于include) 。</p>
<p>使用方法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&#x27;include_components&#x27;</span> exclude=<span class="string">&#x27;exclude_components&#x27;</span>&gt;</span><br><span class="line">  &lt;component&gt;</span><br><span class="line">    &lt;!-- 该组件是否缓存取决于include和exclude属性 --&gt;</span><br><span class="line">  &lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>参数解释<br>include - 字符串或正则表达式，只有名称匹配的组件会被缓存<br>exclude - 字符串或正则表达式，任何名称匹配的组件都不会被缓存<br>include 和 exclude 的属性允许组件有条件地缓存。二者都可以用“，”分隔字符串、正则表达式、数组。当使用正则或者是数组时，要记得使用v-bind 。</p>
<p>使用示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!-- 逗号分隔字符串，只有组件a与b被缓存。 --&gt;</span><br><span class="line">&lt;keep-alive include=<span class="string">&quot;a,b&quot;</span>&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 正则表达式 (需要使用 v-bind，符合匹配规则的都会被缓存) --&gt;</span><br><span class="line">&lt;keep-alive :include=<span class="string">&quot;/a|b/&quot;</span>&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Array (需要使用 v-bind，被包含的都会被缓存) --&gt;</span><br><span class="line">&lt;keep-alive :include=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<h6 id="2、keep-alive的两个生命周期"><a href="#2、keep-alive的两个生命周期" class="headerlink" title="2、keep-alive的两个生命周期"></a>2、keep-alive的两个生命周期</h6><ul>
<li><ol>
<li>activated: 页面第一次进入的时候，钩子触发的顺序是created-&gt;mounted-&gt;activated</li>
</ol>
</li>
<li><ol start="2">
<li>deactivated: 页面退出的时候会触发deactivated，当再次前进或者后退的时候只触发activated </li>
</ol>
</li>
</ul>
<h3 id="十二、vue中’-native’修饰符的使用"><a href="#十二、vue中’-native’修饰符的使用" class="headerlink" title="十二、vue中’.native’修饰符的使用"></a>十二、vue中’.native’修饰符的使用</h3><p><strong>官网的解释：</strong></p>
<blockquote>
<p>你可能想在某个组件的根元素上监听一个原生事件。可以使用 <code>v-on</code> 的修饰符 <code>.native</code> 。</p>
</blockquote>
<p>通俗点讲：就是在父组件中给子组件绑定一个原生的事件，就将子组件变成了普通的HTML标签，不加’.native’事件是无法触发的<br><img src="https://s1.ax1x.com/2020/08/27/d4BoF0.png" alt="d4BoF0"><br>此时点击页面中的按钮无任何反应。<br>添加修饰符：<br><img src="https://s1.ax1x.com/2020/08/27/d4B3Ix.png" alt="d4B3Ix.png"></p>
<h3 id="十三、Vue-中的-sync-修饰符"><a href="#十三、Vue-中的-sync-修饰符" class="headerlink" title="十三、Vue 中的 .sync 修饰符"></a>十三、Vue 中的 .sync 修饰符</h3><p>Vue 修饰符 .sync的功能是：当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定，是编译时的一个语法糖。具体表现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line"> &lt;comp :money.sync=<span class="string">&quot;total&quot;</span>&gt;&lt;<span class="regexp">/comp&gt; /</span><span class="regexp">/相当于&lt;comp :money=&quot;total&quot; @update:money=&quot;total=$event&quot;&gt;&lt;/</span>comp&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">Vue.component(<span class="string">&quot;comp&quot;</span>, &#123;</span><br><span class="line"> template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; money &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;$emit(&#x27;update:money&#x27;:money-100)&quot;&gt;cost&lt;/button&gt; //定义新的事件监听</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>,</span><br><span class="line"> props: [<span class="string">&quot;money&quot;</span>], <span class="comment">//子组件的外部属性</span></span><br><span class="line">&#125;);  <span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123; <span class="attr">total</span>: <span class="number">1000</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>具体思路为：为了更新子组件的一个外部数据在父组件中的表现，在子组件中定义一个新的事件监听，而后在父组件中监听这个事件，以更新子组件中这个外部属性的值。因为子组件的外部属性无法在子组件内部得到更新。而 .sync就是父组件中这一系列操作的语法糖。</p>
<h3 id="十四、virtual-dom-Vue实现-简析"><a href="#十四、virtual-dom-Vue实现-简析" class="headerlink" title="十四、virtual-dom(Vue实现)简析"></a>十四、<a class="link"   href="https://segmentfault.com/a/1190000010090659" >virtual-dom(Vue实现)简析<i class="fas fa-external-link-alt"></i></a></h3><h3 id="十五、一句话就能回答的面试题"><a href="#十五、一句话就能回答的面试题" class="headerlink" title="十五、一句话就能回答的面试题"></a>十五、一句话就能回答的面试题</h3><p><strong>1.css只在当前组件起作用</strong><br>答：在style标签中写入scoped即可 例如：<style scoped></style></p>
<p><strong>2.v-if 和 v-show 区别</strong><br>答：v-if按照条件是否渲染，v-show是display的block或none；</p>
<p><strong>区别</strong></p>
<ul>
<li>1.手段：v-if是通过控制dom节点的存在与否来控制元素的显隐；v-show是通过设置DOM元素的display样式，block为显示，none为隐藏；</li>
<li>2.编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；</li>
<li>3.编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；</li>
<li>4.性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</li>
</ul>
<p><strong>使用场景</strong></p>
<p>基于以上区别，因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>
<p><strong>总结</strong></p>
<p>v-if判断是否加载，可以减轻服务器的压力，在需要时加载,但有更高的切换开销;v-show调整DOM元素的CSS的dispaly属性，可以使客户端操作更加流畅，但有更高的初始渲染开销。如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>
<p><strong>3.route和router的区别</strong><br>答：route是“路由信息对象”，包括path, params, hash, query, fullPath, matched, name<br>router是“路由实例”对象包括了路由的跳转方法，钩子函数等。</p>
<p><strong>4.vue.js的两个核心是什么？</strong><br>答：数据驱动、组件系统</p>
<p><strong>5.vue几种常用的指令</strong><br>答：v-for 、 v-if 、v-bind、v-on、v-show、v-else</p>
<p>v-for和v-if不应该一起使用，必要情况下应该替换成computed属性。原因：v-for比v-if优先，如果每一次都需要遍历整个数组，将会影响速度，尤其是当需要渲染很小一部分的时候。</p>
<p>错误写法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">  v-for=<span class="string">&quot;user in users&quot;</span></span><br><span class="line">  v-if=<span class="string">&quot;user.isActive&quot;</span></span><br><span class="line">  :key=<span class="string">&quot;user.id&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123; user.name &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p>如上情况，即使100个user中之需要使用一个数据，也会循环整个数组。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    activeUsers: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> this.users.filter(<span class="keyword">function</span> (user) &#123;</span><br><span class="line">          <span class="built_in">return</span> user.isActive</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li</span><br><span class="line">          v-for=<span class="string">&quot;user in activeUsers&quot;</span></span><br><span class="line">          :key=<span class="string">&quot;user.id&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">        &#123;&#123; user.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p><strong>6.vue常用的修饰符？</strong><br>答：.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；.capture: 事件侦听，事件发生的时候会调用</p>
<p><strong>7.v-on 可以绑定多个方法吗？</strong><br>答：可以</p>
<p><strong>8.什么是vue的计算属性？</strong><br>答：在模板中放入太多的逻辑会让模板过重且难以维护，在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。好处：①使得数据处理结构清晰；②依赖于数据，数据更新，处理结果自动更新；③计算属性内部this指向vm实例；④在template调用时，直接写计算属性名即可；⑤常用的是getter方法，获取数据，也可以使用set方法改变数据；⑥相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，不会重新计算。</p>
<p><strong>9.vue等单页面应用及其优缺点</strong><br>答：优点：Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件，核心是一个响应的数据绑定系统。MVVM、数据驱动、组件化、轻量、简洁、高效、快速、模块友好。<br>缺点：不支持低版本的浏览器，最低只支持到IE9；不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；第一次加载首页耗时相对长一些；不可以使用浏览器的导航按钮需要自行实现前进、后退。</p>
<p><strong>10.怎么定义 vue-router 的动态路由? 怎么获取传过来的值</strong><br>答：在 router 目录下的 index.js 文件中，对 path 属性加上 /:id，使用 router 对象的 params.id 获取。</p>
<p><strong>组件中的data为什么是一个函数？</strong></p>
<ul>
<li>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。</li>
<li>如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</li>
</ul>
<p><strong>子组件为什么不可以修改父组件传递的Prop？/怎么理解vue的单向数据流？</strong></p>
<ul>
<li>Vue提倡单向数据流,即父级props的更新会流向子组件,但是反过来则不行。</li>
<li>这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解。</li>
<li>如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。</li>
</ul>
<p><strong>v-model是如何实现双向绑定的？</strong></p>
<ul>
<li>v-model是用来在表单控件或者组件上创建双向绑定的</li>
<li>他的本质是v-bind和v-on的语法糖</li>
<li>在一个组件上使用v-model，默认会为组件绑定名为value的prop和名为input的事件</li>
</ul>
<p><strong>nextTick的实现原理是什么？</strong></p>
<ul>
<li>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。</li>
<li>nextTick主要使用了宏任务和微任务。</li>
<li>根据执行环境分别尝试采用Promise、MutationObserver、setImmediate，如果以上都不行则采用setTimeout定义了一个-异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</li>
</ul>
<p><strong>Vue不能检测数组的哪些变动？Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</strong></p>
<ul>
<li>Vue 不能检测以下数组的变动：</li>
<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>
<li>解决办法：</li>
<li>vm.$set 的实现原理是：</li>
<li>如果目标是数组，直接使用数组的 splice 方法触发相应式；</li>
<li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li>
</ul>
<p> <strong>虚拟Dom以及key属性的作用</strong></p>
<ul>
<li>由于在浏览器中操作DOM是很昂贵的。频繁的操作DOM，会产生一定的性能问题。这就是虚拟Dom的产生原因。</li>
<li>Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点。是对真实DOM的一层抽象。(也就是源码中的VNode类，它定义在src/core/vdom/vnode.js中。)</li>
<li>虚拟 DOM 的实现原理主要包括以下 3 部分：</li>
<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>
<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>
<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li>
<li>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速，更准确：因为带 key 就不是就地复用了，在 sameNode 函数<code>a.key === b.key</code>对比中可以避免就地复用的情况。所以会更加准确。更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</li>
</ul>
<p><strong>Vue中组件生命周期调用顺序是什么样的？</strong></p>
<ul>
<li>组件的调用顺序都是先父后子,渲染完成的顺序是先子后父。</li>
<li>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</li>
</ul>
<p><strong>你的接口请求一般放在哪个生命周期中？</strong></p>
<ul>
<li>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</li>
<li>推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</li>
<li>能更快获取到服务端数据，减少页面loading 时间；</li>
<li>ssr不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>
</ul>
<p><strong>什么是 mixin ？</strong></p>
<ul>
<li>Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。</li>
<li>如果你希望再多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。</li>
<li>然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。</li>
</ul>
<p> <strong>在 Vue 实例中编写生命周期 hook 或其他 option/properties 时，为什么不使用箭头函数 ？</strong></p>
<ul>
<li>箭头函数自已没有定义 this 上下文中。</li>
<li>当你在 Vue 程序中使用箭头函数 ( =&gt; ) 时，this 关键字并不会绑定到 Vue 实例，因此会引发错误。所以强烈建议改用标准函数声明。</li>
</ul>
<p><strong>简述Vue模版编译原理</strong></p>
<p>简单说，Vue的编译过程就是将template转化为render函数的过程。会经历以下阶段（生成AST树/优化/codegen）：</p>
<ul>
<li>首先解析模版，生成AST语法树(一种用JavaScript对象的形式来描述整个模板)。使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。</li>
<li>Vue的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的DOM也不会变化。那么优化过程就是深度遍历AST树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。</li>
<li>编译的最后一步是将优化后的AST树转换为可执行的代码。</li>
</ul>
<p> <strong>说说你对SSR的了解</strong></p>
<ul>
<li>SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端</li>
<li>SSR的优势：<ul>
<li>更好的SEO</li>
<li>首屏加载速度更快</li>
</ul>
</li>
<li>SSR的缺点：<ul>
<li>开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子</li>
<li>当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境</li>
<li>更多的服务端负载</li>
</ul>
</li>
</ul>
<p><strong>做过哪些Vue的性能优化？</strong></p>
<ul>
<li>编码阶段</li>
<li>尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher</li>
<li>v-if和v-for不能连用</li>
<li>如果需要使用v-for给每项元素绑定事件时使用事件代理</li>
<li>SPA 页面采用keep-alive缓存组件</li>
<li>在更多的情况下，使用v-if替代v-show</li>
<li>key保证唯一</li>
<li>使用路由懒加载、异步组件</li>
<li>防抖、节流</li>
<li>第三方模块按需导入</li>
<li>长列表滚动到可视区域动态加载</li>
<li>图片懒加载</li>
<li>SEO优化</li>
<li>预渲染</li>
<li>服务端渲染SSR</li>
<li>打包优化</li>
<li>压缩代码</li>
<li>Tree Shaking/Scope Hoisting<br>使用cdn加载第三方模块<br>多线程打包happypack<br>splitChunks(webpack分包)<br>sourceMap优化<br>用户体验<br>骨架屏<br>PWA<br>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。</li>
</ul>
<p><strong>vue2.x中如何监测数组变化？</strong></p>
<ul>
<li>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法，当调用数组api时，可以通知依赖更新。</li>
<li>如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</li>
</ul>
<p><strong>说说你对 SPA 单页面的理解，它的优缺点分别是什么？</strong></p>
<ul>
<li>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</li>
<li>优点：</li>
<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li>
<li>基于上面一点，SPA 相对于服务器压力小；</li>
<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li>
<li>缺点：</li>
<li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li>
<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li>
<li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li>
</ul>
<p> <strong>vue3.0特性</strong></p>
<ul>
<li>监测机制的改变</li>
<li>3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。</li>
<li>消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</li>
<li>只能监测属性，不能监测对象</li>
<li>检测属性的添加和删除；</li>
<li>检测数组索引和长度的变更；</li>
<li>支持 Map、Set、WeakMap 和 WeakSet。</li>
<li>模板</li>
<li>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</li>
<li>对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</li>
<li>对象式的组件声明方式</li>
<li>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。</li>
<li>3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易</li>
<li>其它方面的更改</li>
<li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li>
<li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li>
<li>基于 tree shaking 优化，提供了更多的内置功能。</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
